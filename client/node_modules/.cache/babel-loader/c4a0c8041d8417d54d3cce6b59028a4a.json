{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst convertSupportedType = require(\"./SupportedType.js\").convert;\n\nconst impl = utils.implSymbol;\n\nfunction DOMParser() {\n  if (new.target === undefined) {\n    throw new TypeError(\"Failed to construct 'DOMParser'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n  }\n\n  iface.setup(this);\n}\n\nObject.defineProperty(DOMParser, \"prototype\", {\n  value: DOMParser.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nDOMParser.prototype.parseFromString = function parseFromString(str, type) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'parseFromString' on 'DOMParser': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = convertSupportedType(curArg, {\n      context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].parseFromString(...args));\n};\n\nObject.defineProperty(DOMParser.prototype, Symbol.toStringTag, {\n  value: \"DOMParser\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  convert(obj, {\n    context = \"The provided value\"\n  } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n\n    throw new TypeError(`${context} is not of type 'DOMParser'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n\n  _internalSetup(obj) {},\n\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n\n    return obj;\n  },\n\n  interface: DOMParser,\n  expose: {\n    Window: {\n      DOMParser\n    }\n  }\n}; // iface\n\nmodule.exports = iface;\n\nconst Impl = require(\"../domparsing/DOMParser-impl.js\");","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/generated/DOMParser.js"],"names":["conversions","require","utils","convertSupportedType","convert","impl","implSymbol","DOMParser","new","target","undefined","TypeError","iface","setup","Object","defineProperty","value","prototype","writable","enumerable","configurable","parseFromString","str","type","module","exports","is","arguments","length","args","curArg","context","push","tryWrapperForImpl","Symbol","toStringTag","_mixedIntoPredicates","obj","hasOwn","Impl","implementation","isMixedInto","isImpl","wrapper","wrapperForImpl","implForWrapper","create","constructorArgs","privateData","createImpl","_internalSetup","wrapperSymbol","init","interface","expose","Window"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst convertSupportedType = require(\"./SupportedType.js\").convert;\nconst impl = utils.implSymbol;\n\nfunction DOMParser() {\n  if (new.target === undefined) {\n    throw new TypeError(\n      \"Failed to construct 'DOMParser'. Please use the 'new' operator; this constructor \" +\n        \"cannot be called as a function.\"\n    );\n  }\n\n  iface.setup(this);\n}\n\nObject.defineProperty(DOMParser, \"prototype\", {\n  value: DOMParser.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nDOMParser.prototype.parseFromString = function parseFromString(str, type) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\n      \"Failed to execute 'parseFromString' on 'DOMParser': 2 arguments required, but only \" +\n        arguments.length +\n        \" present.\"\n    );\n  }\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = convertSupportedType(curArg, {\n      context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].parseFromString(...args));\n};\n\nObject.defineProperty(DOMParser.prototype, Symbol.toStringTag, {\n  value: \"DOMParser\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\n\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj, { context = \"The provided value\" } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'DOMParser'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {},\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: DOMParser,\n  expose: {\n    Window: { DOMParser }\n  }\n}; // iface\nmodule.exports = iface;\n\nconst Impl = require(\"../domparsing/DOMParser-impl.js\");\n"]},"metadata":{},"sourceType":"script"}