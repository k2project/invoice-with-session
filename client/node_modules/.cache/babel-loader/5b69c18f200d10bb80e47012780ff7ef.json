{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { alertUnsavedChanges } from '../../../components/form/utils/handleUnsavedChanges';\nimport { getInputValueByLabel } from '../../../components/form/utils/customFormQueries';\nimport { date_YYYY_MM, date_DD_MM_YYYY } from '../../../components/calendar/dates';\n\nclass NewInvoice extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      invoice: null\n    };\n    this.handleChanges = this.handleChanges.bind(this);\n    this.clearInitState = this.clearInitState.bind(this);\n    this.updateInitStateToReduxStateOnSubmit = this.updateInitStateToReduxStateOnSubmit.bind(this);\n  }\n\n  handleChanges() {//BECAUSE TASKS CAN BE AMENDED UPDATED IN FORM HENCE NEED TO CHECK INIT STATE AGAINST COMPANY.TASKS NOT INVOICE.TASKS!!!\n    // alertUnsavedChanges(\n    //     this.state.invoice, //initial state\n    //     this.props.invoice, //redux updated state\n    //     `/dashboard/companies/${this.props.company._id}?tab=invoices`,\n    //     // this.props.setUpdates,\n    //     this.props.history\n    // );\n  }\n\n  updateInitStateToReduxStateOnSubmit() {// this.props.setUpdates(this.props.company.details);\n  }\n\n  clearInitState() {//on submit clear app updates\n    // this.props.setUpdates(null);\n  }\n\n  componentDidMount() {\n    let invoiceInitState;\n    const searchArr = window.location.search.split('&');\n\n    if (searchArr[1]) {\n      //updating an existing invoice\n      const invoiceID = searchArr[1].slice(8); //invoiceInitState from the invoices arr\n\n      invoiceInitState = {\n        _id: invoiceID\n      };\n    } else {\n      //create invoice name\n      let company_abbr = getInputValueByLabel(this.props.company.details, 'Name').split(' ');\n\n      if (company_abbr.length > 1) {\n        company_abbr = company_abbr.map(el => el[0].toUpperCase()).join('');\n      } else {\n        company_abbr = company_abbr[0].slice(0, 3).toUpperCase();\n      }\n\n      let invoices_num = '1';\n      if (this.props.company.invoices) invoices_num = String(this.props.company.invoices.length + 1);\n\n      while (invoices_num.length < 5) {\n        invoices_num = '0' + invoices_num;\n      }\n\n      let saved_as = company_abbr + '-';\n      saved_as += date_YYYY_MM(new Date()) + '-';\n      saved_as += invoices_num; //generate due date in 14 days\n\n      const TWO_WEEKS = 1.21e9;\n      let due_date = date_DD_MM_YYYY(new Date().getTime() + TWO_WEEKS); //a new invoice\n\n      invoiceInitState = {\n        saved_as,\n        issue_date: date_DD_MM_YYYY(new Date()),\n        due_date,\n        bg_color: localStorage.invoice_bg || 'blue',\n        text_color: localStorage.invoice_txt || 'white',\n        profile: JSON.parse(JSON.stringify(this.props.profile.details)),\n        company: JSON.parse(JSON.stringify(this.props.company.details)),\n        tasks: JSON.parse(JSON.stringify(this.props.company.tasks)),\n        discount: 0,\n        tax: 0,\n        fees: 0\n      };\n    } //set init state for comparison on component unmounting\n\n\n    this.setState({\n      invoice: JSON.parse(JSON.stringify(invoiceInitState))\n    }); //set redux state\n\n    this.props.setInvoiceInitState(invoiceInitState); // window.addEventListener('beforeunload', this.props.clearInitState);\n  }\n\n  componentWillUnmount() {\n    //auth err and logout won't trigger fun\n    if (this.props.authenticated) this.handleChanges(); // window.removeEventListener('beforeunload', this.props.clearInitState);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"company-invoice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, \"Create a new invoice.\"), this.state.invoice && /*#__PURE__*/React.createElement(InvoiceDoc, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 40\n      }\n    }), this.state.invoice && /*#__PURE__*/React.createElement(NewInvoiceSubmit, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 40\n      }\n    }));\n  }\n\n}\n\nNewInvoice.propTypes = {\n  authenticated: PropTypes.bool,\n  profile: PropTypes.object,\n  company: PropTypes.object,\n  invoice: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  authenticated: state.session.authenticated,\n  profile: state.profile,\n  company: state.companies.find(c => c._id === state.session.currentCompany),\n  invoice: state.invoice\n});\n\nconst mapDispatchToProps = {\n  setInvoiceInitState\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(NewInvoice));","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js"],"names":["React","Component","PropTypes","withRouter","connect","setInvoiceInitState","InvoiceDoc","NewInvoiceSubmit","alertUnsavedChanges","getInputValueByLabel","date_YYYY_MM","date_DD_MM_YYYY","NewInvoice","constructor","props","state","invoice","handleChanges","bind","clearInitState","updateInitStateToReduxStateOnSubmit","componentDidMount","invoiceInitState","searchArr","window","location","search","split","invoiceID","slice","_id","company_abbr","company","details","length","map","el","toUpperCase","join","invoices_num","invoices","String","saved_as","Date","TWO_WEEKS","due_date","getTime","issue_date","bg_color","localStorage","invoice_bg","text_color","invoice_txt","profile","JSON","parse","stringify","tasks","discount","tax","fees","setState","componentWillUnmount","authenticated","render","propTypes","bool","object","mapStateToProps","session","companies","find","c","currentCompany","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { alertUnsavedChanges } from '../../../components/form/utils/handleUnsavedChanges';\nimport { getInputValueByLabel } from '../../../components/form/utils/customFormQueries';\nimport {\n    date_YYYY_MM,\n    date_DD_MM_YYYY,\n} from '../../../components/calendar/dates';\n\nclass NewInvoice extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            invoice: null,\n        };\n        this.handleChanges = this.handleChanges.bind(this);\n        this.clearInitState = this.clearInitState.bind(this);\n        this.updateInitStateToReduxStateOnSubmit = this.updateInitStateToReduxStateOnSubmit.bind(\n            this\n        );\n    }\n    handleChanges() {\n        //BECAUSE TASKS CAN BE AMENDED UPDATED IN FORM HENCE NEED TO CHECK INIT STATE AGAINST COMPANY.TASKS NOT INVOICE.TASKS!!!\n        // alertUnsavedChanges(\n        //     this.state.invoice, //initial state\n        //     this.props.invoice, //redux updated state\n        //     `/dashboard/companies/${this.props.company._id}?tab=invoices`,\n        //     // this.props.setUpdates,\n        //     this.props.history\n        // );\n    }\n    updateInitStateToReduxStateOnSubmit() {\n        // this.props.setUpdates(this.props.company.details);\n    }\n    clearInitState() {\n        //on submit clear app updates\n        // this.props.setUpdates(null);\n    }\n    componentDidMount() {\n        let invoiceInitState;\n        const searchArr = window.location.search.split('&');\n        if (searchArr[1]) {\n            //updating an existing invoice\n            const invoiceID = searchArr[1].slice(8);\n            //invoiceInitState from the invoices arr\n            invoiceInitState = {\n                _id: invoiceID,\n            };\n        } else {\n            //create invoice name\n            let company_abbr = getInputValueByLabel(\n                this.props.company.details,\n                'Name'\n            ).split(' ');\n            if (company_abbr.length > 1) {\n                company_abbr = company_abbr\n                    .map((el) => el[0].toUpperCase())\n                    .join('');\n            } else {\n                company_abbr = company_abbr[0].slice(0, 3).toUpperCase();\n            }\n            let invoices_num = '1';\n            if (this.props.company.invoices)\n                invoices_num = String(this.props.company.invoices.length + 1);\n            while (invoices_num.length < 5) {\n                invoices_num = '0' + invoices_num;\n            }\n            let saved_as = company_abbr + '-';\n            saved_as += date_YYYY_MM(new Date()) + '-';\n            saved_as += invoices_num;\n            //generate due date in 14 days\n            const TWO_WEEKS = 1.21e9;\n            let due_date = date_DD_MM_YYYY(new Date().getTime() + TWO_WEEKS);\n            //a new invoice\n            invoiceInitState = {\n                saved_as,\n                issue_date: date_DD_MM_YYYY(new Date()),\n                due_date,\n                bg_color: localStorage.invoice_bg || 'blue',\n                text_color: localStorage.invoice_txt || 'white',\n                profile: JSON.parse(JSON.stringify(this.props.profile.details)),\n                company: JSON.parse(JSON.stringify(this.props.company.details)),\n                tasks: JSON.parse(JSON.stringify(this.props.company.tasks)),\n                discount: 0,\n                tax: 0,\n                fees: 0,\n            };\n        }\n        //set init state for comparison on component unmounting\n        this.setState({\n            invoice: JSON.parse(JSON.stringify(invoiceInitState)),\n        });\n        //set redux state\n        this.props.setInvoiceInitState(invoiceInitState);\n\n        // window.addEventListener('beforeunload', this.props.clearInitState);\n    }\n    componentWillUnmount() {\n        //auth err and logout won't trigger fun\n        if (this.props.authenticated) this.handleChanges();\n        // window.removeEventListener('beforeunload', this.props.clearInitState);\n    }\n    render() {\n        return (\n            <section className='company-invoice'>\n                <h2 className='sr-only'>Create a new invoice.</h2>\n                {this.state.invoice && <InvoiceDoc />}\n                {this.state.invoice && <NewInvoiceSubmit />}\n            </section>\n        );\n    }\n}\n\nNewInvoice.propTypes = {\n    authenticated: PropTypes.bool,\n    profile: PropTypes.object,\n    company: PropTypes.object,\n    invoice: PropTypes.object,\n};\n\nconst mapStateToProps = (state) => ({\n    authenticated: state.session.authenticated,\n    profile: state.profile,\n    company: state.companies.find(\n        (c) => c._id === state.session.currentCompany\n    ),\n    invoice: state.invoice,\n});\n\nconst mapDispatchToProps = {\n    setInvoiceInitState,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(NewInvoice));\n"]},"metadata":{},"sourceType":"module"}