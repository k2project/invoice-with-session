{"ast":null,"code":"export const dateUX = date => {\n  const options = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  };\n  return date.toLocaleDateString(undefined, options);\n};\n\nconst isToday = d => {\n  d = new Date(d);\n  const today = new Date();\n  return d.getDate() == today.getDate() && d.getMonth() == today.getMonth() && d.getFullYear() == today.getFullYear();\n};\n\nconst getTime = d => {\n  d = new Date(d);\n  return d.getHours() + ':' + d.getMinutes();\n};\n\nconst msPassedToday = () => {\n  const t = new Date();\n  return t.getMilliseconds() + t.getSeconds() * 1000 + t.getMinutes() * 6e4 + t.getHours() * 3.6e6;\n};\n\nconst wasYesterday = date => {\n  const msInADay = 8.64e7;\n  const msToday = msPassedToday();\n  const tody = new Date();\n  if (date.getTime > today.getTime - msToday - msInADay && date.getTime < today.getTime - msToday) return true;\n  return false;\n};\n\nexport const getDateAndTimeUX = date => {\n  console.log(wasYesterday('2020-04-21T06:52:54.209+00:00'));\n  console.log(msPassedToday(new Date()));\n  const t = getTime(date);\n  if (isToday(date)) return 'today at ' + t;\n  return dateUX(date) + 'at ' + t;\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/utils/dates.js"],"names":["dateUX","date","options","weekday","year","month","day","toLocaleDateString","undefined","isToday","d","Date","today","getDate","getMonth","getFullYear","getTime","getHours","getMinutes","msPassedToday","t","getMilliseconds","getSeconds","wasYesterday","msInADay","msToday","tody","getDateAndTimeUX","console","log"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAIC,IAAD,IAAU;AAC5B,QAAMC,OAAO,GAAG;AACZC,IAAAA,OAAO,EAAE,MADG;AAEZC,IAAAA,IAAI,EAAE,SAFM;AAGZC,IAAAA,KAAK,EAAE,MAHK;AAIZC,IAAAA,GAAG,EAAE;AAJO,GAAhB;AAMA,SAAOL,IAAI,CAACM,kBAAL,CAAwBC,SAAxB,EAAmCN,OAAnC,CAAP;AACH,CARM;;AASP,MAAMO,OAAO,GAAIC,CAAD,IAAO;AACnBA,EAAAA,CAAC,GAAG,IAAIC,IAAJ,CAASD,CAAT,CAAJ;AACA,QAAME,KAAK,GAAG,IAAID,IAAJ,EAAd;AACA,SACID,CAAC,CAACG,OAAF,MAAeD,KAAK,CAACC,OAAN,EAAf,IACAH,CAAC,CAACI,QAAF,MAAgBF,KAAK,CAACE,QAAN,EADhB,IAEAJ,CAAC,CAACK,WAAF,MAAmBH,KAAK,CAACG,WAAN,EAHvB;AAKH,CARD;;AASA,MAAMC,OAAO,GAAIN,CAAD,IAAO;AACnBA,EAAAA,CAAC,GAAG,IAAIC,IAAJ,CAASD,CAAT,CAAJ;AACA,SAAOA,CAAC,CAACO,QAAF,KAAe,GAAf,GAAqBP,CAAC,CAACQ,UAAF,EAA5B;AACH,CAHD;;AAIA,MAAMC,aAAa,GAAG,MAAM;AACxB,QAAMC,CAAC,GAAG,IAAIT,IAAJ,EAAV;AACA,SACIS,CAAC,CAACC,eAAF,KACAD,CAAC,CAACE,UAAF,KAAiB,IADjB,GAEAF,CAAC,CAACF,UAAF,KAAiB,GAFjB,GAGAE,CAAC,CAACH,QAAF,KAAe,KAJnB;AAMH,CARD;;AASA,MAAMM,YAAY,GAAItB,IAAD,IAAU;AAC3B,QAAMuB,QAAQ,GAAG,MAAjB;AACA,QAAMC,OAAO,GAAGN,aAAa,EAA7B;AACA,QAAMO,IAAI,GAAG,IAAIf,IAAJ,EAAb;AACA,MACIV,IAAI,CAACe,OAAL,GAAeJ,KAAK,CAACI,OAAN,GAAgBS,OAAhB,GAA0BD,QAAzC,IACAvB,IAAI,CAACe,OAAL,GAAeJ,KAAK,CAACI,OAAN,GAAgBS,OAFnC,EAII,OAAO,IAAP;AACJ,SAAO,KAAP;AACH,CAVD;;AAWA,OAAO,MAAME,gBAAgB,GAAI1B,IAAD,IAAU;AACtC2B,EAAAA,OAAO,CAACC,GAAR,CAAYN,YAAY,CAAC,+BAAD,CAAxB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYV,aAAa,CAAC,IAAIR,IAAJ,EAAD,CAAzB;AACA,QAAMS,CAAC,GAAGJ,OAAO,CAACf,IAAD,CAAjB;AACA,MAAIQ,OAAO,CAACR,IAAD,CAAX,EAAmB,OAAO,cAAcmB,CAArB;AACnB,SAAOpB,MAAM,CAACC,IAAD,CAAN,GAAe,KAAf,GAAuBmB,CAA9B;AACH,CANM","sourcesContent":["export const dateUX = (date) => {\n    const options = {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n    };\n    return date.toLocaleDateString(undefined, options);\n};\nconst isToday = (d) => {\n    d = new Date(d);\n    const today = new Date();\n    return (\n        d.getDate() == today.getDate() &&\n        d.getMonth() == today.getMonth() &&\n        d.getFullYear() == today.getFullYear()\n    );\n};\nconst getTime = (d) => {\n    d = new Date(d);\n    return d.getHours() + ':' + d.getMinutes();\n};\nconst msPassedToday = () => {\n    const t = new Date();\n    return (\n        t.getMilliseconds() +\n        t.getSeconds() * 1000 +\n        t.getMinutes() * 6e4 +\n        t.getHours() * 3.6e6\n    );\n};\nconst wasYesterday = (date) => {\n    const msInADay = 8.64e7;\n    const msToday = msPassedToday();\n    const tody = new Date();\n    if (\n        date.getTime > today.getTime - msToday - msInADay &&\n        date.getTime < today.getTime - msToday\n    )\n        return true;\n    return false;\n};\nexport const getDateAndTimeUX = (date) => {\n    console.log(wasYesterday('2020-04-21T06:52:54.209+00:00'));\n    console.log(msPassedToday(new Date()));\n    const t = getTime(date);\n    if (isToday(date)) return 'today at ' + t;\n    return dateUX(date) + 'at ' + t;\n};\n"]},"metadata":{},"sourceType":"module"}