{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst MouseEvent = require(\"../generated/MouseEvent\");\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst {\n  isLabelable,\n  isDisabled\n} = require(\"../helpers/form-controls\");\n\nfunction sendClickToAssociatedNode(node) {\n  node.dispatchEvent(MouseEvent.createImpl([\"click\", {\n    bubbles: true,\n    cancelable: true,\n    view: node.ownerDocument ? node.ownerDocument.defaultView : null,\n    screenX: 0,\n    screenY: 0,\n    clientX: 0,\n    clientY: 0,\n    button: 0,\n    detail: 1,\n    relatedTarget: null\n  }]));\n}\n\nclass HTMLLabelElementImpl extends HTMLElementImpl {\n  get control() {\n    if (this.hasAttribute(\"for\")) {\n      const forValue = this.getAttribute(\"for\");\n\n      if (forValue === \"\") {\n        return null;\n      }\n\n      const root = this.getRootNode();\n\n      for (const descendant of domSymbolTree.treeIterator(root)) {\n        if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE && descendant.getAttribute(\"id\") === forValue) {\n          return isLabelable(descendant) ? descendant : null;\n        }\n      }\n\n      return null;\n    }\n\n    for (const descendant of domSymbolTree.treeIterator(this)) {\n      if (isLabelable(descendant)) {\n        return descendant;\n      }\n    }\n\n    return null;\n  }\n\n  get form() {\n    const node = this.control;\n\n    if (node) {\n      return node.form;\n    }\n\n    return null;\n  }\n\n  _activationBehavior() {\n    const node = this.control;\n\n    if (node && !isDisabled(node)) {\n      sendClickToAssociatedNode(node);\n    }\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLLabelElementImpl\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLLabelElement-impl.js"],"names":["HTMLElementImpl","require","implementation","MouseEvent","domSymbolTree","NODE_TYPE","isLabelable","isDisabled","sendClickToAssociatedNode","node","dispatchEvent","createImpl","bubbles","cancelable","view","ownerDocument","defaultView","screenX","screenY","clientX","clientY","button","detail","relatedTarget","HTMLLabelElementImpl","control","hasAttribute","forValue","getAttribute","root","getRootNode","descendant","treeIterator","nodeType","ELEMENT_NODE","form","_activationBehavior","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAAP,CAA8BC,cAAtD;;AACA,MAAMC,UAAU,GAAGF,OAAO,CAAC,yBAAD,CAA1B;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAoBH,OAAO,CAAC,+BAAD,CAAjC;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAM;AAAEK,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAA8BN,OAAO,CAAC,0BAAD,CAA3C;;AAEA,SAASO,yBAAT,CAAmCC,IAAnC,EAAyC;AACvCA,EAAAA,IAAI,CAACC,aAAL,CAAmBP,UAAU,CAACQ,UAAX,CAAsB,CACvC,OADuC,EAEvC;AACEC,IAAAA,OAAO,EAAE,IADX;AAEEC,IAAAA,UAAU,EAAE,IAFd;AAGEC,IAAAA,IAAI,EAAEL,IAAI,CAACM,aAAL,GAAqBN,IAAI,CAACM,aAAL,CAAmBC,WAAxC,GAAsD,IAH9D;AAIEC,IAAAA,OAAO,EAAE,CAJX;AAKEC,IAAAA,OAAO,EAAE,CALX;AAMEC,IAAAA,OAAO,EAAE,CANX;AAOEC,IAAAA,OAAO,EAAE,CAPX;AAQEC,IAAAA,MAAM,EAAE,CARV;AASEC,IAAAA,MAAM,EAAE,CATV;AAUEC,IAAAA,aAAa,EAAE;AAVjB,GAFuC,CAAtB,CAAnB;AAeD;;AAED,MAAMC,oBAAN,SAAmCxB,eAAnC,CAAmD;AACjD,MAAIyB,OAAJ,GAAc;AACZ,QAAI,KAAKC,YAAL,CAAkB,KAAlB,CAAJ,EAA8B;AAC5B,YAAMC,QAAQ,GAAG,KAAKC,YAAL,CAAkB,KAAlB,CAAjB;;AACA,UAAID,QAAQ,KAAK,EAAjB,EAAqB;AACnB,eAAO,IAAP;AACD;;AACD,YAAME,IAAI,GAAG,KAAKC,WAAL,EAAb;;AACA,WAAK,MAAMC,UAAX,IAAyB3B,aAAa,CAAC4B,YAAd,CAA2BH,IAA3B,CAAzB,EAA2D;AACzD,YAAIE,UAAU,CAACE,QAAX,KAAwB5B,SAAS,CAAC6B,YAAlC,IACFH,UAAU,CAACH,YAAX,CAAwB,IAAxB,MAAkCD,QADpC,EAC8C;AAC5C,iBAAOrB,WAAW,CAACyB,UAAD,CAAX,GAA0BA,UAA1B,GAAuC,IAA9C;AACD;AACF;;AACD,aAAO,IAAP;AACD;;AACD,SAAK,MAAMA,UAAX,IAAyB3B,aAAa,CAAC4B,YAAd,CAA2B,IAA3B,CAAzB,EAA2D;AACzD,UAAI1B,WAAW,CAACyB,UAAD,CAAf,EAA6B;AAC3B,eAAOA,UAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AAED,MAAII,IAAJ,GAAW;AACT,UAAM1B,IAAI,GAAG,KAAKgB,OAAlB;;AACA,QAAIhB,IAAJ,EAAU;AACR,aAAOA,IAAI,CAAC0B,IAAZ;AACD;;AACD,WAAO,IAAP;AACD;;AAEDC,EAAAA,mBAAmB,GAAG;AACpB,UAAM3B,IAAI,GAAG,KAAKgB,OAAlB;;AACA,QAAIhB,IAAI,IAAI,CAACF,UAAU,CAACE,IAAD,CAAvB,EAA+B;AAC7BD,MAAAA,yBAAyB,CAACC,IAAD,CAAzB;AACD;AACF;;AArCgD;;AAwCnD4B,MAAM,CAACC,OAAP,GAAiB;AACfpC,EAAAA,cAAc,EAAEsB;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst MouseEvent = require(\"../generated/MouseEvent\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst NODE_TYPE = require(\"../node-type\");\nconst { isLabelable, isDisabled } = require(\"../helpers/form-controls\");\n\nfunction sendClickToAssociatedNode(node) {\n  node.dispatchEvent(MouseEvent.createImpl([\n    \"click\",\n    {\n      bubbles: true,\n      cancelable: true,\n      view: node.ownerDocument ? node.ownerDocument.defaultView : null,\n      screenX: 0,\n      screenY: 0,\n      clientX: 0,\n      clientY: 0,\n      button: 0,\n      detail: 1,\n      relatedTarget: null\n    }\n  ]));\n}\n\nclass HTMLLabelElementImpl extends HTMLElementImpl {\n  get control() {\n    if (this.hasAttribute(\"for\")) {\n      const forValue = this.getAttribute(\"for\");\n      if (forValue === \"\") {\n        return null;\n      }\n      const root = this.getRootNode();\n      for (const descendant of domSymbolTree.treeIterator(root)) {\n        if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE &&\n          descendant.getAttribute(\"id\") === forValue) {\n          return isLabelable(descendant) ? descendant : null;\n        }\n      }\n      return null;\n    }\n    for (const descendant of domSymbolTree.treeIterator(this)) {\n      if (isLabelable(descendant)) {\n        return descendant;\n      }\n    }\n    return null;\n  }\n\n  get form() {\n    const node = this.control;\n    if (node) {\n      return node.form;\n    }\n    return null;\n  }\n\n  _activationBehavior() {\n    const node = this.control;\n    if (node && !isDisabled(node)) {\n      sendClickToAssociatedNode(node);\n    }\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLLabelElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}