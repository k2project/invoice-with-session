{"ast":null,"code":"\"use strict\";\n\nconst path = require(\"path\");\n\nconst fs = require(\"pn/fs\");\n\nconst vm = require(\"vm\");\n\nconst toughCookie = require(\"tough-cookie\");\n\nconst request = require(\"request-promise-native\");\n\nconst sniffHTMLEncoding = require(\"html-encoding-sniffer\");\n\nconst whatwgURL = require(\"whatwg-url\");\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst {\n  URL\n} = require(\"whatwg-url\");\n\nconst MIMEType = require(\"whatwg-mimetype\");\n\nconst idlUtils = require(\"./jsdom/living/generated/utils.js\");\n\nconst VirtualConsole = require(\"./jsdom/virtual-console.js\");\n\nconst Window = require(\"./jsdom/browser/Window.js\");\n\nconst {\n  domToHtml\n} = require(\"./jsdom/browser/domtohtml.js\");\n\nconst {\n  applyDocumentFeatures\n} = require(\"./jsdom/browser/documentfeatures.js\");\n\nconst {\n  wrapCookieJarForRequest\n} = require(\"./jsdom/browser/resource-loader.js\");\n\nconst {\n  version: packageVersion\n} = require(\"../package.json\");\n\nconst DEFAULT_USER_AGENT = `Mozilla/5.0 (${process.platform}) AppleWebKit/537.36 (KHTML, like Gecko) ` + `jsdom/${packageVersion}`; // This symbol allows us to smuggle a non-public option through to the JSDOM constructor, for use by JSDOM.fromURL.\n\nconst transportLayerEncodingLabelHiddenOption = Symbol(\"transportLayerEncodingLabel\");\n\nclass CookieJar extends toughCookie.CookieJar {\n  constructor(store, options) {\n    // jsdom cookie jars must be loose by default\n    super(store, Object.assign({\n      looseMode: true\n    }, options));\n  }\n\n}\n\nconst window = Symbol(\"window\");\nlet sharedFragmentDocument = null;\n\nclass JSDOM {\n  constructor(input, options = {}) {\n    const {\n      html,\n      encoding\n    } = normalizeHTML(input, options[transportLayerEncodingLabelHiddenOption]);\n    options = transformOptions(options, encoding);\n    this[window] = new Window(options.windowOptions); // TODO NEWAPI: the whole \"features\" infrastructure is horrible and should be re-built. When we switch to newapi\n    // wholesale, or perhaps before, we should re-do it. For now, just adapt the new, nice, public API into the old,\n    // ugly, internal API.\n\n    const features = {\n      FetchExternalResources: [],\n      SkipExternalResources: false\n    };\n\n    if (options.resources === \"usable\") {\n      features.FetchExternalResources = [\"link\", \"img\", \"frame\", \"iframe\"];\n\n      if (options.windowOptions.runScripts === \"dangerously\") {\n        features.FetchExternalResources.push(\"script\");\n      } // Note that \"img\" will be ignored by the code in HTMLImageElement-impl.js if canvas is not installed.\n      // TODO NEWAPI: clean that up and centralize the logic here.\n\n    }\n\n    const documentImpl = idlUtils.implForWrapper(this[window]._document);\n    applyDocumentFeatures(documentImpl, features);\n    options.beforeParse(this[window]._globalProxy); // TODO NEWAPI: this is still pretty hacky. It's also different than jsdom.jsdom. Does it work? Can it be better?\n\n    documentImpl._htmlToDom.appendToDocument(html, documentImpl);\n\n    documentImpl.close();\n  }\n\n  get window() {\n    // It's important to grab the global proxy, instead of just the result of `new Window(...)`, since otherwise things\n    // like `window.eval` don't exist.\n    return this[window]._globalProxy;\n  }\n\n  get virtualConsole() {\n    return this[window]._virtualConsole;\n  }\n\n  get cookieJar() {\n    // TODO NEWAPI move _cookieJar to window probably\n    return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n  }\n\n  serialize() {\n    return domToHtml([idlUtils.implForWrapper(this[window]._document)]);\n  }\n\n  nodeLocation(node) {\n    if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.locationInfo) {\n      throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n    }\n\n    return idlUtils.implForWrapper(node).__location;\n  }\n\n  runVMScript(script) {\n    if (!vm.isContext(this[window])) {\n      throw new TypeError(\"This jsdom was not configured to allow script running. \" + \"Use the runScripts option during creation.\");\n    }\n\n    return script.runInContext(this[window]);\n  }\n\n  reconfigure(settings) {\n    if (\"windowTop\" in settings) {\n      this[window]._top = settings.windowTop;\n    }\n\n    if (\"url\" in settings) {\n      const document = idlUtils.implForWrapper(this[window]._document);\n      const url = whatwgURL.parseURL(settings.url);\n\n      if (url === null) {\n        throw new TypeError(`Could not parse \"${settings.url}\" as a URL`);\n      }\n\n      document._URL = url;\n      document.origin = whatwgURL.serializeURLOrigin(document._URL);\n    }\n  }\n\n  static fragment(string) {\n    if (!sharedFragmentDocument) {\n      sharedFragmentDocument = new JSDOM().window.document;\n    }\n\n    const template = sharedFragmentDocument.createElement(\"template\");\n    template.innerHTML = string;\n    return template.content;\n  }\n\n  static fromURL(url, options = {}) {\n    return Promise.resolve().then(() => {\n      const parsedURL = new URL(url);\n      url = parsedURL.href;\n      options = normalizeFromURLOptions(options);\n      const requestOptions = {\n        resolveWithFullResponse: true,\n        encoding: null,\n        // i.e., give me the raw Buffer\n        gzip: true,\n        headers: {\n          \"User-Agent\": options.userAgent,\n          Referer: options.referrer,\n          Accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n          \"Accept-Language\": \"en\"\n        },\n        jar: wrapCookieJarForRequest(options.cookieJar)\n      };\n      return request(url, requestOptions).then(res => {\n        let transportLayerEncodingLabel;\n\n        if (\"content-type\" in res.headers) {\n          const mimeType = new MIMEType(res.headers[\"content-type\"]);\n          transportLayerEncodingLabel = mimeType.parameters.get(\"charset\");\n        }\n\n        options = Object.assign(options, {\n          url: res.request.href + parsedURL.hash,\n          contentType: res.headers[\"content-type\"],\n          referrer: res.request.getHeader(\"referer\"),\n          [transportLayerEncodingLabelHiddenOption]: transportLayerEncodingLabel\n        });\n        return new JSDOM(res.body, options);\n      });\n    });\n  }\n\n  static fromFile(filename, options = {}) {\n    return Promise.resolve().then(() => {\n      options = normalizeFromFileOptions(filename, options);\n      return fs.readFile(filename).then(buffer => {\n        return new JSDOM(buffer, options);\n      });\n    });\n  }\n\n}\n\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  } // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n\n\n  const normalized = Object.assign({}, options);\n\n  if (options.userAgent === undefined) {\n    normalized.userAgent = DEFAULT_USER_AGENT;\n  }\n\n  if (options.referrer !== undefined) {\n    normalized.referrer = new URL(options.referrer).href;\n  }\n\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n\n  return normalized; // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  const normalized = Object.assign({}, options);\n\n  if (normalized.contentType === undefined) {\n    const extname = path.extname(filename);\n\n    if (extname === \".xhtml\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n\n  return normalized;\n}\n\nfunction transformOptions(options, encoding) {\n  const transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      userAgent: DEFAULT_USER_AGENT,\n      parseOptions: {\n        locationInfo: false\n      },\n      runScripts: undefined,\n      encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n      // Defaults filled in later\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n    // Defaults\n    resources: undefined,\n\n    beforeParse() {}\n\n  };\n\n  if (options.contentType !== undefined) {\n    const mimeType = new MIMEType(options.contentType);\n\n    if (!mimeType.isHTML() && !mimeType.isXML()) {\n      throw new RangeError(`The given content type of \"${options.contentType}\" was not a HTML or XML content type`);\n    }\n\n    transformed.windowOptions.contentType = mimeType.essence;\n    transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n  }\n\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = new URL(options.url).href;\n  }\n\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = new URL(options.referrer).href;\n  }\n\n  if (options.userAgent !== undefined) {\n    transformed.windowOptions.userAgent = String(options.userAgent);\n  }\n\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n\n    transformed.windowOptions.parseOptions = {\n      locationInfo: true\n    };\n  }\n\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ? new CookieJar() : options.cookieJar;\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ? new VirtualConsole().sendTo(console) : options.virtualConsole;\n\n  if (options.resources !== undefined) {\n    transformed.resources = String(options.resources);\n\n    if (transformed.resources !== \"usable\") {\n      throw new RangeError(`resources must be undefined or \"usable\"`);\n    }\n  }\n\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n\n    if (transformed.windowOptions.runScripts !== \"dangerously\" && transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(`runScripts must be undefined, \"dangerously\", or \"outside-only\"`);\n    }\n  }\n\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  } // concurrentNodeIterators??\n\n\n  return transformed;\n}\n\nfunction normalizeHTML(html = \"\", transportLayerEncodingLabel) {\n  let encoding = \"UTF-8\";\n\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, {\n      defaultEncoding: \"windows-1252\",\n      transportLayerEncodingLabel\n    });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n\n  return {\n    html,\n    encoding\n  };\n}\n\nexports.JSDOM = JSDOM;\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\nexports.toughCookie = toughCookie;","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/api.js"],"names":["path","require","fs","vm","toughCookie","request","sniffHTMLEncoding","whatwgURL","whatwgEncoding","URL","MIMEType","idlUtils","VirtualConsole","Window","domToHtml","applyDocumentFeatures","wrapCookieJarForRequest","version","packageVersion","DEFAULT_USER_AGENT","process","platform","transportLayerEncodingLabelHiddenOption","Symbol","CookieJar","constructor","store","options","Object","assign","looseMode","window","sharedFragmentDocument","JSDOM","input","html","encoding","normalizeHTML","transformOptions","windowOptions","features","FetchExternalResources","SkipExternalResources","resources","runScripts","push","documentImpl","implForWrapper","_document","beforeParse","_globalProxy","_htmlToDom","appendToDocument","close","virtualConsole","_virtualConsole","cookieJar","_cookieJar","serialize","nodeLocation","node","_parseOptions","locationInfo","Error","__location","runVMScript","script","isContext","TypeError","runInContext","reconfigure","settings","_top","windowTop","document","url","parseURL","_URL","origin","serializeURLOrigin","fragment","string","template","createElement","innerHTML","content","fromURL","Promise","resolve","then","parsedURL","href","normalizeFromURLOptions","requestOptions","resolveWithFullResponse","gzip","headers","userAgent","Referer","referrer","Accept","jar","res","transportLayerEncodingLabel","mimeType","parameters","get","hash","contentType","getHeader","body","fromFile","filename","normalizeFromFileOptions","readFile","buffer","undefined","normalized","extname","transformed","parsingMode","parseOptions","pretendToBeVisual","storageQuota","isHTML","isXML","RangeError","essence","String","includeNodeLocations","sendTo","console","Boolean","Number","ArrayBuffer","isView","Buffer","from","byteOffset","byteLength","isBuffer","defaultEncoding","decode","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst path = require(\"path\");\nconst fs = require(\"pn/fs\");\nconst vm = require(\"vm\");\nconst toughCookie = require(\"tough-cookie\");\nconst request = require(\"request-promise-native\");\nconst sniffHTMLEncoding = require(\"html-encoding-sniffer\");\nconst whatwgURL = require(\"whatwg-url\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst { URL } = require(\"whatwg-url\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst idlUtils = require(\"./jsdom/living/generated/utils.js\");\nconst VirtualConsole = require(\"./jsdom/virtual-console.js\");\nconst Window = require(\"./jsdom/browser/Window.js\");\nconst { domToHtml } = require(\"./jsdom/browser/domtohtml.js\");\nconst { applyDocumentFeatures } = require(\"./jsdom/browser/documentfeatures.js\");\nconst { wrapCookieJarForRequest } = require(\"./jsdom/browser/resource-loader.js\");\nconst { version: packageVersion } = require(\"../package.json\");\n\nconst DEFAULT_USER_AGENT = `Mozilla/5.0 (${process.platform}) AppleWebKit/537.36 (KHTML, like Gecko) ` +\n                           `jsdom/${packageVersion}`;\n\n// This symbol allows us to smuggle a non-public option through to the JSDOM constructor, for use by JSDOM.fromURL.\nconst transportLayerEncodingLabelHiddenOption = Symbol(\"transportLayerEncodingLabel\");\n\nclass CookieJar extends toughCookie.CookieJar {\n  constructor(store, options) {\n    // jsdom cookie jars must be loose by default\n    super(store, Object.assign({ looseMode: true }, options));\n  }\n}\n\nconst window = Symbol(\"window\");\nlet sharedFragmentDocument = null;\n\nclass JSDOM {\n  constructor(input, options = {}) {\n    const { html, encoding } = normalizeHTML(input, options[transportLayerEncodingLabelHiddenOption]);\n    options = transformOptions(options, encoding);\n\n    this[window] = new Window(options.windowOptions);\n\n    // TODO NEWAPI: the whole \"features\" infrastructure is horrible and should be re-built. When we switch to newapi\n    // wholesale, or perhaps before, we should re-do it. For now, just adapt the new, nice, public API into the old,\n    // ugly, internal API.\n    const features = {\n      FetchExternalResources: [],\n      SkipExternalResources: false\n    };\n\n    if (options.resources === \"usable\") {\n      features.FetchExternalResources = [\"link\", \"img\", \"frame\", \"iframe\"];\n      if (options.windowOptions.runScripts === \"dangerously\") {\n        features.FetchExternalResources.push(\"script\");\n      }\n\n      // Note that \"img\" will be ignored by the code in HTMLImageElement-impl.js if canvas is not installed.\n      // TODO NEWAPI: clean that up and centralize the logic here.\n    }\n\n    const documentImpl = idlUtils.implForWrapper(this[window]._document);\n    applyDocumentFeatures(documentImpl, features);\n\n    options.beforeParse(this[window]._globalProxy);\n\n    // TODO NEWAPI: this is still pretty hacky. It's also different than jsdom.jsdom. Does it work? Can it be better?\n    documentImpl._htmlToDom.appendToDocument(html, documentImpl);\n    documentImpl.close();\n  }\n\n  get window() {\n    // It's important to grab the global proxy, instead of just the result of `new Window(...)`, since otherwise things\n    // like `window.eval` don't exist.\n    return this[window]._globalProxy;\n  }\n\n  get virtualConsole() {\n    return this[window]._virtualConsole;\n  }\n\n  get cookieJar() {\n    // TODO NEWAPI move _cookieJar to window probably\n    return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n  }\n\n  serialize() {\n    return domToHtml([idlUtils.implForWrapper(this[window]._document)]);\n  }\n\n  nodeLocation(node) {\n    if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.locationInfo) {\n      throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n    }\n\n    return idlUtils.implForWrapper(node).__location;\n  }\n\n  runVMScript(script) {\n    if (!vm.isContext(this[window])) {\n      throw new TypeError(\"This jsdom was not configured to allow script running. \" +\n        \"Use the runScripts option during creation.\");\n    }\n\n    return script.runInContext(this[window]);\n  }\n\n  reconfigure(settings) {\n    if (\"windowTop\" in settings) {\n      this[window]._top = settings.windowTop;\n    }\n\n    if (\"url\" in settings) {\n      const document = idlUtils.implForWrapper(this[window]._document);\n\n      const url = whatwgURL.parseURL(settings.url);\n      if (url === null) {\n        throw new TypeError(`Could not parse \"${settings.url}\" as a URL`);\n      }\n\n      document._URL = url;\n      document.origin = whatwgURL.serializeURLOrigin(document._URL);\n    }\n  }\n\n  static fragment(string) {\n    if (!sharedFragmentDocument) {\n      sharedFragmentDocument = (new JSDOM()).window.document;\n    }\n\n    const template = sharedFragmentDocument.createElement(\"template\");\n    template.innerHTML = string;\n    return template.content;\n  }\n\n  static fromURL(url, options = {}) {\n    return Promise.resolve().then(() => {\n      const parsedURL = new URL(url);\n      url = parsedURL.href;\n      options = normalizeFromURLOptions(options);\n\n      const requestOptions = {\n        resolveWithFullResponse: true,\n        encoding: null, // i.e., give me the raw Buffer\n        gzip: true,\n        headers: {\n          \"User-Agent\": options.userAgent,\n          Referer: options.referrer,\n          Accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n          \"Accept-Language\": \"en\"\n        },\n        jar: wrapCookieJarForRequest(options.cookieJar)\n      };\n\n      return request(url, requestOptions).then(res => {\n        let transportLayerEncodingLabel;\n        if (\"content-type\" in res.headers) {\n          const mimeType = new MIMEType(res.headers[\"content-type\"]);\n          transportLayerEncodingLabel = mimeType.parameters.get(\"charset\");\n        }\n\n        options = Object.assign(options, {\n          url: res.request.href + parsedURL.hash,\n          contentType: res.headers[\"content-type\"],\n          referrer: res.request.getHeader(\"referer\"),\n          [transportLayerEncodingLabelHiddenOption]: transportLayerEncodingLabel\n        });\n\n        return new JSDOM(res.body, options);\n      });\n    });\n  }\n\n  static fromFile(filename, options = {}) {\n    return Promise.resolve().then(() => {\n      options = normalizeFromFileOptions(filename, options);\n\n      return fs.readFile(filename).then(buffer => {\n        return new JSDOM(buffer, options);\n      });\n    });\n  }\n}\n\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  }\n\n  // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n  const normalized = Object.assign({}, options);\n  if (options.userAgent === undefined) {\n    normalized.userAgent = DEFAULT_USER_AGENT;\n  }\n\n  if (options.referrer !== undefined) {\n    normalized.referrer = (new URL(options.referrer)).href;\n  }\n\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n\n  return normalized;\n\n  // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  const normalized = Object.assign({}, options);\n\n  if (normalized.contentType === undefined) {\n    const extname = path.extname(filename);\n    if (extname === \".xhtml\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n\n  return normalized;\n}\n\nfunction transformOptions(options, encoding) {\n  const transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      userAgent: DEFAULT_USER_AGENT,\n      parseOptions: { locationInfo: false },\n      runScripts: undefined,\n      encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n\n      // Defaults filled in later\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n\n    // Defaults\n    resources: undefined,\n    beforeParse() { }\n  };\n\n  if (options.contentType !== undefined) {\n    const mimeType = new MIMEType(options.contentType);\n\n    if (!mimeType.isHTML() && !mimeType.isXML()) {\n      throw new RangeError(`The given content type of \"${options.contentType}\" was not a HTML or XML content type`);\n    }\n\n    transformed.windowOptions.contentType = mimeType.essence;\n    transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n  }\n\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = (new URL(options.url)).href;\n  }\n\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = (new URL(options.referrer)).href;\n  }\n\n  if (options.userAgent !== undefined) {\n    transformed.windowOptions.userAgent = String(options.userAgent);\n  }\n\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n\n    transformed.windowOptions.parseOptions = { locationInfo: true };\n  }\n\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ?\n                                       new CookieJar() :\n                                       options.cookieJar;\n\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ?\n                                            (new VirtualConsole()).sendTo(console) :\n                                            options.virtualConsole;\n\n  if (options.resources !== undefined) {\n    transformed.resources = String(options.resources);\n    if (transformed.resources !== \"usable\") {\n      throw new RangeError(`resources must be undefined or \"usable\"`);\n    }\n  }\n\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n    if (transformed.windowOptions.runScripts !== \"dangerously\" &&\n        transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(`runScripts must be undefined, \"dangerously\", or \"outside-only\"`);\n    }\n  }\n\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  }\n\n  // concurrentNodeIterators??\n\n  return transformed;\n}\n\nfunction normalizeHTML(html = \"\", transportLayerEncodingLabel) {\n  let encoding = \"UTF-8\";\n\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, { defaultEncoding: \"windows-1252\", transportLayerEncodingLabel });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n\n  return { html, encoding };\n}\n\nexports.JSDOM = JSDOM;\n\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\n\nexports.toughCookie = toughCookie;\n"]},"metadata":{},"sourceType":"script"}