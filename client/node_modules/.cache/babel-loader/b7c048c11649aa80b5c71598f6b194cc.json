{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/form/AddCustomFields.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport FormInput from './FormInput';\nimport FormErrorsDisplay from './FormErrorsDisplay';\nexport default function AddCustomFields({\n  addCustomToFieldsFormState,\n  maxPosition\n}) {\n  const [formData, setFormData] = useState({\n    customFieldLabel: '',\n    customFieldValue: '',\n    customFieldPosition: null,\n    errors: []\n  });\n\n  const handleAdd = async () => {\n    const {\n      customFieldLabel,\n      customFieldValue,\n      customFieldPosition\n    } = formData;\n\n    if (!customFieldLabel.trim()) {\n      alert('no label');\n      return;\n    }\n\n    if (!customFieldValue.trim()) {\n      alert('no value');\n      return;\n    }\n\n    const createDOMPurify = require('dompurify');\n\n    const {\n      JSDOM\n    } = require('jsdom');\n\n    const window = new JSDOM('').window;\n    const DOMPurify = createDOMPurify(window); //create customised field\n\n    const customField = {\n      _id: uuidv4(),\n      label: DOMPurify.sanitize(customFieldLabel),\n      value: customFieldValue.trim(),\n      position: customFieldPosition || ++maxPosition,\n      addToInvoice: true,\n      custom: true,\n      inputType: 'text'\n    };\n    await addCustomToFieldsFormState(customField); //reset state\n\n    setFormData({\n      customFieldLabel: '',\n      customFieldValue: '',\n      customFieldPosition: null,\n      errors: []\n    }); //set last option as default\n\n    document.getElementById('customFieldPosition').lastElementChild.setAttribute('selected', true);\n  };\n\n  const getSelectedPosition = () => {\n    const el = document.getElementById('customFieldPosition');\n    setFormData({ ...formData,\n      customFieldPosition: el.options[el.selectedIndex].value\n    });\n  };\n\n  useEffect(() => document.getElementById('customFieldPosition').lastElementChild.setAttribute('selected', true));\n  return /*#__PURE__*/React.createElement(\"fieldset\", {\n    className: \"add-custom-fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, \"Add custom fields to the form.\")), /*#__PURE__*/React.createElement(FormInput, {\n    form: {\n      formData,\n      setFormData\n    },\n    name: \"customFieldLabel\",\n    size: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, \"Description*\"), /*#__PURE__*/React.createElement(FormInput, {\n    form: {\n      formData,\n      setFormData\n    },\n    name: \"customFieldValue\",\n    size: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, \"Value*\"), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"customFieldPosition\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, \"Choose a position:\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"customFieldPosition\",\n    onChange: getSelectedPosition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, [...Array(++maxPosition).keys()].map(key => /*#__PURE__*/React.createElement(\"option\", {\n    value: key,\n    key: 'position-of-custom-field-' + key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, key + 1))), formData.errors.length > 0 && /*#__PURE__*/React.createElement(FormErrorsDisplay, {\n    errors: formData.errors,\n    label: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn--grey\",\n    onMouseDown: e => e.preventDefault(),\n    onClick: handleAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, \"Add Item\"));\n}","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/form/AddCustomFields.js"],"names":["React","useState","useEffect","Fragment","v4","uuidv4","FormInput","FormErrorsDisplay","AddCustomFields","addCustomToFieldsFormState","maxPosition","formData","setFormData","customFieldLabel","customFieldValue","customFieldPosition","errors","handleAdd","trim","alert","createDOMPurify","require","JSDOM","window","DOMPurify","customField","_id","label","sanitize","value","position","addToInvoice","custom","inputType","document","getElementById","lastElementChild","setAttribute","getSelectedPosition","el","options","selectedIndex","Array","keys","map","key","length","e","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport FormInput from './FormInput';\nimport FormErrorsDisplay from './FormErrorsDisplay';\n\nexport default function AddCustomFields({\n    addCustomToFieldsFormState,\n    maxPosition,\n}) {\n    const [formData, setFormData] = useState({\n        customFieldLabel: '',\n        customFieldValue: '',\n        customFieldPosition: null,\n        errors: [],\n    });\n    const handleAdd = async () => {\n        const {\n            customFieldLabel,\n            customFieldValue,\n            customFieldPosition,\n        } = formData;\n        if (!customFieldLabel.trim()) {\n            alert('no label');\n            return;\n        }\n        if (!customFieldValue.trim()) {\n            alert('no value');\n            return;\n        }\n\n        const createDOMPurify = require('dompurify');\n        const { JSDOM } = require('jsdom');\n        const window = new JSDOM('').window;\n        const DOMPurify = createDOMPurify(window);\n        //create customised field\n        const customField = {\n            _id: uuidv4(),\n            label: DOMPurify.sanitize(customFieldLabel),\n            value: customFieldValue.trim(),\n            position: customFieldPosition || ++maxPosition,\n            addToInvoice: true,\n            custom: true,\n            inputType: 'text',\n        };\n        await addCustomToFieldsFormState(customField);\n        //reset state\n        setFormData({\n            customFieldLabel: '',\n            customFieldValue: '',\n            customFieldPosition: null,\n            errors: [],\n        });\n        //set last option as default\n        document\n            .getElementById('customFieldPosition')\n            .lastElementChild.setAttribute('selected', true);\n    };\n    const getSelectedPosition = () => {\n        const el = document.getElementById('customFieldPosition');\n        setFormData({\n            ...formData,\n            customFieldPosition: el.options[el.selectedIndex].value,\n        });\n    };\n    useEffect(() =>\n        document\n            .getElementById('customFieldPosition')\n            .lastElementChild.setAttribute('selected', true)\n    );\n    return (\n        <fieldset className='add-custom-fields'>\n            <legend>\n                <b>Add custom fields to the form.</b>\n            </legend>\n            <FormInput\n                form={{ formData, setFormData }}\n                name='customFieldLabel'\n                size='auto'\n            >\n                Description*\n            </FormInput>\n            <FormInput\n                form={{ formData, setFormData }}\n                name='customFieldValue'\n                size='auto'\n            >\n                Value*\n            </FormInput>\n\n            <label htmlFor='customFieldPosition'>Choose a position:</label>\n            <select id='customFieldPosition' onChange={getSelectedPosition}>\n                {[...Array(++maxPosition).keys()].map((key) => (\n                    <option value={key} key={'position-of-custom-field-' + key}>\n                        {key + 1}\n                    </option>\n                ))}\n            </select>\n\n            {formData.errors.length > 0 && (\n                <FormErrorsDisplay errors={formData.errors} label='' />\n            )}\n            <button\n                className='btn btn--grey'\n                onMouseDown={(e) => e.preventDefault()}\n                onClick={handleAdd}\n            >\n                Add Item\n            </button>\n        </fieldset>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}