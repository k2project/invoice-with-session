{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport { updateCompanyArr } from '../../../redux/actions/companies';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { alertUnsavedChanges } from '../../../components/form/utils/handleUnsavedChanges';\nimport { setNewInvoice } from './invoiceFun';\n\nclass NewInvoice extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      invoice: null\n    };\n    this.handleChanges = this.handleChanges.bind(this);\n    this.resestInvoiceState = this.resestInvoiceState.bind(this);\n    this.setAllTasksToExcluded = this.setAllTasksToExcluded.bind(this);\n  }\n\n  resestInvoiceState() {\n    //on leave clear invoice permanent state\n    //no changes or submit or page leave\n    this.props.setInvoiceInitState({\n      bg_color: localStorage.invoice_bg || 'blue',\n      text_color: localStorage.invoice_txt || 'white',\n      profile: [],\n      company: [],\n      tasks: [],\n      discount: 0,\n      tax: 0,\n      fees: 0,\n      notes: 'Thank you for your business.',\n      currency: ''\n    });\n  }\n\n  async setAllTasksToExcluded(tasksArr) {\n    let tasks = tasksArr.map(task => {\n      task.addToInvoice = false;\n      return task;\n    });\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      await axios.post(`/api/companies/task/${this.props.company._id}`, JSON.stringify(tasks), config);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  componentDidMount() {\n    //set current tabs for handling unsaved changes redirection\n    this.setState({ ...this.state,\n      tabs: window.location.search\n    });\n    let invoiceToLoad = null;\n    const searchArr = window.location.search.split('&');\n\n    if (searchArr[1]) {\n      this.setState({ ...this.state,\n        updates: true\n      }); //?updating=...\n      //downlaoding an existing invoice\n      //?download=...\n\n      const invoice_ID = searchArr[1].slice(9);\n      invoiceToLoad = this.props.company.invoices.find(invoice => invoice._id === invoice_ID);\n    }\n\n    if (!invoiceToLoad) {\n      this.setState({ ...this.state,\n        updates: false\n      }); //invoice num #\n\n      let invoiceInitState = setNewInvoice(this.props.profile, this.props.company); //set init state for comparison on component unmounting\n\n      this.setState({\n        invoice: JSON.parse(JSON.stringify(invoiceInitState))\n      }); //set redux state\n\n      this.props.setInvoiceInitState(invoiceInitState);\n    }\n\n    if (invoiceToLoad) {\n      //updating an existing invoice\n      //set component init state\n      this.setState({\n        invoice: JSON.parse(JSON.stringify(invoiceToLoad))\n      }); //set redux state\n\n      this.props.setInvoiceInitState(invoiceToLoad);\n\n      if (invoiceToLoad) {\n        //add invoice tasks to existing tasks of the current company\n        const tasksArrIncInvoiceTasks = [...invoiceToLoad.tasks, ...this.props.company.tasks];\n        this.props.updateCompanyArr('tasks', tasksArrIncInvoiceTasks, this.props.company._id);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    //auth err and logout won't trigger fun\n    if (this.props.session.authenticated && !this.state.submited) this.handleChanges();\n  }\n\n  handleChanges() {\n    //TASKS CAN BE AMENDED/UPDATED IN THE FORM WITH EFECT ON COMPANY STATE BUT NOT INVOICE STATE\n    //update invoice state of added tasks before comparing changes on leave\n    this.props.invoice.tasks = this.props.company.tasks.filter(t => t.addToInvoice); // this.props.invoice.tasks = [...this.state.invoice.tasks];\n\n    console.log('@@@@', this.props.invoice.tasks);\n    let nonInvoiceTasks = this.props.company.tasks; //on updates\n\n    if (this.state.updates) {\n      const initStateTasksIds = this.state.invoice.tasks.map(t => t._id);\n      nonInvoiceTasks = this.props.company.tasks.filter(task => !initStateTasksIds.includes(task._id));\n      this.props.updateCompanyArr('tasks', nonInvoiceTasks, this.props.company._id);\n    } // // remove tasks added on update\n    // const initStateTasksIds = this.state.invoice.tasks.map((t) => t._id);\n    // const nonInvoiceTasks = this.props.company.tasks.filter(\n    //     (task) => !initStateTasksIds.includes(task._id)\n    // );\n    // this.props.updateCompanyArr(\n    //     'tasks',\n    //     nonInvoiceTasks,\n    //     this.props.company._id\n    // );\n\n\n    console.log('state:', this.state.invoice, 'redux', this.props.invoice);\n\n    const stateUpdate = () => {\n      //no changes detected or chnages discharged\n      this.resestInvoiceState();\n      this.setAllTasksToExcluded(nonInvoiceTasks); // //if changes discarched update DB\n      // if (\n      //     JSON.stringify(this.state.invoice) !==\n      //     JSON.stringify(this.props.invoice)\n      // )\n      //     this.setAllTasksToExcluded(nonInvoiceTasks);\n    };\n\n    alertUnsavedChanges(this.state.invoice, this.props.invoice, `/dashboard/companies/${this.props.company._id}${this.state.tabs}`, stateUpdate, this.props.history);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"company-invoice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }\n    }, \"Create a new invoice.\"), /*#__PURE__*/React.createElement(InvoiceDoc, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }), this.state.invoice && /*#__PURE__*/React.createElement(NewInvoiceSubmit, {\n      handleSubmit: () => this.state.submited = true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nNewInvoice.propTypes = {\n  session: PropTypes.object,\n  profile: PropTypes.object,\n  company: PropTypes.object,\n  invoice: PropTypes.object,\n  updateCompanyArr: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  session: state.session,\n  profile: state.profile,\n  company: state.companies.find(c => c._id === state.session.currentCompany),\n  invoice: state.invoice\n});\n\nconst mapDispatchToProps = {\n  setInvoiceInitState,\n  updateCompanyArr\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(NewInvoice));","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js"],"names":["React","Component","PropTypes","axios","withRouter","connect","setInvoiceInitState","updateCompanyArr","InvoiceDoc","NewInvoiceSubmit","alertUnsavedChanges","setNewInvoice","NewInvoice","constructor","props","state","invoice","handleChanges","bind","resestInvoiceState","setAllTasksToExcluded","bg_color","localStorage","invoice_bg","text_color","invoice_txt","profile","company","tasks","discount","tax","fees","notes","currency","tasksArr","map","task","addToInvoice","config","headers","post","_id","JSON","stringify","err","console","log","componentDidMount","setState","tabs","window","location","search","invoiceToLoad","searchArr","split","updates","invoice_ID","slice","invoices","find","invoiceInitState","parse","tasksArrIncInvoiceTasks","componentWillUnmount","session","authenticated","submited","filter","t","nonInvoiceTasks","initStateTasksIds","includes","stateUpdate","history","render","propTypes","object","func","mapStateToProps","companies","c","currentCompany","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport { updateCompanyArr } from '../../../redux/actions/companies';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { alertUnsavedChanges } from '../../../components/form/utils/handleUnsavedChanges';\nimport { setNewInvoice } from './invoiceFun';\n\nclass NewInvoice extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            invoice: null,\n        };\n        this.handleChanges = this.handleChanges.bind(this);\n        this.resestInvoiceState = this.resestInvoiceState.bind(this);\n        this.setAllTasksToExcluded = this.setAllTasksToExcluded.bind(this);\n    }\n\n    resestInvoiceState() {\n        //on leave clear invoice permanent state\n        //no changes or submit or page leave\n        this.props.setInvoiceInitState({\n            bg_color: localStorage.invoice_bg || 'blue',\n            text_color: localStorage.invoice_txt || 'white',\n            profile: [],\n            company: [],\n            tasks: [],\n            discount: 0,\n            tax: 0,\n            fees: 0,\n            notes: 'Thank you for your business.',\n            currency: '',\n        });\n    }\n    async setAllTasksToExcluded(tasksArr) {\n        let tasks = tasksArr.map((task) => {\n            task.addToInvoice = false;\n            return task;\n        });\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            await axios.post(\n                `/api/companies/task/${this.props.company._id}`,\n                JSON.stringify(tasks),\n                config\n            );\n        } catch (err) {\n            console.log(err);\n        }\n    }\n    componentDidMount() {\n        //set current tabs for handling unsaved changes redirection\n        this.setState({ ...this.state, tabs: window.location.search });\n        let invoiceToLoad = null;\n        const searchArr = window.location.search.split('&');\n        if (searchArr[1]) {\n            this.setState({ ...this.state, updates: true });\n            //?updating=...\n            //downlaoding an existing invoice\n            //?download=...\n            const invoice_ID = searchArr[1].slice(9);\n            invoiceToLoad = this.props.company.invoices.find(\n                (invoice) => invoice._id === invoice_ID\n            );\n        }\n        if (!invoiceToLoad) {\n            this.setState({ ...this.state, updates: false });\n            //invoice num #\n            let invoiceInitState = setNewInvoice(\n                this.props.profile,\n                this.props.company\n            );\n            //set init state for comparison on component unmounting\n            this.setState({\n                invoice: JSON.parse(JSON.stringify(invoiceInitState)),\n            });\n\n            //set redux state\n            this.props.setInvoiceInitState(invoiceInitState);\n        }\n\n        if (invoiceToLoad) {\n            //updating an existing invoice\n            //set component init state\n            this.setState({\n                invoice: JSON.parse(JSON.stringify(invoiceToLoad)),\n            });\n            //set redux state\n            this.props.setInvoiceInitState(invoiceToLoad);\n\n            if (invoiceToLoad) {\n                //add invoice tasks to existing tasks of the current company\n                const tasksArrIncInvoiceTasks = [\n                    ...invoiceToLoad.tasks,\n                    ...this.props.company.tasks,\n                ];\n                this.props.updateCompanyArr(\n                    'tasks',\n                    tasksArrIncInvoiceTasks,\n                    this.props.company._id\n                );\n            }\n        }\n    }\n    componentWillUnmount() {\n        //auth err and logout won't trigger fun\n        if (this.props.session.authenticated && !this.state.submited)\n            this.handleChanges();\n    }\n    handleChanges() {\n        //TASKS CAN BE AMENDED/UPDATED IN THE FORM WITH EFECT ON COMPANY STATE BUT NOT INVOICE STATE\n        //update invoice state of added tasks before comparing changes on leave\n        this.props.invoice.tasks = this.props.company.tasks.filter(\n            (t) => t.addToInvoice\n        );\n\n        // this.props.invoice.tasks = [...this.state.invoice.tasks];\n        console.log('@@@@', this.props.invoice.tasks);\n\n        let nonInvoiceTasks = this.props.company.tasks;\n        //on updates\n\n        if (this.state.updates) {\n            const initStateTasksIds = this.state.invoice.tasks.map(\n                (t) => t._id\n            );\n            nonInvoiceTasks = this.props.company.tasks.filter(\n                (task) => !initStateTasksIds.includes(task._id)\n            );\n            this.props.updateCompanyArr(\n                'tasks',\n                nonInvoiceTasks,\n                this.props.company._id\n            );\n        }\n        // // remove tasks added on update\n        // const initStateTasksIds = this.state.invoice.tasks.map((t) => t._id);\n        // const nonInvoiceTasks = this.props.company.tasks.filter(\n        //     (task) => !initStateTasksIds.includes(task._id)\n        // );\n        // this.props.updateCompanyArr(\n        //     'tasks',\n        //     nonInvoiceTasks,\n        //     this.props.company._id\n        // );\n\n        console.log('state:', this.state.invoice, 'redux', this.props.invoice);\n        const stateUpdate = () => {\n            //no changes detected or chnages discharged\n            this.resestInvoiceState();\n            this.setAllTasksToExcluded(nonInvoiceTasks);\n\n            // //if changes discarched update DB\n            // if (\n            //     JSON.stringify(this.state.invoice) !==\n            //     JSON.stringify(this.props.invoice)\n            // )\n            //     this.setAllTasksToExcluded(nonInvoiceTasks);\n        };\n\n        alertUnsavedChanges(\n            this.state.invoice,\n            this.props.invoice,\n            `/dashboard/companies/${this.props.company._id}${this.state.tabs}`,\n            stateUpdate,\n            this.props.history\n        );\n    }\n    render() {\n        return (\n            <section className='company-invoice'>\n                <h2 className='sr-only'>Create a new invoice.</h2>\n                <InvoiceDoc />\n                {this.state.invoice && (\n                    <NewInvoiceSubmit\n                        handleSubmit={() => (this.state.submited = true)}\n                    />\n                )}\n            </section>\n        );\n    }\n}\n\nNewInvoice.propTypes = {\n    session: PropTypes.object,\n    profile: PropTypes.object,\n    company: PropTypes.object,\n    invoice: PropTypes.object,\n    updateCompanyArr: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n    session: state.session,\n    profile: state.profile,\n    company: state.companies.find(\n        (c) => c._id === state.session.currentCompany\n    ),\n    invoice: state.invoice,\n});\n\nconst mapDispatchToProps = {\n    setInvoiceInitState,\n    updateCompanyArr,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(NewInvoice));\n"]},"metadata":{},"sourceType":"module"}