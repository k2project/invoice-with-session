{"ast":null,"code":"\"use strict\";\n\nconst usm = require(\"./url-state-machine\");\n\nconst urlencoded = require(\"./urlencoded\");\n\nconst URLSearchParams = require(\"./URLSearchParams\");\n\nexports.implementation = class URLImpl {\n  constructor(constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n    let parsedBase = null;\n\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n\n      if (parsedBase === null) {\n        throw new TypeError(`Invalid base URL: ${base}`);\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, {\n      baseURL: parsedBase\n    });\n\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${url}`);\n    }\n\n    const query = parsedURL.query !== null ? parsedURL.query : \"\";\n    this._url = parsedURL; // We cannot invoke the \"new URLSearchParams object\" algorithm without going through the constructor, which strips\n    // question mark by default. Therefore the doNotStripQMark hack is used.\n\n    this._query = URLSearchParams.createImpl([query], {\n      doNotStripQMark: true\n    });\n    this._query._url = this;\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${v}`);\n    }\n\n    this._url = parsedURL;\n\n    this._query._list.splice(0);\n\n    const {\n      query\n    } = parsedURL;\n\n    if (query !== null) {\n      this._query._list = urlencoded.parseUrlencoded(query);\n    }\n  }\n\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n\n  set protocol(v) {\n    usm.basicURLParse(v + \":\", {\n      url: this._url,\n      stateOverride: \"scheme start\"\n    });\n  }\n\n  get username() {\n    return this._url.username;\n  }\n\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setTheUsername(this._url, v);\n  }\n\n  get password() {\n    return this._url.password;\n  }\n\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setThePassword(this._url, v);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n\n    return usm.serializeHost(url.host) + \":\" + usm.serializeInteger(url.port);\n  }\n\n  set host(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"host\"\n    });\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return usm.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"hostname\"\n    });\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return usm.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, {\n        url: this._url,\n        stateOverride: \"port\"\n      });\n    }\n  }\n\n  get pathname() {\n    if (this._url.cannotBeABaseURL) {\n      return this._url.path[0];\n    }\n\n    if (this._url.path.length === 0) {\n      return \"\";\n    }\n\n    return \"/\" + this._url.path.join(\"/\");\n  }\n\n  set pathname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    this._url.path = [];\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"path start\"\n    });\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + this._url.query;\n  }\n\n  set search(v) {\n    const url = this._url;\n\n    if (v === \"\") {\n      url.query = null;\n      this._query._list = [];\n      return;\n    }\n\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, {\n      url,\n      stateOverride: \"query\"\n    });\n    this._query._list = urlencoded.parseUrlencoded(input);\n  }\n\n  get searchParams() {\n    return this._query;\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + this._url.fragment;\n  }\n\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, {\n      url: this._url,\n      stateOverride: \"fragment\"\n    });\n  }\n\n  toJSON() {\n    return this.href;\n  }\n\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/data-urls/node_modules/whatwg-url/lib/URL-impl.js"],"names":["usm","require","urlencoded","URLSearchParams","exports","implementation","URLImpl","constructor","constructorArgs","url","base","parsedBase","undefined","basicURLParse","TypeError","parsedURL","baseURL","query","_url","_query","createImpl","doNotStripQMark","href","serializeURL","v","_list","splice","parseUrlencoded","origin","serializeURLOrigin","protocol","scheme","stateOverride","username","cannotHaveAUsernamePasswordPort","setTheUsername","password","setThePassword","host","port","serializeHost","serializeInteger","cannotBeABaseURL","hostname","pathname","path","length","join","search","input","substring","searchParams","hash","fragment","toJSON"],"mappings":"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","sourcesContent":["\"use strict\";\nconst usm = require(\"./url-state-machine\");\nconst urlencoded = require(\"./urlencoded\");\nconst URLSearchParams = require(\"./URLSearchParams\");\n\nexports.implementation = class URLImpl {\n  constructor(constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === null) {\n        throw new TypeError(`Invalid base URL: ${base}`);\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${url}`);\n    }\n\n    const query = parsedURL.query !== null ? parsedURL.query : \"\";\n\n    this._url = parsedURL;\n\n    // We cannot invoke the \"new URLSearchParams object\" algorithm without going through the constructor, which strips\n    // question mark by default. Therefore the doNotStripQMark hack is used.\n    this._query = URLSearchParams.createImpl([query], { doNotStripQMark: true });\n    this._query._url = this;\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${v}`);\n    }\n\n    this._url = parsedURL;\n\n    this._query._list.splice(0);\n    const { query } = parsedURL;\n    if (query !== null) {\n      this._query._list = urlencoded.parseUrlencoded(query);\n    }\n  }\n\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n\n  set protocol(v) {\n    usm.basicURLParse(v + \":\", { url: this._url, stateOverride: \"scheme start\" });\n  }\n\n  get username() {\n    return this._url.username;\n  }\n\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setTheUsername(this._url, v);\n  }\n\n  get password() {\n    return this._url.password;\n  }\n\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setThePassword(this._url, v);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n\n    return usm.serializeHost(url.host) + \":\" + usm.serializeInteger(url.port);\n  }\n\n  set host(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"host\" });\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return usm.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"hostname\" });\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return usm.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, { url: this._url, stateOverride: \"port\" });\n    }\n  }\n\n  get pathname() {\n    if (this._url.cannotBeABaseURL) {\n      return this._url.path[0];\n    }\n\n    if (this._url.path.length === 0) {\n      return \"\";\n    }\n\n    return \"/\" + this._url.path.join(\"/\");\n  }\n\n  set pathname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    this._url.path = [];\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"path start\" });\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + this._url.query;\n  }\n\n  set search(v) {\n    const url = this._url;\n\n    if (v === \"\") {\n      url.query = null;\n      this._query._list = [];\n      return;\n    }\n\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, { url, stateOverride: \"query\" });\n    this._query._list = urlencoded.parseUrlencoded(input);\n  }\n\n  get searchParams() {\n    return this._query;\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + this._url.fragment;\n  }\n\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, { url: this._url, stateOverride: \"fragment\" });\n  }\n\n  toJSON() {\n    return this.href;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}