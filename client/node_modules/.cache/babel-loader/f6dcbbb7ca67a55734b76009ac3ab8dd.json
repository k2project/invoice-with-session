{"ast":null,"code":"import axios from 'axios';\nimport { dialogBox } from '../../alerts/alertsFuns';\nexport const alertUnsavedChanges = async (initilState, state, setStateTab, setSessionUpdatesStatus, url, //redirection back to the form\nhistory) => {\n  // if (JSON.stringify(state) !== JSON.stringify(initilState)) {\n  //register app chnages\n  // setSessionUpdatesStatus(true);\n  const msg = `You have some unsaved changes. What would you like to do?`;\n  const cancelBtnText = 'Discharge updates';\n  const confirmBtnText = 'Return to the form!';\n\n  const cancelCb = () => {\n    //discharge all changes and clear app changes status\n    setSessionUpdatesStatus(false);\n    window.location.reload();\n  };\n\n  const confirmCb = () => {\n    // history.goBack();\n    history.push(url);\n    setStateTab('form');\n  };\n\n  dialogBox({\n    msg,\n    cancelBtnText,\n    confirmBtnText,\n    cancelCb,\n    confirmCb\n  }); // }\n};\nexport const saveChangesOnLeave = async (initilState, state, getState, http //api call\n) => {\n  try {\n    if (JSON.stringify(state) !== JSON.stringify(initilState)) {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      await axios.post(http, JSON.stringify(state), config);\n      await getState();\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/form/utils/handleUnsavedChanges.js"],"names":["axios","dialogBox","alertUnsavedChanges","initilState","state","setStateTab","setSessionUpdatesStatus","url","history","msg","cancelBtnText","confirmBtnText","cancelCb","window","location","reload","confirmCb","push","saveChangesOnLeave","getState","http","JSON","stringify","config","headers","post","err","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,OAAO,MAAMC,mBAAmB,GAAG,OAC/BC,WAD+B,EAE/BC,KAF+B,EAG/BC,WAH+B,EAI/BC,uBAJ+B,EAK/BC,GAL+B,EAK1B;AACLC,OAN+B,KAO9B;AACD;AACA;AACA;AACA,QAAMC,GAAG,GAAI,2DAAb;AACA,QAAMC,aAAa,GAAG,mBAAtB;AACA,QAAMC,cAAc,GAAG,qBAAvB;;AACA,QAAMC,QAAQ,GAAG,MAAM;AACnB;AACAN,IAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACAO,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH,GAJD;;AAKA,QAAMC,SAAS,GAAG,MAAM;AACpB;AACAR,IAAAA,OAAO,CAACS,IAAR,CAAaV,GAAb;AACAF,IAAAA,WAAW,CAAC,MAAD,CAAX;AACH,GAJD;;AAKAJ,EAAAA,SAAS,CAAC;AACNQ,IAAAA,GADM;AAENC,IAAAA,aAFM;AAGNC,IAAAA,cAHM;AAINC,IAAAA,QAJM;AAKNI,IAAAA;AALM,GAAD,CAAT,CAjBC,CAwBD;AACH,CAhCM;AAkCP,OAAO,MAAME,kBAAkB,GAAG,OAC9Bf,WAD8B,EAE9BC,KAF8B,EAG9Be,QAH8B,EAI9BC,IAJ8B,CAIzB;AAJyB,KAK7B;AACD,MAAI;AACA,QAAIC,IAAI,CAACC,SAAL,CAAelB,KAAf,MAA0BiB,IAAI,CAACC,SAAL,CAAenB,WAAf,CAA9B,EAA2D;AACvD,YAAMoB,MAAM,GAAG;AACXC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AADE,OAAf;AAKA,YAAMxB,KAAK,CAACyB,IAAN,CAAWL,IAAX,EAAiBC,IAAI,CAACC,SAAL,CAAelB,KAAf,CAAjB,EAAwCmB,MAAxC,CAAN;AACA,YAAMJ,QAAQ,EAAd;AACH;AACJ,GAVD,CAUE,OAAOO,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ,CAnBM","sourcesContent":["import axios from 'axios';\nimport { dialogBox } from '../../alerts/alertsFuns';\n\nexport const alertUnsavedChanges = async (\n    initilState,\n    state,\n    setStateTab,\n    setSessionUpdatesStatus,\n    url, //redirection back to the form\n    history\n) => {\n    // if (JSON.stringify(state) !== JSON.stringify(initilState)) {\n    //register app chnages\n    // setSessionUpdatesStatus(true);\n    const msg = `You have some unsaved changes. What would you like to do?`;\n    const cancelBtnText = 'Discharge updates';\n    const confirmBtnText = 'Return to the form!';\n    const cancelCb = () => {\n        //discharge all changes and clear app changes status\n        setSessionUpdatesStatus(false);\n        window.location.reload();\n    };\n    const confirmCb = () => {\n        // history.goBack();\n        history.push(url);\n        setStateTab('form');\n    };\n    dialogBox({\n        msg,\n        cancelBtnText,\n        confirmBtnText,\n        cancelCb,\n        confirmCb,\n    });\n    // }\n};\n\nexport const saveChangesOnLeave = async (\n    initilState,\n    state,\n    getState,\n    http //api call\n) => {\n    try {\n        if (JSON.stringify(state) !== JSON.stringify(initilState)) {\n            const config = {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            await axios.post(http, JSON.stringify(state), config);\n            await getState();\n        }\n    } catch (err) {\n        console.log(err);\n    }\n};\n"]},"metadata":{},"sourceType":"module"}