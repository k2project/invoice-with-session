{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/CompanyTasks.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getAllCompanies, updateCompanyArr } from '../../redux/actions/companies';\nimport { endSession, setCurrentTask } from '../../redux/actions/session';\nimport TasksDisplayTable from '../../components/form/components/TasksDisplayTable';\nimport { saveChangesOnLeave } from '../../components/form/utils/handleUnsavedChanges';\nimport TaskForm from '../../components/form/forms/TaskForm';\nimport infoIcon from '../../imgs/icons/infoIcon.png';\n\nclass CompanyTasks extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //deep copy of the redux state on component load\n      tasks: JSON.parse(JSON.stringify(this.props.company.tasks)),\n      company: this.props.company._id,\n      update: false\n    };\n    this.handleChanges = this.handleChanges.bind(this);\n    this.updateCompanyTasks = this.updateCompanyTasks.bind(this);\n  }\n\n  handleChanges() {\n    saveChangesOnLeave(this.state.tasks, //initial state\n    this.props.company.tasks, //redux updated state\n    this.props.endSession, `/api/companies/tasks/${this.props.company._id}`);\n  }\n\n  updateCompanyTasks(tasks) {\n    this.props.updateCompanyArr('tasks', tasks, this.props.company._id);\n  }\n\n  componentDidMount() {\n    window.addEventListener('beforeunload', this.handleChanges);\n  }\n\n  componentWillUnmount() {\n    this.props.setCurrentTask(null);\n    window.removeEventListener('beforeunload', this.handleChanges);\n  }\n\n  render() {\n    const tasks = this.props.company.tasks;\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"company-tasks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }, \"Company Tasks.\"), tasks.length === 0 && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"tile tile--info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: infoIcon,\n      alt: \"\",\n      className: \"icon--md\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }\n    }), \"Currently there are no tasks saved. Add a new one now.\"), tasks.length > 0 && /*#__PURE__*/React.createElement(TasksDisplayTable, {\n      tasks: tasks,\n      updateState: this.props.updateCompanyArr,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(TaskForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nCompanyTasks.propTypes = {\n  company: PropTypes.object,\n  updateCompanyArr: PropTypes.func,\n  getAllCompanies: PropTypes.func,\n  endSession: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  company: state.companies.find(c => c._id === state.session.currentCompany)\n});\n\nconst mapDispatchToProps = {\n  getAllCompanies,\n  updateCompanyArr,\n  setCurrentTask,\n  endSession\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(CompanyTasks);","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/CompanyTasks.js"],"names":["React","Component","PropTypes","connect","getAllCompanies","updateCompanyArr","endSession","setCurrentTask","TasksDisplayTable","saveChangesOnLeave","TaskForm","infoIcon","CompanyTasks","constructor","props","state","tasks","JSON","parse","stringify","company","_id","update","handleChanges","bind","updateCompanyTasks","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","render","length","propTypes","object","func","mapStateToProps","companies","find","c","session","currentCompany","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n    getAllCompanies,\n    updateCompanyArr,\n} from '../../redux/actions/companies';\nimport { endSession, setCurrentTask } from '../../redux/actions/session';\nimport TasksDisplayTable from '../../components/form/components/TasksDisplayTable';\nimport { saveChangesOnLeave } from '../../components/form/utils/handleUnsavedChanges';\nimport TaskForm from '../../components/form/forms/TaskForm';\nimport infoIcon from '../../imgs/icons/infoIcon.png';\n\nclass CompanyTasks extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            //deep copy of the redux state on component load\n            tasks: JSON.parse(JSON.stringify(this.props.company.tasks)),\n            company: this.props.company._id,\n            update: false,\n        };\n        this.handleChanges = this.handleChanges.bind(this);\n        this.updateCompanyTasks = this.updateCompanyTasks.bind(this);\n    }\n    handleChanges() {\n        saveChangesOnLeave(\n            this.state.tasks, //initial state\n            this.props.company.tasks, //redux updated state\n            this.props.endSession,\n            `/api/companies/tasks/${this.props.company._id}`\n        );\n    }\n\n    updateCompanyTasks(tasks) {\n        this.props.updateCompanyArr('tasks', tasks, this.props.company._id);\n    }\n\n    componentDidMount() {\n        window.addEventListener('beforeunload', this.handleChanges);\n    }\n    componentWillUnmount() {\n        this.props.setCurrentTask(null);\n        window.removeEventListener('beforeunload', this.handleChanges);\n    }\n    render() {\n        const tasks = this.props.company.tasks;\n        return (\n            <section className='company-tasks'>\n                <h2 className='sr-only'>Company Tasks.</h2>\n                {tasks.length === 0 && (\n                    <span className='tile tile--info'>\n                        <img src={infoIcon} alt='' className='icon--md' />\n                        Currently there are no tasks saved. Add a new one now.\n                    </span>\n                )}\n                {tasks.length > 0 && (\n                    <TasksDisplayTable\n                        tasks={tasks}\n                        updateState={this.props.updateCompanyArr}\n                    />\n                )}\n                <TaskForm />\n            </section>\n        );\n    }\n}\n\nCompanyTasks.propTypes = {\n    company: PropTypes.object,\n    updateCompanyArr: PropTypes.func,\n    getAllCompanies: PropTypes.func,\n    endSession: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n    company: state.companies.find(\n        (c) => c._id === state.session.currentCompany\n    ),\n});\n\nconst mapDispatchToProps = {\n    getAllCompanies,\n    updateCompanyArr,\n    setCurrentTask,\n    endSession,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CompanyTasks);\n"]},"metadata":{},"sourceType":"module"}