{"ast":null,"code":"//Wed: May 8, 2020\nexport const dateUX = date => {\n  const options = {\n    weekday: 'short',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  };\n  date = new Date(date).toLocaleDateString('en-US', options);\n  return date.slice(0, 3) + ':' + date.slice(4);\n}; //format:DD/MM/YYYY\n\nexport const date_DD_MM_YYYY = date => {\n  date = new Date(date);\n  let month = String(date.getMonth() + 1);\n  month = month.length > 1 ? month : '0' + month;\n  let day = String(date.getDate());\n  day = day.length > 1 ? day : '0' + day;\n  let year = date.getFullYear();\n  return day + '/' + month + '/' + year; // return date.slice(0, 11).replace(/-/g, '/');\n}; //format:YYYY-MM\n\nexport const date_YYYY_MM = date => {\n  date = new Date(date);\n  let month = String(date.getMonth() + 1);\n  month = month.length > 1 ? month : '0' + month;\n  return date.getFullYear() + '-' + month;\n};\n\nconst isToday = d => {\n  d = new Date(d);\n  const today = new Date();\n  return d.getDate() === today.getDate() && d.getMonth() === today.getMonth() && d.getFullYear() === today.getFullYear();\n};\n\nconst getTime = d => {\n  d = new Date(d);\n  let hr = d.getHours();\n  let min = d.getMinutes();\n\n  if (min < 10) {\n    min = '0' + min;\n  }\n\n  var ampm = 'am';\n\n  if (hr > 12) {\n    hr -= 12;\n    ampm = 'pm';\n  }\n\n  return hr + ':' + min + ampm;\n};\n\nconst msPassedToday = () => {\n  const t = new Date();\n  return t.getMilliseconds() + t.getSeconds() * 1000 + t.getMinutes() * 6e4 + t.getHours() * 3.6e6;\n};\n\nconst wasYesterday = date => {\n  const msInADay = 8.64e7;\n  const msToday = +msPassedToday();\n  date = new Date(date).getTime();\n  const today = new Date().getTime();\n  return date > today - msToday - msInADay && date < today - msToday;\n};\n\nexport const getDateAndTimeUX = date => {\n  const t = getTime(date);\n  if (isToday(date)) return ' today at ' + t;\n  if (wasYesterday(date)) return ' yesterday at ' + t;\n  return ' on ' + dateUX(date) + ' at ' + t;\n}; // (int) The current year\n\nexport const THIS_YEAR = +new Date().getFullYear(); // (int) The current month starting from 1 - 12\n// 1 => January, 12 => December\n\nexport const THIS_MONTH = +new Date().getMonth() + 1; // Week days names and shortnames\n\nexport const WEEK_DAYS = {\n  Sunday: 'Sun',\n  Monday: 'Mon',\n  Tuesday: 'Tue',\n  Wednesday: 'Wed',\n  Thursday: 'Thu',\n  Friday: 'Fri',\n  Saturday: 'Sat'\n}; // Calendar months names and shortnames\n\nexport const CALENDAR_MONTHS = {\n  January: 'Jan',\n  February: 'Feb',\n  March: 'Mar',\n  April: 'Apr',\n  May: 'May',\n  June: 'Jun',\n  July: 'Jul',\n  August: 'Aug',\n  September: 'Sep',\n  October: 'Oct',\n  November: 'Nov',\n  December: 'Dec'\n}; // Weeks displayed on calendar\n\nexport const CALENDAR_WEEKS = 6; // Pads a string value with leading zeroes(0) until length is reached\n// For example: zeroPad(5, 2) => \"05\"\n\nexport const zeroPad = (value, length) => {\n  return `${value}`.padStart(length, '0');\n}; // (int) Number days in a month for a given year from 28 - 31\n\nexport const getMonthDays = (month = THIS_MONTH, year = THIS_YEAR) => {\n  const months30 = [4, 6, 9, 11];\n  const leapYear = year % 4 === 0;\n  return month === 2 ? leapYear ? 29 : 28 : months30.includes(month) ? 30 : 31;\n}; // (int) First day of the month for a given year from 1 - 7\n// 1 => Sunday, 7 => Saturday\n\nexport const getMonthFirstDay = (month = THIS_MONTH, year = THIS_YEAR) => {\n  return +new Date(`${year}-${zeroPad(month, 2)}-01`).getDay() + 1;\n}; // (bool) Checks if a value is a date - this is just a simple check\n\nexport const isDate = date => {\n  const isDate = Object.prototype.toString.call(date) === '[object Date]';\n  const isValidDate = date && !Number.isNaN(date.valueOf());\n  return isDate && isValidDate;\n}; // (bool) Checks if two date values are of the same month and year\n\nexport const isSameMonth = (date, basedate = new Date()) => {\n  if (!(isDate(date) && isDate(basedate))) return false;\n  const basedateMonth = +basedate.getMonth() + 1;\n  const basedateYear = basedate.getFullYear();\n  const dateMonth = +date.getMonth() + 1;\n  const dateYear = date.getFullYear();\n  return +basedateMonth === +dateMonth && +basedateYear === +dateYear;\n}; // (bool) Checks if two date values are the same day\n\nexport const isSameDay = (date, basedate = new Date()) => {\n  if (!(isDate(date) && isDate(basedate))) return false;\n  const basedateDate = basedate.getDate();\n  const basedateMonth = +basedate.getMonth() + 1;\n  const basedateYear = basedate.getFullYear();\n  const dateDate = date.getDate();\n  const dateMonth = +date.getMonth() + 1;\n  const dateYear = date.getFullYear();\n  return +basedateDate === +dateDate && +basedateMonth === +dateMonth && +basedateYear === +dateYear;\n}; // (string) Formats the given date as YYYY-MM-DD\n// Months and Days are zero padded\n\nexport const getDateISO = (date = new Date()) => {\n  if (!isDate(date)) return null;\n  return [date.getFullYear(), zeroPad(+date.getMonth() + 1, 2), zeroPad(+date.getDate(), 2)].join('-');\n}; // ({month, year}) Gets the month and year before the given month and year\n// For example: getPreviousMonth(1, 2000) => {month: 12, year: 1999}\n// while: getPreviousMonth(12, 2000) => {month: 11, year: 2000}\n\nexport const getPreviousMonth = (month, year) => {\n  const prevMonth = month > 1 ? month - 1 : 12;\n  const prevMonthYear = month > 1 ? year : year - 1;\n  return {\n    month: prevMonth,\n    year: prevMonthYear\n  };\n}; // ({month, year}) Gets the month and year after the given month and year\n// For example: getNextMonth(1, 2000) => {month: 2, year: 2000}\n// while: getNextMonth(12, 2000) => {month: 1, year: 2001}\n\nexport const getNextMonth = (month, year) => {\n  const nextMonth = month < 12 ? month + 1 : 1;\n  const nextMonthYear = month < 12 ? year : year + 1;\n  return {\n    month: nextMonth,\n    year: nextMonthYear\n  };\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/calendar/dates.js"],"names":["dateUX","date","options","weekday","year","month","day","Date","toLocaleDateString","slice","date_DD_MM_YYYY","String","getMonth","length","getDate","getFullYear","date_YYYY_MM","isToday","d","today","getTime","hr","getHours","min","getMinutes","ampm","msPassedToday","t","getMilliseconds","getSeconds","wasYesterday","msInADay","msToday","getDateAndTimeUX","THIS_YEAR","THIS_MONTH","WEEK_DAYS","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","CALENDAR_MONTHS","January","February","March","April","May","June","July","August","September","October","November","December","CALENDAR_WEEKS","zeroPad","value","padStart","getMonthDays","months30","leapYear","includes","getMonthFirstDay","getDay","isDate","Object","prototype","toString","call","isValidDate","Number","isNaN","valueOf","isSameMonth","basedate","basedateMonth","basedateYear","dateMonth","dateYear","isSameDay","basedateDate","dateDate","getDateISO","join","getPreviousMonth","prevMonth","prevMonthYear","getNextMonth","nextMonth","nextMonthYear"],"mappings":"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","sourcesContent":["//Wed: May 8, 2020\nexport const dateUX = (date) => {\n    const options = {\n        weekday: 'short',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n    };\n    date = new Date(date).toLocaleDateString('en-US', options);\n    return date.slice(0, 3) + ':' + date.slice(4);\n};\n//format:DD/MM/YYYY\nexport const date_DD_MM_YYYY = (date) => {\n    date = new Date(date);\n    let month = String(date.getMonth() + 1);\n    month = month.length > 1 ? month : '0' + month;\n    let day = String(date.getDate());\n    day = day.length > 1 ? day : '0' + day;\n    let year = date.getFullYear();\n\n    return day + '/' + month + '/' + year;\n    // return date.slice(0, 11).replace(/-/g, '/');\n};\n//format:YYYY-MM\nexport const date_YYYY_MM = (date) => {\n    date = new Date(date);\n    let month = String(date.getMonth() + 1);\n    month = month.length > 1 ? month : '0' + month;\n    return date.getFullYear() + '-' + month;\n};\nconst isToday = (d) => {\n    d = new Date(d);\n    const today = new Date();\n    return (\n        d.getDate() === today.getDate() &&\n        d.getMonth() === today.getMonth() &&\n        d.getFullYear() === today.getFullYear()\n    );\n};\nconst getTime = (d) => {\n    d = new Date(d);\n    let hr = d.getHours();\n    let min = d.getMinutes();\n    if (min < 10) {\n        min = '0' + min;\n    }\n    var ampm = 'am';\n    if (hr > 12) {\n        hr -= 12;\n        ampm = 'pm';\n    }\n    return hr + ':' + min + ampm;\n};\nconst msPassedToday = () => {\n    const t = new Date();\n    return (\n        t.getMilliseconds() +\n        t.getSeconds() * 1000 +\n        t.getMinutes() * 6e4 +\n        t.getHours() * 3.6e6\n    );\n};\nconst wasYesterday = (date) => {\n    const msInADay = 8.64e7;\n    const msToday = +msPassedToday();\n    date = new Date(date).getTime();\n    const today = new Date().getTime();\n    return date > today - msToday - msInADay && date < today - msToday;\n};\nexport const getDateAndTimeUX = (date) => {\n    const t = getTime(date);\n    if (isToday(date)) return ' today at ' + t;\n    if (wasYesterday(date)) return ' yesterday at ' + t;\n    return ' on ' + dateUX(date) + ' at ' + t;\n};\n// (int) The current year\nexport const THIS_YEAR = +new Date().getFullYear();\n\n// (int) The current month starting from 1 - 12\n// 1 => January, 12 => December\nexport const THIS_MONTH = +new Date().getMonth() + 1;\n\n// Week days names and shortnames\nexport const WEEK_DAYS = {\n    Sunday: 'Sun',\n    Monday: 'Mon',\n    Tuesday: 'Tue',\n    Wednesday: 'Wed',\n    Thursday: 'Thu',\n    Friday: 'Fri',\n    Saturday: 'Sat',\n};\n\n// Calendar months names and shortnames\nexport const CALENDAR_MONTHS = {\n    January: 'Jan',\n    February: 'Feb',\n    March: 'Mar',\n    April: 'Apr',\n    May: 'May',\n    June: 'Jun',\n    July: 'Jul',\n    August: 'Aug',\n    September: 'Sep',\n    October: 'Oct',\n    November: 'Nov',\n    December: 'Dec',\n};\n// Weeks displayed on calendar\nexport const CALENDAR_WEEKS = 6;\n\n// Pads a string value with leading zeroes(0) until length is reached\n// For example: zeroPad(5, 2) => \"05\"\nexport const zeroPad = (value, length) => {\n    return `${value}`.padStart(length, '0');\n};\n\n// (int) Number days in a month for a given year from 28 - 31\nexport const getMonthDays = (month = THIS_MONTH, year = THIS_YEAR) => {\n    const months30 = [4, 6, 9, 11];\n    const leapYear = year % 4 === 0;\n\n    return month === 2\n        ? leapYear\n            ? 29\n            : 28\n        : months30.includes(month)\n        ? 30\n        : 31;\n};\n\n// (int) First day of the month for a given year from 1 - 7\n// 1 => Sunday, 7 => Saturday\nexport const getMonthFirstDay = (month = THIS_MONTH, year = THIS_YEAR) => {\n    return +new Date(`${year}-${zeroPad(month, 2)}-01`).getDay() + 1;\n};\n// (bool) Checks if a value is a date - this is just a simple check\nexport const isDate = (date) => {\n    const isDate = Object.prototype.toString.call(date) === '[object Date]';\n    const isValidDate = date && !Number.isNaN(date.valueOf());\n\n    return isDate && isValidDate;\n};\n\n// (bool) Checks if two date values are of the same month and year\nexport const isSameMonth = (date, basedate = new Date()) => {\n    if (!(isDate(date) && isDate(basedate))) return false;\n\n    const basedateMonth = +basedate.getMonth() + 1;\n    const basedateYear = basedate.getFullYear();\n\n    const dateMonth = +date.getMonth() + 1;\n    const dateYear = date.getFullYear();\n\n    return +basedateMonth === +dateMonth && +basedateYear === +dateYear;\n};\n\n// (bool) Checks if two date values are the same day\nexport const isSameDay = (date, basedate = new Date()) => {\n    if (!(isDate(date) && isDate(basedate))) return false;\n\n    const basedateDate = basedate.getDate();\n    const basedateMonth = +basedate.getMonth() + 1;\n    const basedateYear = basedate.getFullYear();\n\n    const dateDate = date.getDate();\n    const dateMonth = +date.getMonth() + 1;\n    const dateYear = date.getFullYear();\n\n    return (\n        +basedateDate === +dateDate &&\n        +basedateMonth === +dateMonth &&\n        +basedateYear === +dateYear\n    );\n};\n\n// (string) Formats the given date as YYYY-MM-DD\n// Months and Days are zero padded\nexport const getDateISO = (date = new Date()) => {\n    if (!isDate(date)) return null;\n\n    return [\n        date.getFullYear(),\n        zeroPad(+date.getMonth() + 1, 2),\n        zeroPad(+date.getDate(), 2),\n    ].join('-');\n};\n\n// ({month, year}) Gets the month and year before the given month and year\n// For example: getPreviousMonth(1, 2000) => {month: 12, year: 1999}\n// while: getPreviousMonth(12, 2000) => {month: 11, year: 2000}\nexport const getPreviousMonth = (month, year) => {\n    const prevMonth = month > 1 ? month - 1 : 12;\n    const prevMonthYear = month > 1 ? year : year - 1;\n\n    return { month: prevMonth, year: prevMonthYear };\n};\n\n// ({month, year}) Gets the month and year after the given month and year\n// For example: getNextMonth(1, 2000) => {month: 2, year: 2000}\n// while: getNextMonth(12, 2000) => {month: 1, year: 2001}\nexport const getNextMonth = (month, year) => {\n    const nextMonth = month < 12 ? month + 1 : 1;\n    const nextMonthYear = month < 12 ? year : year + 1;\n\n    return { month: nextMonth, year: nextMonthYear };\n};\n"]},"metadata":{},"sourceType":"module"}