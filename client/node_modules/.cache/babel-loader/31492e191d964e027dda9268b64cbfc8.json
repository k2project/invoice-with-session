{"ast":null,"code":"\"use strict\";\n\nconst whatwgEncoding = require(\"whatwg-encoding\"); // https://html.spec.whatwg.org/#encoding-sniffing-algorithm\n\n\nmodule.exports = function sniffHTMLEncoding(buffer, options) {\n  let encoding = whatwgEncoding.getBOMEncoding(buffer); // see https://github.com/whatwg/html/issues/1910\n\n  if (options === undefined) {\n    options = {};\n  }\n\n  if (encoding === null && options.transportLayerEncodingLabel !== undefined) {\n    encoding = whatwgEncoding.labelToName(options.transportLayerEncodingLabel);\n  }\n\n  if (encoding === null) {\n    encoding = prescanMetaCharset(buffer);\n  }\n\n  if (encoding === null && options.defaultEncoding !== undefined) {\n    encoding = options.defaultEncoding;\n  }\n\n  if (encoding === null) {\n    encoding = \"windows-1252\";\n  }\n\n  return encoding;\n}; // https://html.spec.whatwg.org/multipage/syntax.html#prescan-a-byte-stream-to-determine-its-encoding\n\n\nfunction prescanMetaCharset(buffer) {\n  const l = Math.min(buffer.length, 1024);\n\n  for (let i = 0; i < l; i++) {\n    let c = buffer[i];\n\n    if (c === 0x3C) {\n      // \"<\"\n      let c1 = buffer[i + 1];\n      let c2 = buffer[i + 2];\n      const c3 = buffer[i + 3];\n      const c4 = buffer[i + 4];\n      const c5 = buffer[i + 5]; // !-- (comment start)\n\n      if (c1 === 0x21 && c2 === 0x2D && c3 === 0x2D) {\n        i += 4;\n\n        for (; i < l; i++) {\n          c = buffer[i];\n          c1 = buffer[i + 1];\n          c2 = buffer[i + 2]; // --> (comment end)\n\n          if (c === 0x2D && c1 === 0x2D && c2 === 0x3E) {\n            i += 2;\n            break;\n          }\n        }\n      } else if ((c1 === 0x4D || c1 === 0x6D) && (c2 === 0x45 || c2 === 0x65) && (c3 === 0x54 || c3 === 0x74) && (c4 === 0x41 || c4 === 0x61) && (isSpaceCharacter(c5) || c5 === 0x2F)) {\n        // \"meta\" + space or /\n        i += 6;\n        let gotPragma = false;\n        let needPragma = null;\n        let charset = null;\n        let attrRes;\n\n        do {\n          attrRes = getAttribute(buffer, i, l);\n\n          if (attrRes.attr) {\n            if (attrRes.attr.name === \"http-equiv\") {\n              gotPragma = attrRes.attr.value === \"content-type\";\n            } else if (attrRes.attr.name === \"content\" && !charset) {\n              charset = extractCharacterEncodingFromMeta(attrRes.attr.value);\n\n              if (charset !== null) {\n                needPragma = true;\n              }\n            } else if (attrRes.attr.name === \"charset\") {\n              charset = whatwgEncoding.labelToName(attrRes.attr.value);\n              needPragma = false;\n            }\n          }\n\n          i = attrRes.i;\n        } while (attrRes.attr);\n\n        if (needPragma === null) {\n          continue;\n        }\n\n        if (needPragma === true && gotPragma === false) {\n          continue;\n        }\n\n        if (charset === null) {\n          continue;\n        }\n\n        if (charset === \"UTF-16LE\" || charset === \"UTF-16BE\") {\n          charset = \"UTF-8\";\n        }\n\n        if (charset === \"x-user-defined\") {\n          charset = \"windows-1252\";\n        }\n\n        return charset;\n      } else if (c1 >= 0x41 && c1 <= 0x5A || c1 >= 0x61 && c1 <= 0x7A) {\n        // a-z or A-Z\n        for (i += 2; i < l; i++) {\n          c = buffer[i]; // space or >\n\n          if (isSpaceCharacter(c) || c === 0x3E) {\n            break;\n          }\n        }\n\n        let attrRes;\n\n        do {\n          attrRes = getAttribute(buffer, i, l);\n          i = attrRes.i;\n        } while (attrRes.attr);\n      } else if (c1 === 0x21 || c1 === 0x2F || c1 === 0x3F) {\n        // ! or / or ?\n        for (i += 2; i < l; i++) {\n          c = buffer[i]; // >\n\n          if (c === 0x3E) {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return null;\n} // https://html.spec.whatwg.org/multipage/syntax.html#concept-get-attributes-when-sniffing\n\n\nfunction getAttribute(buffer, i, l) {\n  for (; i < l; i++) {\n    let c = buffer[i]; // space or /\n\n    if (isSpaceCharacter(c) || c === 0x2F) {\n      continue;\n    } // \">\"\n\n\n    if (c === 0x3E) {\n      i++;\n      break;\n    }\n\n    let name = \"\";\n    let value = \"\";\n\n    nameLoop: for (; i < l; i++) {\n      c = buffer[i]; // \"=\"\n\n      if (c === 0x3D && name !== \"\") {\n        i++;\n        break;\n      } // space\n\n\n      if (isSpaceCharacter(c)) {\n        for (i++; i < l; i++) {\n          c = buffer[i]; // space\n\n          if (isSpaceCharacter(c)) {\n            continue;\n          } // not \"=\"\n\n\n          if (c !== 0x3D) {\n            return {\n              attr: {\n                name,\n                value\n              },\n              i\n            };\n          }\n\n          i++;\n          break nameLoop;\n        }\n\n        break;\n      } // / or >\n\n\n      if (c === 0x2F || c === 0x3E) {\n        return {\n          attr: {\n            name,\n            value\n          },\n          i\n        };\n      } // A-Z\n\n\n      if (c >= 0x41 && c <= 0x5A) {\n        name += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        name += String.fromCharCode(c);\n      }\n    }\n\n    c = buffer[i]; // space\n\n    if (isSpaceCharacter(c)) {\n      for (i++; i < l; i++) {\n        c = buffer[i]; // space\n\n        if (isSpaceCharacter(c)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n    } // \" or '\n\n\n    if (c === 0x22 || c === 0x27) {\n      const quote = c;\n\n      for (i++; i < l; i++) {\n        c = buffer[i];\n\n        if (c === quote) {\n          i++;\n          return {\n            attr: {\n              name,\n              value\n            },\n            i\n          };\n        } // A-Z\n\n\n        if (c >= 0x41 && c <= 0x5A) {\n          value += String.fromCharCode(c + 0x20); // lowercase\n        } else {\n          value += String.fromCharCode(c);\n        }\n      }\n    } // >\n\n\n    if (c === 0x3E) {\n      return {\n        attr: {\n          name,\n          value\n        },\n        i\n      };\n    } // A-Z\n\n\n    if (c >= 0x41 && c <= 0x5A) {\n      value += String.fromCharCode(c + 0x20); // lowercase\n    } else {\n      value += String.fromCharCode(c);\n    }\n\n    for (i++; i < l; i++) {\n      c = buffer[i]; // space or >\n\n      if (isSpaceCharacter(c) || c === 0x3E) {\n        return {\n          attr: {\n            name,\n            value\n          },\n          i\n        };\n      } // A-Z\n\n\n      if (c >= 0x41 && c <= 0x5A) {\n        value += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        value += String.fromCharCode(c);\n      }\n    }\n  }\n\n  return {\n    i\n  };\n}\n\nfunction extractCharacterEncodingFromMeta(string) {\n  let position = 0;\n\n  while (true) {\n    let subPosition = string.substring(position).search(/charset/i);\n\n    if (subPosition === -1) {\n      return null;\n    }\n\n    subPosition += \"charset\".length;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    if (string[subPosition] !== \"=\") {\n      position = subPosition - 1;\n      continue;\n    }\n\n    ++subPosition;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    position = subPosition;\n    break;\n  }\n\n  if (string[position] === \"\\\"\" || string[position] === \"'\") {\n    const nextIndex = string.indexOf(string[position], position + 1);\n\n    if (nextIndex !== -1) {\n      return whatwgEncoding.labelToName(string.substring(position + 1, nextIndex));\n    } // It is an unmatched quotation mark\n\n\n    return null;\n  }\n\n  if (string.length === position + 1) {\n    return null;\n  }\n\n  let end = string.substring(position + 1).search(/\\x09|\\x0A|\\x0C|\\x0D|\\x20|;/);\n\n  if (end === -1) {\n    end = string.length;\n  }\n\n  return whatwgEncoding.labelToName(string.substring(position, end));\n}\n\nfunction isSpaceCharacter(c) {\n  return c === 0x09 || c === 0x0A || c === 0x0C || c === 0x0D || c === 0x20;\n}","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/html-encoding-sniffer/lib/html-encoding-sniffer.js"],"names":["whatwgEncoding","require","module","exports","sniffHTMLEncoding","buffer","options","encoding","getBOMEncoding","undefined","transportLayerEncodingLabel","labelToName","prescanMetaCharset","defaultEncoding","l","Math","min","length","i","c","c1","c2","c3","c4","c5","isSpaceCharacter","gotPragma","needPragma","charset","attrRes","getAttribute","attr","name","value","extractCharacterEncodingFromMeta","nameLoop","String","fromCharCode","quote","string","position","subPosition","substring","search","charCodeAt","nextIndex","indexOf","end"],"mappings":"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","sourcesContent":["\"use strict\";\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\n// https://html.spec.whatwg.org/#encoding-sniffing-algorithm\nmodule.exports = function sniffHTMLEncoding(buffer, options) {\n  let encoding = whatwgEncoding.getBOMEncoding(buffer); // see https://github.com/whatwg/html/issues/1910\n\n  if (options === undefined) {\n    options = {};\n  }\n\n  if (encoding === null && options.transportLayerEncodingLabel !== undefined) {\n    encoding = whatwgEncoding.labelToName(options.transportLayerEncodingLabel);\n  }\n\n  if (encoding === null) {\n    encoding = prescanMetaCharset(buffer);\n  }\n\n  if (encoding === null && options.defaultEncoding !== undefined) {\n    encoding = options.defaultEncoding;\n  }\n\n  if (encoding === null) {\n    encoding = \"windows-1252\";\n  }\n\n  return encoding;\n};\n\n// https://html.spec.whatwg.org/multipage/syntax.html#prescan-a-byte-stream-to-determine-its-encoding\nfunction prescanMetaCharset(buffer) {\n  const l = Math.min(buffer.length, 1024);\n  for (let i = 0; i < l; i++) {\n    let c = buffer[i];\n    if (c === 0x3C) {\n      // \"<\"\n      let c1 = buffer[i + 1];\n      let c2 = buffer[i + 2];\n      const c3 = buffer[i + 3];\n      const c4 = buffer[i + 4];\n      const c5 = buffer[i + 5];\n      // !-- (comment start)\n      if (c1 === 0x21 && c2 === 0x2D && c3 === 0x2D) {\n        i += 4;\n        for (; i < l; i++) {\n          c = buffer[i];\n          c1 = buffer[i + 1];\n          c2 = buffer[i + 2];\n          // --> (comment end)\n          if (c === 0x2D && c1 === 0x2D && c2 === 0x3E) {\n            i += 2;\n            break;\n          }\n        }\n      } else if ((c1 === 0x4D || c1 === 0x6D) &&\n         (c2 === 0x45 || c2 === 0x65) &&\n         (c3 === 0x54 || c3 === 0x74) &&\n         (c4 === 0x41 || c4 === 0x61) &&\n         (isSpaceCharacter(c5) || c5 === 0x2F)) {\n        // \"meta\" + space or /\n        i += 6;\n        let gotPragma = false;\n        let needPragma = null;\n        let charset = null;\n\n        let attrRes;\n        do {\n          attrRes = getAttribute(buffer, i, l);\n          if (attrRes.attr) {\n            if (attrRes.attr.name === \"http-equiv\") {\n              gotPragma = attrRes.attr.value === \"content-type\";\n            } else if (attrRes.attr.name === \"content\" && !charset) {\n              charset = extractCharacterEncodingFromMeta(attrRes.attr.value);\n              if (charset !== null) {\n                needPragma = true;\n              }\n            } else if (attrRes.attr.name === \"charset\") {\n              charset = whatwgEncoding.labelToName(attrRes.attr.value);\n              needPragma = false;\n            }\n          }\n          i = attrRes.i;\n        } while (attrRes.attr);\n\n        if (needPragma === null) {\n          continue;\n        }\n        if (needPragma === true && gotPragma === false) {\n          continue;\n        }\n        if (charset === null) {\n          continue;\n        }\n\n        if (charset === \"UTF-16LE\" || charset === \"UTF-16BE\") {\n          charset = \"UTF-8\";\n        }\n        if (charset === \"x-user-defined\") {\n          charset = \"windows-1252\";\n        }\n\n        return charset;\n      } else if ((c1 >= 0x41 && c1 <= 0x5A) || (c1 >= 0x61 && c1 <= 0x7A)) {\n        // a-z or A-Z\n        for (i += 2; i < l; i++) {\n          c = buffer[i];\n          // space or >\n          if (isSpaceCharacter(c) || c === 0x3E) {\n            break;\n          }\n        }\n        let attrRes;\n        do {\n          attrRes = getAttribute(buffer, i, l);\n          i = attrRes.i;\n        } while (attrRes.attr);\n      } else if (c1 === 0x21 || c1 === 0x2F || c1 === 0x3F) {\n        // ! or / or ?\n        for (i += 2; i < l; i++) {\n          c = buffer[i];\n          // >\n          if (c === 0x3E) {\n            break;\n          }\n        }\n      }\n    }\n  }\n  return null;\n}\n\n// https://html.spec.whatwg.org/multipage/syntax.html#concept-get-attributes-when-sniffing\nfunction getAttribute(buffer, i, l) {\n  for (; i < l; i++) {\n    let c = buffer[i];\n    // space or /\n    if (isSpaceCharacter(c) || c === 0x2F) {\n      continue;\n    }\n    // \">\"\n    if (c === 0x3E) {\n      i++;\n      break;\n    }\n    let name = \"\";\n    let value = \"\";\n    nameLoop:for (; i < l; i++) {\n      c = buffer[i];\n      // \"=\"\n      if (c === 0x3D && name !== \"\") {\n        i++;\n        break;\n      }\n      // space\n      if (isSpaceCharacter(c)) {\n        for (i++; i < l; i++) {\n          c = buffer[i];\n          // space\n          if (isSpaceCharacter(c)) {\n            continue;\n          }\n          // not \"=\"\n          if (c !== 0x3D) {\n            return { attr: { name, value }, i };\n          }\n\n          i++;\n          break nameLoop;\n        }\n        break;\n      }\n      // / or >\n      if (c === 0x2F || c === 0x3E) {\n        return { attr: { name, value }, i };\n      }\n      // A-Z\n      if (c >= 0x41 && c <= 0x5A) {\n        name += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        name += String.fromCharCode(c);\n      }\n    }\n    c = buffer[i];\n    // space\n    if (isSpaceCharacter(c)) {\n      for (i++; i < l; i++) {\n        c = buffer[i];\n        // space\n        if (isSpaceCharacter(c)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n    }\n    // \" or '\n    if (c === 0x22 || c === 0x27) {\n      const quote = c;\n      for (i++; i < l; i++) {\n        c = buffer[i];\n\n        if (c === quote) {\n          i++;\n          return { attr: { name, value }, i };\n        }\n\n        // A-Z\n        if (c >= 0x41 && c <= 0x5A) {\n          value += String.fromCharCode(c + 0x20); // lowercase\n        } else {\n          value += String.fromCharCode(c);\n        }\n      }\n    }\n\n    // >\n    if (c === 0x3E) {\n      return { attr: { name, value }, i };\n    }\n\n    // A-Z\n    if (c >= 0x41 && c <= 0x5A) {\n      value += String.fromCharCode(c + 0x20); // lowercase\n    } else {\n      value += String.fromCharCode(c);\n    }\n\n    for (i++; i < l; i++) {\n      c = buffer[i];\n\n      // space or >\n      if (isSpaceCharacter(c) || c === 0x3E) {\n        return { attr: { name, value }, i };\n      }\n\n      // A-Z\n      if (c >= 0x41 && c <= 0x5A) {\n        value += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        value += String.fromCharCode(c);\n      }\n    }\n  }\n  return { i };\n}\n\nfunction extractCharacterEncodingFromMeta(string) {\n  let position = 0;\n\n  while (true) {\n    let subPosition = string.substring(position).search(/charset/i);\n\n    if (subPosition === -1) {\n      return null;\n    }\n    subPosition += \"charset\".length;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    if (string[subPosition] !== \"=\") {\n      position = subPosition - 1;\n      continue;\n    }\n\n    ++subPosition;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    position = subPosition;\n    break;\n  }\n\n  if (string[position] === \"\\\"\" || string[position] === \"'\") {\n    const nextIndex = string.indexOf(string[position], position + 1);\n\n    if (nextIndex !== -1) {\n      return whatwgEncoding.labelToName(string.substring(position + 1, nextIndex));\n    }\n\n    // It is an unmatched quotation mark\n    return null;\n  }\n\n  if (string.length === position + 1) {\n    return null;\n  }\n\n  let end = string.substring(position + 1).search(/\\x09|\\x0A|\\x0C|\\x0D|\\x20|;/);\n  if (end === -1) {\n    end = string.length;\n  }\n  return whatwgEncoding.labelToName(string.substring(position, end));\n}\n\nfunction isSpaceCharacter(c) {\n  return c === 0x09 || c === 0x0A || c === 0x0C || c === 0x0D || c === 0x20;\n}\n"]},"metadata":{},"sourceType":"script"}