{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-new-func */\n\nconst acorn = require(\"acorn\");\n\nconst findGlobals = require(\"acorn-globals\");\n\nconst escodegen = require(\"escodegen\"); // We can't use the default browserify vm shim because it doesn't work in a web worker.\n// From ES spec table of contents. Also, don't forget the Annex B additions.\n// If someone feels ambitious maybe make this into an npm package.\n\n\nconst builtInConsts = [\"Infinity\", \"NaN\", \"undefined\"];\nconst otherBuiltIns = [\"isFinite\", \"isNaN\", \"parseFloat\", \"parseInt\", \"decodeURI\", \"decodeURIComponent\", \"encodeURI\", \"encodeURIComponent\", \"Array\", \"ArrayBuffer\", \"Boolean\", \"DataView\", \"Date\", \"Error\", \"EvalError\", \"Float32Array\", \"Float64Array\", \"Function\", \"Int8Array\", \"Int16Array\", \"Int32Array\", \"Map\", \"Number\", \"Object\", \"Proxy\", \"Promise\", \"RangeError\", \"ReferenceError\", \"RegExp\", \"Set\", \"String\", \"Symbol\", \"SyntaxError\", \"TypeError\", \"Uint8Array\", \"Uint8ClampedArray\", \"Uint16Array\", \"Uint32Array\", \"URIError\", \"WeakMap\", \"WeakSet\", \"JSON\", \"Math\", \"Reflect\", \"escape\", \"unescape\"];\n\nexports.createContext = function (sandbox) {\n  Object.defineProperty(sandbox, \"__isVMShimContext\", {\n    value: true,\n    writable: true,\n    configurable: true,\n    enumerable: false\n  });\n\n  for (const builtIn of builtInConsts) {\n    Object.defineProperty(sandbox, builtIn, {\n      value: global[builtIn],\n      writable: false,\n      configurable: false,\n      enumerable: false\n    });\n  }\n\n  for (const builtIn of otherBuiltIns) {\n    Object.defineProperty(sandbox, builtIn, {\n      value: global[builtIn],\n      writable: true,\n      configurable: true,\n      enumerable: false\n    });\n  }\n\n  Object.defineProperty(sandbox, \"eval\", {\n    value(code) {\n      return exports.runInContext(code, sandbox);\n    },\n\n    writable: true,\n    configurable: true,\n    enumerable: false\n  });\n};\n\nexports.isContext = function (sandbox) {\n  return sandbox.__isVMShimContext;\n};\n\nexports.runInContext = function (code, contextifiedSandbox, options) {\n  if (code === \"this\") {\n    // Special case for during window creation.\n    return contextifiedSandbox;\n  }\n\n  if (options === undefined) {\n    options = {};\n  }\n\n  const comments = [];\n  const tokens = [];\n  const ast = acorn.parse(code, {\n    allowReturnOutsideFunction: true,\n    ranges: true,\n    // collect comments in Esprima's format\n    onComment: comments,\n    // collect token ranges\n    onToken: tokens\n  }); // make sure we keep comments\n\n  escodegen.attachComments(ast, comments, tokens);\n  const globals = findGlobals(ast);\n\n  for (let i = 0; i < globals.length; ++i) {\n    if (globals[i].name === \"window\" || globals[i].name === \"this\") {\n      continue;\n    }\n\n    const {\n      nodes\n    } = globals[i];\n\n    for (let j = 0; j < nodes.length; ++j) {\n      const {\n        type,\n        name\n      } = nodes[j];\n      nodes[j].type = \"MemberExpression\";\n      nodes[j].property = {\n        name,\n        type\n      };\n      nodes[j].computed = false;\n      nodes[j].object = {\n        name: \"window\",\n        type: \"Identifier\"\n      };\n    }\n  }\n\n  const lastNode = ast.body[ast.body.length - 1];\n\n  if (lastNode.type === \"ExpressionStatement\") {\n    lastNode.type = \"ReturnStatement\";\n    lastNode.argument = lastNode.expression;\n    delete lastNode.expression;\n  }\n\n  const rewrittenCode = escodegen.generate(ast, {\n    comment: true\n  });\n  const suffix = options.filename !== undefined ? \"\\n//# sourceURL=\" + options.filename : \"\";\n  return Function(\"window\", rewrittenCode + suffix).bind(contextifiedSandbox)(contextifiedSandbox);\n};\n\nexports.Script = class VMShimScript {\n  constructor(code, options) {\n    this._code = code;\n    this._options = options;\n  }\n\n  runInContext(sandbox, options) {\n    return exports.runInContext(this._code, sandbox, Object.assign({}, this._options, options));\n  }\n\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/vm-shim.js"],"names":["acorn","require","findGlobals","escodegen","builtInConsts","otherBuiltIns","exports","createContext","sandbox","Object","defineProperty","value","writable","configurable","enumerable","builtIn","global","code","runInContext","isContext","__isVMShimContext","contextifiedSandbox","options","undefined","comments","tokens","ast","parse","allowReturnOutsideFunction","ranges","onComment","onToken","attachComments","globals","i","length","name","nodes","j","type","property","computed","object","lastNode","body","argument","expression","rewrittenCode","generate","comment","suffix","filename","Function","bind","Script","VMShimScript","constructor","_code","_options","assign"],"mappings":"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","sourcesContent":["\"use strict\";\n/* eslint-disable no-new-func */\nconst acorn = require(\"acorn\");\nconst findGlobals = require(\"acorn-globals\");\nconst escodegen = require(\"escodegen\");\n\n// We can't use the default browserify vm shim because it doesn't work in a web worker.\n\n// From ES spec table of contents. Also, don't forget the Annex B additions.\n// If someone feels ambitious maybe make this into an npm package.\nconst builtInConsts = [\"Infinity\", \"NaN\", \"undefined\"];\nconst otherBuiltIns = [\n  \"isFinite\", \"isNaN\", \"parseFloat\", \"parseInt\", \"decodeURI\", \"decodeURIComponent\",\n  \"encodeURI\", \"encodeURIComponent\", \"Array\", \"ArrayBuffer\", \"Boolean\", \"DataView\", \"Date\", \"Error\", \"EvalError\",\n  \"Float32Array\", \"Float64Array\", \"Function\", \"Int8Array\", \"Int16Array\", \"Int32Array\", \"Map\", \"Number\", \"Object\",\n  \"Proxy\", \"Promise\", \"RangeError\", \"ReferenceError\", \"RegExp\", \"Set\", \"String\", \"Symbol\", \"SyntaxError\", \"TypeError\",\n  \"Uint8Array\", \"Uint8ClampedArray\", \"Uint16Array\", \"Uint32Array\", \"URIError\", \"WeakMap\", \"WeakSet\", \"JSON\", \"Math\",\n  \"Reflect\", \"escape\", \"unescape\"\n];\n\nexports.createContext = function (sandbox) {\n  Object.defineProperty(sandbox, \"__isVMShimContext\", {\n    value: true,\n    writable: true,\n    configurable: true,\n    enumerable: false\n  });\n\n  for (const builtIn of builtInConsts) {\n    Object.defineProperty(sandbox, builtIn, {\n      value: global[builtIn],\n      writable: false,\n      configurable: false,\n      enumerable: false\n    });\n  }\n\n  for (const builtIn of otherBuiltIns) {\n    Object.defineProperty(sandbox, builtIn, {\n      value: global[builtIn],\n      writable: true,\n      configurable: true,\n      enumerable: false\n    });\n  }\n\n  Object.defineProperty(sandbox, \"eval\", {\n    value(code) {\n      return exports.runInContext(code, sandbox);\n    },\n    writable: true,\n    configurable: true,\n    enumerable: false\n  });\n};\n\nexports.isContext = function (sandbox) {\n  return sandbox.__isVMShimContext;\n};\n\nexports.runInContext = function (code, contextifiedSandbox, options) {\n  if (code === \"this\") {\n    // Special case for during window creation.\n    return contextifiedSandbox;\n  }\n\n  if (options === undefined) {\n    options = {};\n  }\n\n  const comments = [];\n  const tokens = [];\n  const ast = acorn.parse(code, {\n    allowReturnOutsideFunction: true,\n    ranges: true,\n    // collect comments in Esprima's format\n    onComment: comments,\n    // collect token ranges\n    onToken: tokens\n  });\n\n  // make sure we keep comments\n  escodegen.attachComments(ast, comments, tokens);\n\n  const globals = findGlobals(ast);\n  for (let i = 0; i < globals.length; ++i) {\n    if (globals[i].name === \"window\" || globals[i].name === \"this\") {\n      continue;\n    }\n\n    const { nodes } = globals[i];\n    for (let j = 0; j < nodes.length; ++j) {\n      const { type, name } = nodes[j];\n      nodes[j].type = \"MemberExpression\";\n      nodes[j].property = { name, type };\n      nodes[j].computed = false;\n      nodes[j].object = {\n        name: \"window\",\n        type: \"Identifier\"\n      };\n    }\n  }\n\n  const lastNode = ast.body[ast.body.length - 1];\n  if (lastNode.type === \"ExpressionStatement\") {\n    lastNode.type = \"ReturnStatement\";\n    lastNode.argument = lastNode.expression;\n    delete lastNode.expression;\n  }\n\n  const rewrittenCode = escodegen.generate(ast, { comment: true });\n  const suffix = options.filename !== undefined ? \"\\n//# sourceURL=\" + options.filename : \"\";\n\n  return Function(\"window\", rewrittenCode + suffix).bind(contextifiedSandbox)(contextifiedSandbox);\n};\n\nexports.Script = class VMShimScript {\n  constructor(code, options) {\n    this._code = code;\n    this._options = options;\n  }\n\n  runInContext(sandbox, options) {\n    return exports.runInContext(this._code, sandbox, Object.assign({}, this._options, options));\n  }\n};\n"]},"metadata":{},"sourceType":"script"}