{"ast":null,"code":"import axios from 'axios';\nimport { dialogBox } from '../../alerts/alertsFuns';\nexport const alertUnsavedChanges = async (initilState, state, setUpdates, history) => {\n  if (JSON.stringify(state) !== JSON.stringify(initilState)) {\n    const targetPathname = history.location.pathname; //submenu link clicked\n\n    const targetTab = history.location.search;\n    const currentPathname = window.location.pathname;\n    console.log('target', targetPathname, targetTab);\n    console.log('current', currentPathname);\n    const unblockRouting = history.block();\n    history.push(currentPathname + '?tab=update');\n    const msg = `You have some unsaved changes. What would you like to do?`;\n    const cancelBtnText = 'Discharge changes';\n    const confirmBtnText = 'Return to the form!';\n\n    const confirmCb = () => {\n      unblockRouting();\n    };\n\n    const cancelCb = async () => {\n      //discharge all changes and clear app changes status\n      // chnages clear on reload\n      if (targetPathname === currentPathname) {\n        //on clicking submenu redirect to the targeted tab\n        window.location.replace(window.location.origin + targetPathname + targetTab);\n      } else {\n        window.location.replace(window.location.origin + targetPathname);\n      }\n    };\n\n    dialogBox({\n      msg,\n      cancelBtnText,\n      confirmBtnText,\n      confirmCb,\n      cancelCb\n    });\n  } else {\n    //no chnages\n    setUpdates(null);\n  }\n};\nexport const saveChangesOnLeave = async (initilState, state, endSession, http //api call\n) => {\n  try {\n    console.log(http);\n\n    if (JSON.stringify(state) !== JSON.stringify(initilState)) {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      await axios.post(http, JSON.stringify(state), config); // await getState();\n    }\n  } catch (err) {\n    if (err.response.data.msg === 'AuthError') {\n      endSession('Your session has expired. Please sign back in.');\n    }\n  }\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/form/utils/handleUnsavedChanges.js"],"names":["axios","dialogBox","alertUnsavedChanges","initilState","state","setUpdates","history","JSON","stringify","targetPathname","location","pathname","targetTab","search","currentPathname","window","console","log","unblockRouting","block","push","msg","cancelBtnText","confirmBtnText","confirmCb","cancelCb","replace","origin","saveChangesOnLeave","endSession","http","config","headers","post","err","response","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,OAAO,MAAMC,mBAAmB,GAAG,OAC/BC,WAD+B,EAE/BC,KAF+B,EAG/BC,UAH+B,EAI/BC,OAJ+B,KAK9B;AACD,MAAIC,IAAI,CAACC,SAAL,CAAeJ,KAAf,MAA0BG,IAAI,CAACC,SAAL,CAAeL,WAAf,CAA9B,EAA2D;AACvD,UAAMM,cAAc,GAAGH,OAAO,CAACI,QAAR,CAAiBC,QAAxC,CADuD,CAEvD;;AACA,UAAMC,SAAS,GAAGN,OAAO,CAACI,QAAR,CAAiBG,MAAnC;AACA,UAAMC,eAAe,GAAGC,MAAM,CAACL,QAAP,CAAgBC,QAAxC;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBR,cAAtB,EAAsCG,SAAtC;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,eAAvB;AACA,UAAMI,cAAc,GAAGZ,OAAO,CAACa,KAAR,EAAvB;AACAb,IAAAA,OAAO,CAACc,IAAR,CAAaN,eAAe,GAAG,aAA/B;AAEA,UAAMO,GAAG,GAAI,2DAAb;AACA,UAAMC,aAAa,GAAG,mBAAtB;AACA,UAAMC,cAAc,GAAG,qBAAvB;;AACA,UAAMC,SAAS,GAAG,MAAM;AACpBN,MAAAA,cAAc;AACjB,KAFD;;AAGA,UAAMO,QAAQ,GAAG,YAAY;AACzB;AACA;AACA,UAAIhB,cAAc,KAAKK,eAAvB,EAAwC;AACpC;AACAC,QAAAA,MAAM,CAACL,QAAP,CAAgBgB,OAAhB,CACIX,MAAM,CAACL,QAAP,CAAgBiB,MAAhB,GAAyBlB,cAAzB,GAA0CG,SAD9C;AAGH,OALD,MAKO;AACHG,QAAAA,MAAM,CAACL,QAAP,CAAgBgB,OAAhB,CACIX,MAAM,CAACL,QAAP,CAAgBiB,MAAhB,GAAyBlB,cAD7B;AAGH;AACJ,KAbD;;AAeAR,IAAAA,SAAS,CAAC;AACNoB,MAAAA,GADM;AAENC,MAAAA,aAFM;AAGNC,MAAAA,cAHM;AAINC,MAAAA,SAJM;AAKNC,MAAAA;AALM,KAAD,CAAT;AAOH,GAtCD,MAsCO;AACH;AACApB,IAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AACJ,CAhDM;AAkDP,OAAO,MAAMuB,kBAAkB,GAAG,OAC9BzB,WAD8B,EAE9BC,KAF8B,EAG9ByB,UAH8B,EAI9BC,IAJ8B,CAIzB;AAJyB,KAK7B;AACD,MAAI;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAYa,IAAZ;;AACA,QAAIvB,IAAI,CAACC,SAAL,CAAeJ,KAAf,MAA0BG,IAAI,CAACC,SAAL,CAAeL,WAAf,CAA9B,EAA2D;AACvD,YAAM4B,MAAM,GAAG;AACXC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AADE,OAAf;AAKA,YAAMhC,KAAK,CAACiC,IAAN,CAAWH,IAAX,EAAiBvB,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAjB,EAAwC2B,MAAxC,CAAN,CANuD,CAOvD;AACH;AACJ,GAXD,CAWE,OAAOG,GAAP,EAAY;AACV,QAAIA,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkBf,GAAlB,KAA0B,WAA9B,EAA2C;AACvCQ,MAAAA,UAAU,CAAC,gDAAD,CAAV;AACH;AACJ;AACJ,CAtBM","sourcesContent":["import axios from 'axios';\nimport { dialogBox } from '../../alerts/alertsFuns';\n\nexport const alertUnsavedChanges = async (\n    initilState,\n    state,\n    setUpdates,\n    history\n) => {\n    if (JSON.stringify(state) !== JSON.stringify(initilState)) {\n        const targetPathname = history.location.pathname;\n        //submenu link clicked\n        const targetTab = history.location.search;\n        const currentPathname = window.location.pathname;\n        console.log('target', targetPathname, targetTab);\n        console.log('current', currentPathname);\n        const unblockRouting = history.block();\n        history.push(currentPathname + '?tab=update');\n\n        const msg = `You have some unsaved changes. What would you like to do?`;\n        const cancelBtnText = 'Discharge changes';\n        const confirmBtnText = 'Return to the form!';\n        const confirmCb = () => {\n            unblockRouting();\n        };\n        const cancelCb = async () => {\n            //discharge all changes and clear app changes status\n            // chnages clear on reload\n            if (targetPathname === currentPathname) {\n                //on clicking submenu redirect to the targeted tab\n                window.location.replace(\n                    window.location.origin + targetPathname + targetTab\n                );\n            } else {\n                window.location.replace(\n                    window.location.origin + targetPathname\n                );\n            }\n        };\n\n        dialogBox({\n            msg,\n            cancelBtnText,\n            confirmBtnText,\n            confirmCb,\n            cancelCb,\n        });\n    } else {\n        //no chnages\n        setUpdates(null);\n    }\n};\n\nexport const saveChangesOnLeave = async (\n    initilState,\n    state,\n    endSession,\n    http //api call\n) => {\n    try {\n        console.log(http);\n        if (JSON.stringify(state) !== JSON.stringify(initilState)) {\n            const config = {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            await axios.post(http, JSON.stringify(state), config);\n            // await getState();\n        }\n    } catch (err) {\n        if (err.response.data.msg === 'AuthError') {\n            endSession('Your session has expired. Please sign back in.');\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}