{"ast":null,"code":"\"use strict\";\n\nconst path = require(\"path\");\n\nconst whatwgURL = require(\"whatwg-url\");\n\nconst {\n  domSymbolTree\n} = require(\"./living/helpers/internal-constants\");\n\nconst SYMBOL_TREE_POSITION = require(\"symbol-tree\").TreePosition;\n\nconst {\n  parseURLToResultingURLRecord\n} = require(\"./living/helpers/document-base-url\");\n\nexports.toFileUrl = function (fileName) {\n  // Beyond just the `path.resolve`, this is mostly for the benefit of Windows,\n  // where we need to convert \"\\\" to \"/\" and add an extra \"/\" prefix before the\n  // drive letter.\n  let pathname = path.resolve(process.cwd(), fileName).replace(/\\\\/g, \"/\");\n\n  if (pathname[0] !== \"/\") {\n    pathname = \"/\" + pathname;\n  } // path might contain spaces, so convert those to %20\n\n\n  return \"file://\" + encodeURI(pathname);\n};\n/**\n * Define a getter on an object\n *\n * This method replaces any existing getter but leaves setters in place.\n *\n * - `object` {Object} the object to define the getter on\n * - `property` {String} the name of the getter\n * - `getterFn` {Function} the getter\n */\n\n\nexports.defineGetter = function defineGetter(object, property, getterFn) {\n  const descriptor = Object.getOwnPropertyDescriptor(object, property) || {\n    configurable: true,\n    enumerable: true\n  };\n  descriptor.get = getterFn;\n  Object.defineProperty(object, property, descriptor);\n};\n/**\n * Define a set of properties on an object, by copying the property descriptors\n * from the original object.\n *\n * - `object` {Object} the target object\n * - `properties` {Object} the source from which to copy property descriptors\n */\n\n\nexports.define = function define(object, properties) {\n  for (const name of Object.getOwnPropertyNames(properties)) {\n    const propDesc = Object.getOwnPropertyDescriptor(properties, name);\n    Object.defineProperty(object, name, propDesc);\n  }\n};\n/**\n * Define a list of constants on a constructor and its .prototype\n *\n * - `Constructor` {Function} the constructor to define the constants on\n * - `propertyMap` {Object}  key/value map of properties to define\n */\n\n\nexports.addConstants = function addConstants(Constructor, propertyMap) {\n  for (const property in propertyMap) {\n    const value = propertyMap[property];\n    addConstant(Constructor, property, value);\n    addConstant(Constructor.prototype, property, value);\n  }\n};\n\nfunction addConstant(object, property, value) {\n  Object.defineProperty(object, property, {\n    configurable: false,\n    enumerable: true,\n    writable: false,\n    value\n  });\n}\n\nexports.mixin = (target, source) => {\n  const keys = Reflect.ownKeys(source);\n\n  for (let i = 0; i < keys.length; ++i) {\n    if (keys[i] in target) {\n      continue;\n    }\n\n    Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));\n  }\n};\n\nlet memoizeQueryTypeCounter = 0;\n/**\n * Returns a version of a method that memoizes specific types of calls on the object\n *\n * - `fn` {Function} the method to be memozied\n */\n\nexports.memoizeQuery = function memoizeQuery(fn) {\n  // Only memoize query functions with arity <= 2\n  if (fn.length > 2) {\n    return fn;\n  }\n\n  const type = memoizeQueryTypeCounter++;\n  return function () {\n    if (!this._memoizedQueries) {\n      return fn.apply(this, arguments);\n    }\n\n    if (!this._memoizedQueries[type]) {\n      this._memoizedQueries[type] = Object.create(null);\n    }\n\n    let key;\n\n    if (arguments.length === 1 && typeof arguments[0] === \"string\") {\n      key = arguments[0];\n    } else if (arguments.length === 2 && typeof arguments[0] === \"string\" && typeof arguments[1] === \"string\") {\n      key = arguments[0] + \"::\" + arguments[1];\n    } else {\n      return fn.apply(this, arguments);\n    }\n\n    if (!(key in this._memoizedQueries[type])) {\n      this._memoizedQueries[type][key] = fn.apply(this, arguments);\n    }\n\n    return this._memoizedQueries[type][key];\n  };\n};\n\nexports.reflectURLAttribute = (elementImpl, contentAttributeName) => {\n  const attributeValue = elementImpl.getAttribute(contentAttributeName);\n\n  if (attributeValue === null || attributeValue === \"\") {\n    return \"\";\n  }\n\n  const urlRecord = parseURLToResultingURLRecord(attributeValue, elementImpl._ownerDocument);\n\n  if (urlRecord === null) {\n    return attributeValue;\n  }\n\n  return whatwgURL.serializeURL(urlRecord);\n};\n\nfunction isValidAbsoluteURL(str) {\n  return whatwgURL.parseURL(str) !== null;\n}\n\nexports.isValidTargetOrigin = function (str) {\n  return str === \"*\" || str === \"/\" || isValidAbsoluteURL(str);\n};\n\nexports.simultaneousIterators = function* (first, second) {\n  for (;;) {\n    const firstResult = first.next();\n    const secondResult = second.next();\n\n    if (firstResult.done && secondResult.done) {\n      return;\n    }\n\n    yield [firstResult.done ? null : firstResult.value, secondResult.done ? null : secondResult.value];\n  }\n};\n\nexports.treeOrderSorter = function (a, b) {\n  const compare = domSymbolTree.compareTreePosition(a, b);\n\n  if (compare & SYMBOL_TREE_POSITION.PRECEDING) {\n    // b is preceding a\n    return 1;\n  }\n\n  if (compare & SYMBOL_TREE_POSITION.FOLLOWING) {\n    return -1;\n  } // disconnected or equal:\n\n\n  return 0;\n};\n/* eslint-disable global-require */\n\n\nexports.Canvas = null;\n[\"canvas\", \"canvas-prebuilt\"].some(moduleName => {\n  try {\n    exports.Canvas = require(moduleName);\n\n    if (typeof exports.Canvas !== \"function\") {\n      // In browserify, the require will succeed but return an empty object\n      exports.Canvas = null;\n    }\n  } catch (e) {\n    exports.Canvas = null;\n  }\n\n  return exports.Canvas !== null;\n});","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/utils.js"],"names":["path","require","whatwgURL","domSymbolTree","SYMBOL_TREE_POSITION","TreePosition","parseURLToResultingURLRecord","exports","toFileUrl","fileName","pathname","resolve","process","cwd","replace","encodeURI","defineGetter","object","property","getterFn","descriptor","Object","getOwnPropertyDescriptor","configurable","enumerable","get","defineProperty","define","properties","name","getOwnPropertyNames","propDesc","addConstants","Constructor","propertyMap","value","addConstant","prototype","writable","mixin","target","source","keys","Reflect","ownKeys","i","length","memoizeQueryTypeCounter","memoizeQuery","fn","type","_memoizedQueries","apply","arguments","create","key","reflectURLAttribute","elementImpl","contentAttributeName","attributeValue","getAttribute","urlRecord","_ownerDocument","serializeURL","isValidAbsoluteURL","str","parseURL","isValidTargetOrigin","simultaneousIterators","first","second","firstResult","next","secondResult","done","treeOrderSorter","a","b","compare","compareTreePosition","PRECEDING","FOLLOWING","Canvas","some","moduleName","e"],"mappings":"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","sourcesContent":["\"use strict\";\nconst path = require(\"path\");\nconst whatwgURL = require(\"whatwg-url\");\nconst { domSymbolTree } = require(\"./living/helpers/internal-constants\");\nconst SYMBOL_TREE_POSITION = require(\"symbol-tree\").TreePosition;\nconst { parseURLToResultingURLRecord } = require(\"./living/helpers/document-base-url\");\n\nexports.toFileUrl = function (fileName) {\n  // Beyond just the `path.resolve`, this is mostly for the benefit of Windows,\n  // where we need to convert \"\\\" to \"/\" and add an extra \"/\" prefix before the\n  // drive letter.\n  let pathname = path.resolve(process.cwd(), fileName).replace(/\\\\/g, \"/\");\n  if (pathname[0] !== \"/\") {\n    pathname = \"/\" + pathname;\n  }\n\n  // path might contain spaces, so convert those to %20\n  return \"file://\" + encodeURI(pathname);\n};\n\n/**\n * Define a getter on an object\n *\n * This method replaces any existing getter but leaves setters in place.\n *\n * - `object` {Object} the object to define the getter on\n * - `property` {String} the name of the getter\n * - `getterFn` {Function} the getter\n */\nexports.defineGetter = function defineGetter(object, property, getterFn) {\n  const descriptor = Object.getOwnPropertyDescriptor(object, property) || {\n    configurable: true,\n    enumerable: true\n  };\n\n  descriptor.get = getterFn;\n\n  Object.defineProperty(object, property, descriptor);\n};\n\n/**\n * Define a set of properties on an object, by copying the property descriptors\n * from the original object.\n *\n * - `object` {Object} the target object\n * - `properties` {Object} the source from which to copy property descriptors\n */\nexports.define = function define(object, properties) {\n  for (const name of Object.getOwnPropertyNames(properties)) {\n    const propDesc = Object.getOwnPropertyDescriptor(properties, name);\n    Object.defineProperty(object, name, propDesc);\n  }\n};\n\n/**\n * Define a list of constants on a constructor and its .prototype\n *\n * - `Constructor` {Function} the constructor to define the constants on\n * - `propertyMap` {Object}  key/value map of properties to define\n */\nexports.addConstants = function addConstants(Constructor, propertyMap) {\n  for (const property in propertyMap) {\n    const value = propertyMap[property];\n    addConstant(Constructor, property, value);\n    addConstant(Constructor.prototype, property, value);\n  }\n};\n\nfunction addConstant(object, property, value) {\n  Object.defineProperty(object, property, {\n    configurable: false,\n    enumerable: true,\n    writable: false,\n    value\n  });\n}\n\nexports.mixin = (target, source) => {\n  const keys = Reflect.ownKeys(source);\n  for (let i = 0; i < keys.length; ++i) {\n    if (keys[i] in target) {\n      continue;\n    }\n\n    Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));\n  }\n};\n\nlet memoizeQueryTypeCounter = 0;\n\n/**\n * Returns a version of a method that memoizes specific types of calls on the object\n *\n * - `fn` {Function} the method to be memozied\n */\nexports.memoizeQuery = function memoizeQuery(fn) {\n  // Only memoize query functions with arity <= 2\n  if (fn.length > 2) {\n    return fn;\n  }\n\n  const type = memoizeQueryTypeCounter++;\n\n  return function () {\n    if (!this._memoizedQueries) {\n      return fn.apply(this, arguments);\n    }\n\n    if (!this._memoizedQueries[type]) {\n      this._memoizedQueries[type] = Object.create(null);\n    }\n\n    let key;\n    if (arguments.length === 1 && typeof arguments[0] === \"string\") {\n      key = arguments[0];\n    } else if (arguments.length === 2 && typeof arguments[0] === \"string\" && typeof arguments[1] === \"string\") {\n      key = arguments[0] + \"::\" + arguments[1];\n    } else {\n      return fn.apply(this, arguments);\n    }\n\n    if (!(key in this._memoizedQueries[type])) {\n      this._memoizedQueries[type][key] = fn.apply(this, arguments);\n    }\n    return this._memoizedQueries[type][key];\n  };\n};\n\nexports.reflectURLAttribute = (elementImpl, contentAttributeName) => {\n  const attributeValue = elementImpl.getAttribute(contentAttributeName);\n  if (attributeValue === null || attributeValue === \"\") {\n    return \"\";\n  }\n\n  const urlRecord = parseURLToResultingURLRecord(attributeValue, elementImpl._ownerDocument);\n  if (urlRecord === null) {\n    return attributeValue;\n  }\n  return whatwgURL.serializeURL(urlRecord);\n};\n\nfunction isValidAbsoluteURL(str) {\n  return whatwgURL.parseURL(str) !== null;\n}\n\nexports.isValidTargetOrigin = function (str) {\n  return str === \"*\" || str === \"/\" || isValidAbsoluteURL(str);\n};\n\nexports.simultaneousIterators = function* (first, second) {\n  for (;;) {\n    const firstResult = first.next();\n    const secondResult = second.next();\n\n    if (firstResult.done && secondResult.done) {\n      return;\n    }\n\n    yield [\n      firstResult.done ? null : firstResult.value,\n      secondResult.done ? null : secondResult.value\n    ];\n  }\n};\n\nexports.treeOrderSorter = function (a, b) {\n  const compare = domSymbolTree.compareTreePosition(a, b);\n\n  if (compare & SYMBOL_TREE_POSITION.PRECEDING) { // b is preceding a\n    return 1;\n  }\n\n  if (compare & SYMBOL_TREE_POSITION.FOLLOWING) {\n    return -1;\n  }\n\n  // disconnected or equal:\n  return 0;\n};\n\n/* eslint-disable global-require */\n\nexports.Canvas = null;\n[\"canvas\", \"canvas-prebuilt\"].some(moduleName => {\n  try {\n    exports.Canvas = require(moduleName);\n    if (typeof exports.Canvas !== \"function\") {\n      // In browserify, the require will succeed but return an empty object\n      exports.Canvas = null;\n    }\n  } catch (e) {\n    exports.Canvas = null;\n  }\n  return exports.Canvas !== null;\n});\n"]},"metadata":{},"sourceType":"script"}