{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoiceSubmit.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { getAllCompanies } from '../../../redux/actions/companies';\nimport FormInput from '../../../components/form/components/FormInput';\nexport const NewInvoiceSubmit = ({\n  company,\n  invoice,\n  history\n}) => {\n  const downloadInvoice = () => {\n    const invoice = document.getElementById('invoice').innerHTML;\n    const pdf = window.open();\n    pdf.document.write('<html><head>');\n    pdf.document.write(`<link rel=\"stylesheet\" type=\"text/css\" href=\"${window.location.origin}/invoice.css\"/>`);\n    pdf.document.write(` <link\n            href=\"https://fonts.googleapis.com/css?family=Audiowide|Inter:400,600&display=swap\"\n            rel=\"stylesheet\"\n        />`);\n    pdf.document.write('</head><body>');\n    pdf.document.write(invoice);\n    pdf.document.write('</body></link>');\n    pdf.document.close();\n    setTimeout(function () {\n      pdf.print();\n    }, 100);\n  };\n\n  const [saveAs, setSaveAs] = useState(false);\n\n  const show_form = async () => {\n    await setSaveAs(true);\n    document.querySelector('.form__save-as input').focus();\n  };\n\n  const [formData, setFormData] = useState({\n    saveAs: invoice.saved_as,\n    errors: []\n  });\n\n  const saveInvoice = async () => {\n    console.log(invoice); //save invoice state\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      await axios.post(`/api/companies/invoice/${company._id}`, JSON.stringify(invoice), config);\n      getAllCompanies(); // setCurrentTask(null);\n    } catch (err) {\n      console.log('Invoice saving err:', err);\n    } //delete ONLY the tasks added to invoice form tasks list\n    //clear invoice doc\n\n\n    setSaveAs(false);\n    history.push(`/dashboard/companies/${company._id}?tab=invoices`);\n  };\n\n  return /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, \"Save or download invoice form.\"), saveAs && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form__save-as\",\n    onSubmit: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    form: {\n      formData,\n      setFormData\n    },\n    name: \"saveAs\",\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 25\n    }\n  }, \"Save as: \")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn--info btn--sibling\",\n    onClick: saveInvoice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }, ' ', \"Save\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn\",\n    onClick: () => setSaveAs(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, ' ', \"Cancel\")), !saveAs && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn--sibling\",\n    onClick: show_form,\n    id: \"save-as\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, \"Save As\"), !saveAs && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn--info\",\n    onClick: downloadInvoice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, \"Download*\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, \"*\", ' ', /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, \"You can either print or save the invoice in pdf format.\", ' ', /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }), \"We recommend using Chrome browser for the best experience. On clicking this button follow your browsers specification on how to handle the process.\")));\n};\nNewInvoiceSubmit.propTypes = {\n  company: PropTypes.object,\n  invoice: PropTypes.object,\n  getAllCompanies: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  company: state.companies.find(c => c._id === state.session.currentCompany),\n  invoice: state.invoice\n});\n\nconst mapDispatchToProps = {\n  getAllCompanies\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(NewInvoiceSubmit));","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoiceSubmit.js"],"names":["React","useState","PropTypes","withRouter","axios","connect","getAllCompanies","FormInput","NewInvoiceSubmit","company","invoice","history","downloadInvoice","document","getElementById","innerHTML","pdf","window","open","write","location","origin","close","setTimeout","print","saveAs","setSaveAs","show_form","querySelector","focus","formData","setFormData","saved_as","errors","saveInvoice","console","log","config","headers","post","_id","JSON","stringify","err","push","e","preventDefault","propTypes","object","func","mapStateToProps","state","companies","find","c","session","currentCompany","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { getAllCompanies } from '../../../redux/actions/companies';\nimport FormInput from '../../../components/form/components/FormInput';\n\nexport const NewInvoiceSubmit = ({ company, invoice, history }) => {\n    const downloadInvoice = () => {\n        const invoice = document.getElementById('invoice').innerHTML;\n        const pdf = window.open();\n        pdf.document.write('<html><head>');\n        pdf.document.write(\n            `<link rel=\"stylesheet\" type=\"text/css\" href=\"${window.location.origin}/invoice.css\"/>`\n        );\n        pdf.document.write(\n            ` <link\n            href=\"https://fonts.googleapis.com/css?family=Audiowide|Inter:400,600&display=swap\"\n            rel=\"stylesheet\"\n        />`\n        );\n        pdf.document.write('</head><body>');\n        pdf.document.write(invoice);\n        pdf.document.write('</body></link>');\n        pdf.document.close();\n        setTimeout(function () {\n            pdf.print();\n        }, 100);\n    };\n    const [saveAs, setSaveAs] = useState(false);\n    const show_form = async () => {\n        await setSaveAs(true);\n        document.querySelector('.form__save-as input').focus();\n    };\n    const [formData, setFormData] = useState({\n        saveAs: invoice.saved_as,\n        errors: [],\n    });\n    const saveInvoice = async () => {\n        console.log(invoice);\n        //save invoice state\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n\n            await axios.post(\n                `/api/companies/invoice/${company._id}`,\n                JSON.stringify(invoice),\n                config\n            );\n            getAllCompanies();\n            // setCurrentTask(null);\n        } catch (err) {\n            console.log('Invoice saving err:', err);\n        }\n        //delete ONLY the tasks added to invoice form tasks list\n        //clear invoice doc\n        setSaveAs(false);\n        history.push(`/dashboard/companies/${company._id}?tab=invoices`);\n    };\n\n    return (\n        <section>\n            <h3 className='sr-only'>Save or download invoice form.</h3>\n            {saveAs && (\n                <form\n                    className='form__save-as'\n                    onSubmit={(e) => e.preventDefault()}\n                >\n                    <FormInput\n                        form={{ formData, setFormData }}\n                        name='saveAs'\n                        size='sm'\n                    >\n                        <b>Save as: </b>\n                    </FormInput>\n                    <button\n                        type='submit'\n                        className='btn btn--info btn--sibling'\n                        onClick={saveInvoice}\n                    >\n                        {' '}\n                        Save\n                    </button>\n                    <button\n                        type='button'\n                        className='btn'\n                        onClick={() => setSaveAs(false)}\n                    >\n                        {' '}\n                        Cancel\n                    </button>\n                </form>\n            )}\n\n            {!saveAs && (\n                <button\n                    type='button'\n                    className='btn btn--sibling'\n                    onClick={show_form}\n                    id='save-as'\n                >\n                    Save As\n                </button>\n            )}\n            {!saveAs && (\n                <button\n                    type='button'\n                    className='btn btn--info'\n                    onClick={downloadInvoice}\n                >\n                    Download*\n                </button>\n            )}\n            <p>\n                *{' '}\n                <small>\n                    You can either print or save the invoice in pdf format.{' '}\n                    <br />\n                    We recommend using Chrome browser for the best experience.\n                    On clicking this button follow your browsers specification\n                    on how to handle the process.\n                </small>\n            </p>\n        </section>\n    );\n};\n\nNewInvoiceSubmit.propTypes = {\n    company: PropTypes.object,\n    invoice: PropTypes.object,\n    getAllCompanies: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n    company: state.companies.find(\n        (c) => c._id === state.session.currentCompany\n    ),\n    invoice: state.invoice,\n});\n\nconst mapDispatchToProps = {\n    getAllCompanies,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(NewInvoiceSubmit));\n"]},"metadata":{},"sourceType":"module"}