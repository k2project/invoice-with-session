{"ast":null,"code":"\"use strict\";\n\nconst idlUtils = require(\"../generated/utils.js\");\n\nconst {\n  setAttributeValue,\n  removeAttributeByName\n} = require(\"../attributes\");\n\nconst validateName = require(\"../helpers/validate-names\").name;\n\nconst DOMException = require(\"domexception\");\n\nconst dataAttrRe = /^data-([^A-Z]*)$/;\n\nfunction attrCamelCase(name) {\n  return name.replace(/-([a-z])/g, (match, alpha) => alpha.toUpperCase());\n}\n\nfunction attrSnakeCase(name) {\n  return name.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`);\n}\n\nexports.implementation = class DOMStringMapImpl {\n  constructor(args, privateData) {\n    this._element = privateData.element;\n  }\n\n  get [idlUtils.supportedPropertyNames]() {\n    const result = new Set();\n    const {\n      attributes\n    } = this._element;\n\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n\n      if (matches) {\n        result.add(attrCamelCase(matches[1]));\n      }\n    }\n\n    return result;\n  }\n\n  [idlUtils.namedGet](name) {\n    const {\n      attributes\n    } = this._element;\n\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n\n      if (matches && attrCamelCase(matches[1]) === name) {\n        return attr.value;\n      }\n    }\n\n    return undefined;\n  }\n\n  [idlUtils.namedSetNew](name, value) {\n    if (/-[a-z]/.test(name)) {\n      throw new DOMException(`'${name}' is not a valid property name`, \"SyntaxError\");\n    }\n\n    name = `data-${attrSnakeCase(name)}`;\n    validateName(name);\n    setAttributeValue(this._element, name, value);\n  }\n\n  [idlUtils.namedSetExisting](name, value) {\n    this[idlUtils.namedSetNew](name, value);\n  }\n\n  [idlUtils.namedDelete](name) {\n    name = `data-${attrSnakeCase(name)}`;\n    removeAttributeByName(this._element, name);\n  }\n\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/DOMStringMap-impl.js"],"names":["idlUtils","require","setAttributeValue","removeAttributeByName","validateName","name","DOMException","dataAttrRe","attrCamelCase","replace","match","alpha","toUpperCase","attrSnakeCase","toLowerCase","exports","implementation","DOMStringMapImpl","constructor","args","privateData","_element","element","supportedPropertyNames","result","Set","attributes","i","length","attr","item","matches","exec","localName","add","namedGet","value","undefined","namedSetNew","test","namedSetExisting","namedDelete"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst idlUtils = require(\"../generated/utils.js\");\nconst { setAttributeValue, removeAttributeByName } = require(\"../attributes\");\nconst validateName = require(\"../helpers/validate-names\").name;\nconst DOMException = require(\"domexception\");\n\nconst dataAttrRe = /^data-([^A-Z]*)$/;\n\nfunction attrCamelCase(name) {\n  return name.replace(/-([a-z])/g, (match, alpha) => alpha.toUpperCase());\n}\n\nfunction attrSnakeCase(name) {\n  return name.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`);\n}\n\nexports.implementation = class DOMStringMapImpl {\n  constructor(args, privateData) {\n    this._element = privateData.element;\n  }\n  get [idlUtils.supportedPropertyNames]() {\n    const result = new Set();\n    const { attributes } = this._element;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n      if (matches) {\n        result.add(attrCamelCase(matches[1]));\n      }\n    }\n    return result;\n  }\n  [idlUtils.namedGet](name) {\n    const { attributes } = this._element;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n      if (matches && attrCamelCase(matches[1]) === name) {\n        return attr.value;\n      }\n    }\n    return undefined;\n  }\n  [idlUtils.namedSetNew](name, value) {\n    if (/-[a-z]/.test(name)) {\n      throw new DOMException(`'${name}' is not a valid property name`, \"SyntaxError\");\n    }\n    name = `data-${attrSnakeCase(name)}`;\n    validateName(name);\n    setAttributeValue(this._element, name, value);\n  }\n  [idlUtils.namedSetExisting](name, value) {\n    this[idlUtils.namedSetNew](name, value);\n  }\n  [idlUtils.namedDelete](name) {\n    name = `data-${attrSnakeCase(name)}`;\n    removeAttributeByName(this._element, name);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}