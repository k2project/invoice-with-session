{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\n\nconst {\n  HTML_NS\n} = require(\"../helpers/namespaces\");\n\nconst {\n  childrenByHTMLLocalNames\n} = require(\"../helpers/traversal\");\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst cellLocalNames = new Set([\"td\", \"th\"]);\n\nclass HTMLTableRowElementImpl extends HTMLElementImpl {\n  get cells() {\n    if (!this._cells) {\n      this._cells = HTMLCollection.createImpl([], {\n        element: this,\n        query: () => childrenByHTMLLocalNames(this, cellLocalNames)\n      });\n    }\n\n    return this._cells;\n  }\n\n  get rowIndex() {\n    const parent = this.parentElement;\n\n    if (parent === null || parent.namespaceURI !== HTML_NS) {\n      return -1;\n    }\n\n    let tableElement = parent;\n\n    if (parent.localName === \"thead\" || parent.localName === \"tbody\" || parent.localName === \"tfoot\") {\n      tableElement = parent.parentElement;\n    }\n\n    if (tableElement === null || tableElement.namespaceURI !== HTML_NS || tableElement.localName !== \"table\") {\n      return -1;\n    }\n\n    return tableElement.rows.indexOf(this);\n  }\n\n  get sectionRowIndex() {\n    const parent = domSymbolTree.parent(this);\n\n    if (parent === null) {\n      return -1;\n    }\n\n    const {\n      rows\n    } = parent;\n\n    if (!rows) {\n      return -1;\n    }\n\n    return rows.indexOf(this);\n  }\n\n  insertCell(index) {\n    const td = this._ownerDocument.createElement(\"TD\");\n\n    const {\n      cells\n    } = this;\n\n    if (index < -1 || index > cells.length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    if (index === -1 || index === cells.length) {\n      this.appendChild(td);\n    } else {\n      const ref = cells.item(index);\n      this.insertBefore(td, ref);\n    }\n\n    return td;\n  }\n\n  deleteCell(index) {\n    const {\n      cells\n    } = this;\n\n    if (index < -1 || index >= cells.length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    if (index === -1) {\n      if (cells.length === 0) {\n        return;\n      }\n\n      index = cells.length - 1;\n    }\n\n    const td = cells.item(index);\n    this.removeChild(td);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLTableRowElementImpl\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableRowElement-impl.js"],"names":["DOMException","require","HTMLElementImpl","implementation","HTMLCollection","HTML_NS","childrenByHTMLLocalNames","domSymbolTree","cellLocalNames","Set","HTMLTableRowElementImpl","cells","_cells","createImpl","element","query","rowIndex","parent","parentElement","namespaceURI","tableElement","localName","rows","indexOf","sectionRowIndex","insertCell","index","td","_ownerDocument","createElement","length","appendChild","ref","item","insertBefore","deleteCell","removeChild","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\nconst { HTML_NS } = require(\"../helpers/namespaces\");\nconst { childrenByHTMLLocalNames } = require(\"../helpers/traversal\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\n\nconst cellLocalNames = new Set([\"td\", \"th\"]);\n\nclass HTMLTableRowElementImpl extends HTMLElementImpl {\n  get cells() {\n    if (!this._cells) {\n      this._cells = HTMLCollection.createImpl([], {\n        element: this,\n        query: () => childrenByHTMLLocalNames(this, cellLocalNames)\n      });\n    }\n    return this._cells;\n  }\n\n  get rowIndex() {\n    const parent = this.parentElement;\n    if (parent === null || parent.namespaceURI !== HTML_NS) {\n      return -1;\n    }\n\n    let tableElement = parent;\n    if (parent.localName === \"thead\" || parent.localName === \"tbody\" || parent.localName === \"tfoot\") {\n      tableElement = parent.parentElement;\n    }\n    if (tableElement === null || tableElement.namespaceURI !== HTML_NS || tableElement.localName !== \"table\") {\n      return -1;\n    }\n\n    return tableElement.rows.indexOf(this);\n  }\n\n  get sectionRowIndex() {\n    const parent = domSymbolTree.parent(this);\n    if (parent === null) {\n      return -1;\n    }\n\n    const { rows } = parent;\n    if (!rows) {\n      return -1;\n    }\n\n    return rows.indexOf(this);\n  }\n\n  insertCell(index) {\n    const td = this._ownerDocument.createElement(\"TD\");\n    const { cells } = this;\n    if (index < -1 || index > cells.length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n    if (index === -1 || index === cells.length) {\n      this.appendChild(td);\n    } else {\n      const ref = cells.item(index);\n      this.insertBefore(td, ref);\n    }\n    return td;\n  }\n\n  deleteCell(index) {\n    const { cells } = this;\n    if (index < -1 || index >= cells.length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n    if (index === -1) {\n      if (cells.length === 0) {\n        return;\n      }\n\n      index = cells.length - 1;\n    }\n    const td = cells.item(index);\n    this.removeChild(td);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLTableRowElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}