{"ast":null,"code":"\"use strict\";\n\nconst {\n  domSymbolTree\n} = require(\"./internal-constants\");\n\nconst {\n  DOCUMENT_NODE\n} = require(\"../node-type\");\n\nconst {\n  HTML_NS\n} = require(\"./namespaces\"); // All these operate on and return impls, not wrappers!\n\n\nexports.closest = (e, localName) => {\n  while (e) {\n    if (e.localName === localName && e.namespaceURI === HTML_NS) {\n      return e;\n    }\n\n    e = domSymbolTree.parent(e);\n  }\n\n  return null;\n};\n\nexports.isConnected = node => {\n  while (node) {\n    if (node.nodeType === DOCUMENT_NODE) {\n      return true;\n    }\n\n    node = domSymbolTree.parent(node);\n  }\n\n  return false;\n};\n\nexports.childrenByHTMLLocalName = (parent, localName) => {\n  return domSymbolTree.childrenToArray(parent, {\n    filter(node) {\n      return node._localName === localName && node._namespaceURI === HTML_NS;\n    }\n\n  });\n};\n\nexports.descendantsByHTMLLocalName = (parent, localName) => {\n  return domSymbolTree.treeToArray(parent, {\n    filter(node) {\n      return node._localName === localName && node._namespaceURI === HTML_NS && node !== parent;\n    }\n\n  });\n};\n\nexports.childrenByHTMLLocalNames = (parent, localNamesSet) => {\n  return domSymbolTree.childrenToArray(parent, {\n    filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === HTML_NS;\n    }\n\n  });\n};\n\nexports.descendantsByHTMLLocalNames = (parent, localNamesSet) => {\n  return domSymbolTree.treeToArray(parent, {\n    filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === HTML_NS && node !== parent;\n    }\n\n  });\n};\n\nexports.firstChildWithHTMLLocalName = (parent, localName) => {\n  const iterator = domSymbolTree.childrenIterator(parent);\n\n  for (const child of iterator) {\n    if (child._localName === localName && child._namespaceURI === HTML_NS) {\n      return child;\n    }\n  }\n\n  return null;\n};\n\nexports.firstChildWithHTMLLocalNames = (parent, localNamesSet) => {\n  const iterator = domSymbolTree.childrenIterator(parent);\n\n  for (const child of iterator) {\n    if (localNamesSet.has(child._localName) && child._namespaceURI === HTML_NS) {\n      return child;\n    }\n  }\n\n  return null;\n};\n\nexports.firstDescendantWithHTMLLocalName = (parent, localName) => {\n  const iterator = domSymbolTree.treeIterator(parent);\n\n  for (const descendant of iterator) {\n    if (descendant._localName === localName && descendant._namespaceURI === HTML_NS) {\n      return descendant;\n    }\n  }\n\n  return null;\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/helpers/traversal.js"],"names":["domSymbolTree","require","DOCUMENT_NODE","HTML_NS","exports","closest","e","localName","namespaceURI","parent","isConnected","node","nodeType","childrenByHTMLLocalName","childrenToArray","filter","_localName","_namespaceURI","descendantsByHTMLLocalName","treeToArray","childrenByHTMLLocalNames","localNamesSet","has","descendantsByHTMLLocalNames","firstChildWithHTMLLocalName","iterator","childrenIterator","child","firstChildWithHTMLLocalNames","firstDescendantWithHTMLLocalName","treeIterator","descendant"],"mappings":"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","sourcesContent":["\"use strict\";\nconst { domSymbolTree } = require(\"./internal-constants\");\nconst { DOCUMENT_NODE } = require(\"../node-type\");\nconst { HTML_NS } = require(\"./namespaces\");\n\n// All these operate on and return impls, not wrappers!\n\nexports.closest = (e, localName) => {\n  while (e) {\n    if (e.localName === localName && e.namespaceURI === HTML_NS) {\n      return e;\n    }\n    e = domSymbolTree.parent(e);\n  }\n\n  return null;\n};\n\nexports.isConnected = node => {\n  while (node) {\n    if (node.nodeType === DOCUMENT_NODE) {\n      return true;\n    }\n    node = domSymbolTree.parent(node);\n  }\n  return false;\n};\n\nexports.childrenByHTMLLocalName = (parent, localName) => {\n  return domSymbolTree.childrenToArray(parent, { filter(node) {\n    return node._localName === localName && node._namespaceURI === HTML_NS;\n  } });\n};\n\nexports.descendantsByHTMLLocalName = (parent, localName) => {\n  return domSymbolTree.treeToArray(parent, { filter(node) {\n    return node._localName === localName && node._namespaceURI === HTML_NS && node !== parent;\n  } });\n};\n\nexports.childrenByHTMLLocalNames = (parent, localNamesSet) => {\n  return domSymbolTree.childrenToArray(parent, { filter(node) {\n    return localNamesSet.has(node._localName) && node._namespaceURI === HTML_NS;\n  } });\n};\n\nexports.descendantsByHTMLLocalNames = (parent, localNamesSet) => {\n  return domSymbolTree.treeToArray(parent, { filter(node) {\n    return localNamesSet.has(node._localName) &&\n           node._namespaceURI === HTML_NS &&\n           node !== parent;\n  } });\n};\n\nexports.firstChildWithHTMLLocalName = (parent, localName) => {\n  const iterator = domSymbolTree.childrenIterator(parent);\n  for (const child of iterator) {\n    if (child._localName === localName && child._namespaceURI === HTML_NS) {\n      return child;\n    }\n  }\n  return null;\n};\n\nexports.firstChildWithHTMLLocalNames = (parent, localNamesSet) => {\n  const iterator = domSymbolTree.childrenIterator(parent);\n  for (const child of iterator) {\n    if (localNamesSet.has(child._localName) && child._namespaceURI === HTML_NS) {\n      return child;\n    }\n  }\n  return null;\n};\n\nexports.firstDescendantWithHTMLLocalName = (parent, localName) => {\n  const iterator = domSymbolTree.treeIterator(parent);\n  for (const descendant of iterator) {\n    if (descendant._localName === localName && descendant._namespaceURI === HTML_NS) {\n      return descendant;\n    }\n  }\n  return null;\n};\n"]},"metadata":{},"sourceType":"script"}