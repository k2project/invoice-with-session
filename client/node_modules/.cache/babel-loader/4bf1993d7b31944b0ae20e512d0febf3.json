{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception\");\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst conversions = require(\"webidl-conversions\"); // TODO: Once NodeFilter is ported to IDL method, use those instead.\n\n\nexports.FILTER_ACCEPT = 1; // NodeFilter.FILTER_ACCEPT\n\nexports.FILTER_REJECT = 2; // NodeFilter.FILTER_REJECT\n\nexports.FILTER_SKIP = 3; // NodeFilter.FILTER_SKIP\n\nexports.filter = (nodeIteratorOrTreeWalkerImpl, nodeImpl) => {\n  if (nodeIteratorOrTreeWalkerImpl._active) {\n    throw new DOMException(\"Recursive node filtering\", \"InvalidStateError\");\n  }\n\n  const n = nodeImpl.nodeType - 1;\n\n  if (!(1 << n & nodeIteratorOrTreeWalkerImpl.whatToShow)) {\n    return exports.FILTER_SKIP;\n  } // Saving in a variable is important so we don't accidentally call it as a method later.\n\n\n  const {\n    filter\n  } = nodeIteratorOrTreeWalkerImpl;\n\n  if (filter === null) {\n    return exports.FILTER_ACCEPT;\n  }\n\n  nodeIteratorOrTreeWalkerImpl._active = true;\n  let result; // https://github.com/whatwg/dom/issues/494\n\n  try {\n    if (typeof filter === \"function\") {\n      result = filter(idlUtils.wrapperForImpl(nodeImpl));\n    } else {\n      result = filter.acceptNode(idlUtils.wrapperForImpl(nodeImpl));\n    }\n  } finally {\n    nodeIteratorOrTreeWalkerImpl._active = false;\n  }\n\n  result = conversions[\"unsigned short\"](result);\n  return result;\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/traversal/helpers.js"],"names":["DOMException","require","idlUtils","conversions","exports","FILTER_ACCEPT","FILTER_REJECT","FILTER_SKIP","filter","nodeIteratorOrTreeWalkerImpl","nodeImpl","_active","n","nodeType","whatToShow","result","wrapperForImpl","acceptNode"],"mappings":"AAAA;;AACA,MAAMA,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA5B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,oBAAD,CAA3B,C,CAEA;;;AACAG,OAAO,CAACC,aAAR,GAAwB,CAAxB,C,CAA2B;;AAC3BD,OAAO,CAACE,aAAR,GAAwB,CAAxB,C,CAA2B;;AAC3BF,OAAO,CAACG,WAAR,GAAsB,CAAtB,C,CAAyB;;AAEzBH,OAAO,CAACI,MAAR,GAAiB,CAACC,4BAAD,EAA+BC,QAA/B,KAA4C;AAC3D,MAAID,4BAA4B,CAACE,OAAjC,EAA0C;AACxC,UAAM,IAAIX,YAAJ,CAAiB,0BAAjB,EAA6C,mBAA7C,CAAN;AACD;;AAED,QAAMY,CAAC,GAAGF,QAAQ,CAACG,QAAT,GAAoB,CAA9B;;AAEA,MAAI,EAAG,KAAKD,CAAN,GAAWH,4BAA4B,CAACK,UAA1C,CAAJ,EAA2D;AACzD,WAAOV,OAAO,CAACG,WAAf;AACD,GAT0D,CAW3D;;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaC,4BAAnB;;AAEA,MAAID,MAAM,KAAK,IAAf,EAAqB;AACnB,WAAOJ,OAAO,CAACC,aAAf;AACD;;AAEDI,EAAAA,4BAA4B,CAACE,OAA7B,GAAuC,IAAvC;AAEA,MAAII,MAAJ,CApB2D,CAsB3D;;AACA,MAAI;AACF,QAAI,OAAOP,MAAP,KAAkB,UAAtB,EAAkC;AAChCO,MAAAA,MAAM,GAAGP,MAAM,CAACN,QAAQ,CAACc,cAAT,CAAwBN,QAAxB,CAAD,CAAf;AACD,KAFD,MAEO;AACLK,MAAAA,MAAM,GAAGP,MAAM,CAACS,UAAP,CAAkBf,QAAQ,CAACc,cAAT,CAAwBN,QAAxB,CAAlB,CAAT;AACD;AACF,GAND,SAMU;AACRD,IAAAA,4BAA4B,CAACE,OAA7B,GAAuC,KAAvC;AACD;;AAEDI,EAAAA,MAAM,GAAGZ,WAAW,CAAC,gBAAD,CAAX,CAA8BY,MAA9B,CAAT;AAEA,SAAOA,MAAP;AACD,CApCD","sourcesContent":["\"use strict\";\nconst DOMException = require(\"domexception\");\nconst idlUtils = require(\"../generated/utils\");\nconst conversions = require(\"webidl-conversions\");\n\n// TODO: Once NodeFilter is ported to IDL method, use those instead.\nexports.FILTER_ACCEPT = 1; // NodeFilter.FILTER_ACCEPT\nexports.FILTER_REJECT = 2; // NodeFilter.FILTER_REJECT\nexports.FILTER_SKIP = 3; // NodeFilter.FILTER_SKIP\n\nexports.filter = (nodeIteratorOrTreeWalkerImpl, nodeImpl) => {\n  if (nodeIteratorOrTreeWalkerImpl._active) {\n    throw new DOMException(\"Recursive node filtering\", \"InvalidStateError\");\n  }\n\n  const n = nodeImpl.nodeType - 1;\n\n  if (!((1 << n) & nodeIteratorOrTreeWalkerImpl.whatToShow)) {\n    return exports.FILTER_SKIP;\n  }\n\n  // Saving in a variable is important so we don't accidentally call it as a method later.\n  const { filter } = nodeIteratorOrTreeWalkerImpl;\n\n  if (filter === null) {\n    return exports.FILTER_ACCEPT;\n  }\n\n  nodeIteratorOrTreeWalkerImpl._active = true;\n\n  let result;\n\n  // https://github.com/whatwg/dom/issues/494\n  try {\n    if (typeof filter === \"function\") {\n      result = filter(idlUtils.wrapperForImpl(nodeImpl));\n    } else {\n      result = filter.acceptNode(idlUtils.wrapperForImpl(nodeImpl));\n    }\n  } finally {\n    nodeIteratorOrTreeWalkerImpl._active = false;\n  }\n\n  result = conversions[\"unsigned short\"](result);\n\n  return result;\n};\n"]},"metadata":{},"sourceType":"script"}