{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst notImplemented = require(\"../../browser/not-implemented\");\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst {\n  Canvas\n} = require(\"../../utils\");\n\nclass HTMLCanvasElementImpl extends HTMLElementImpl {\n  _attrModified(name, value) {\n    if (this._canvas && (name === \"width\" || name === \"height\")) {\n      this._canvas[name] = parseInt(value);\n    }\n\n    return super._attrModified.apply(this, arguments);\n  }\n\n  _getCanvas() {\n    if (Canvas && !this._canvas) {\n      this._canvas = new Canvas(this.width, this.height);\n    }\n\n    return this._canvas;\n  }\n\n  getContext(contextId) {\n    const canvas = this._getCanvas();\n\n    if (canvas) {\n      if (!this._context) {\n        this._context = canvas.getContext(contextId) || null;\n\n        if (this._context) {\n          // Override the native canvas reference with our wrapper. This is the\n          // reason why we need to locally cache _context, since each call to\n          // canvas.getContext(contextId) would replace this reference again.\n          // Perhaps in the longer term, a better solution would be to create a\n          // full wrapper for the Context object as well.\n          this._context.canvas = idlUtils.wrapperForImpl(this);\n          wrapNodeCanvasMethod(this._context, \"createPattern\");\n          wrapNodeCanvasMethod(this._context, \"drawImage\");\n        }\n      }\n\n      return this._context;\n    }\n\n    notImplemented(\"HTMLCanvasElement.prototype.getContext (without installing the canvas npm package)\", this._ownerDocument._defaultView);\n    return null;\n  }\n\n  toDataURL() {\n    const canvas = this._getCanvas();\n\n    if (canvas) {\n      return canvas.toDataURL.apply(this._canvas, arguments);\n    }\n\n    notImplemented(\"HTMLCanvasElement.prototype.toDataURL (without installing the canvas npm package)\", this._ownerDocument._defaultView);\n    return null;\n  }\n\n  toBlob(callback, type, qualityArgument) {\n    const window = this._ownerDocument._defaultView;\n\n    const canvas = this._getCanvas();\n\n    if (canvas) {\n      let stream;\n\n      switch (type) {\n        case \"image/jpg\":\n        case \"image/jpeg\":\n          stream = canvas.createJPEGStream({\n            quality: Math.max(0, Math.min(1, qualityArgument)) * 100\n          });\n          break;\n\n        default:\n          // TODO: Patch node-canvas to receive qualityArgument for PNG stream\n          type = \"image/png\";\n          stream = canvas.createPNGStream();\n      }\n\n      const buffers = [];\n      stream.on(\"data\", chunk => {\n        buffers.push(chunk);\n      });\n      stream.on(\"end\", () => {\n        callback(new window.Blob(buffers, {\n          type\n        }));\n      });\n    } else {\n      notImplemented(\"HTMLCanvasElement.prototype.toBlob (without installing the canvas npm package)\", window);\n    }\n  }\n\n  get width() {\n    const parsed = parseInt(this.getAttribute(\"width\"));\n    return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 300 : parsed;\n  }\n\n  set width(v) {\n    v = v > 2147483647 ? 300 : v;\n    this.setAttribute(\"width\", String(v));\n  }\n\n  get height() {\n    const parsed = parseInt(this.getAttribute(\"height\"));\n    return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 150 : parsed;\n  }\n\n  set height(v) {\n    v = v > 2147483647 ? 150 : v;\n    this.setAttribute(\"height\", String(v));\n  }\n\n} // We need to wrap the methods that receive an image or canvas object\n// (luckily, always as the first argument), so that these objects can be\n// unwrapped an the expected types passed.\n\n\nfunction wrapNodeCanvasMethod(ctx, name) {\n  const prev = ctx[name];\n\n  ctx[name] = function (image) {\n    const impl = idlUtils.implForWrapper(image);\n\n    if (impl) {\n      arguments[0] = impl._image || impl._canvas;\n    }\n\n    return prev.apply(ctx, arguments);\n  };\n}\n\nmodule.exports = {\n  implementation: HTMLCanvasElementImpl\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLCanvasElement-impl.js"],"names":["HTMLElementImpl","require","implementation","notImplemented","idlUtils","Canvas","HTMLCanvasElementImpl","_attrModified","name","value","_canvas","parseInt","apply","arguments","_getCanvas","width","height","getContext","contextId","canvas","_context","wrapperForImpl","wrapNodeCanvasMethod","_ownerDocument","_defaultView","toDataURL","toBlob","callback","type","qualityArgument","window","stream","createJPEGStream","quality","Math","max","min","createPNGStream","buffers","on","chunk","push","Blob","parsed","getAttribute","isNaN","v","setAttribute","String","ctx","prev","image","impl","implForWrapper","_image","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst notImplemented = require(\"../../browser/not-implemented\");\nconst idlUtils = require(\"../generated/utils\");\nconst { Canvas } = require(\"../../utils\");\n\nclass HTMLCanvasElementImpl extends HTMLElementImpl {\n  _attrModified(name, value) {\n    if (this._canvas && (name === \"width\" || name === \"height\")) {\n      this._canvas[name] = parseInt(value);\n    }\n\n    return super._attrModified.apply(this, arguments);\n  }\n\n  _getCanvas() {\n    if (Canvas && !this._canvas) {\n      this._canvas = new Canvas(this.width, this.height);\n    }\n    return this._canvas;\n  }\n\n  getContext(contextId) {\n    const canvas = this._getCanvas();\n    if (canvas) {\n      if (!this._context) {\n        this._context = canvas.getContext(contextId) || null;\n        if (this._context) {\n          // Override the native canvas reference with our wrapper. This is the\n          // reason why we need to locally cache _context, since each call to\n          // canvas.getContext(contextId) would replace this reference again.\n          // Perhaps in the longer term, a better solution would be to create a\n          // full wrapper for the Context object as well.\n          this._context.canvas = idlUtils.wrapperForImpl(this);\n          wrapNodeCanvasMethod(this._context, \"createPattern\");\n          wrapNodeCanvasMethod(this._context, \"drawImage\");\n        }\n      }\n      return this._context;\n    }\n\n    notImplemented(\n      \"HTMLCanvasElement.prototype.getContext (without installing the canvas npm package)\",\n      this._ownerDocument._defaultView\n    );\n    return null;\n  }\n\n  toDataURL() {\n    const canvas = this._getCanvas();\n    if (canvas) {\n      return canvas.toDataURL.apply(this._canvas, arguments);\n    }\n\n    notImplemented(\n      \"HTMLCanvasElement.prototype.toDataURL (without installing the canvas npm package)\",\n      this._ownerDocument._defaultView\n    );\n    return null;\n  }\n\n  toBlob(callback, type, qualityArgument) {\n    const window = this._ownerDocument._defaultView;\n    const canvas = this._getCanvas();\n    if (canvas) {\n      let stream;\n      switch (type) {\n        case \"image/jpg\":\n        case \"image/jpeg\":\n          stream = canvas.createJPEGStream({\n            quality: Math.max(0, Math.min(1, qualityArgument)) * 100\n          });\n          break;\n        default:\n          // TODO: Patch node-canvas to receive qualityArgument for PNG stream\n          type = \"image/png\";\n          stream = canvas.createPNGStream();\n      }\n      const buffers = [];\n      stream.on(\"data\", chunk => {\n        buffers.push(chunk);\n      });\n      stream.on(\"end\", () => {\n        callback(new window.Blob(buffers, { type }));\n      });\n    } else {\n      notImplemented(\n        \"HTMLCanvasElement.prototype.toBlob (without installing the canvas npm package)\",\n        window\n      );\n    }\n  }\n\n  get width() {\n    const parsed = parseInt(this.getAttribute(\"width\"));\n    return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 300 : parsed;\n  }\n\n  set width(v) {\n    v = v > 2147483647 ? 300 : v;\n    this.setAttribute(\"width\", String(v));\n  }\n\n  get height() {\n    const parsed = parseInt(this.getAttribute(\"height\"));\n    return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 150 : parsed;\n  }\n\n  set height(v) {\n    v = v > 2147483647 ? 150 : v;\n    this.setAttribute(\"height\", String(v));\n  }\n}\n\n// We need to wrap the methods that receive an image or canvas object\n// (luckily, always as the first argument), so that these objects can be\n// unwrapped an the expected types passed.\nfunction wrapNodeCanvasMethod(ctx, name) {\n  const prev = ctx[name];\n  ctx[name] = function (image) {\n    const impl = idlUtils.implForWrapper(image);\n    if (impl) {\n      arguments[0] = impl._image || impl._canvas;\n    }\n    return prev.apply(ctx, arguments);\n  };\n}\n\nmodule.exports = {\n  implementation: HTMLCanvasElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}