{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport { updateCompanyArr } from '../../../redux/actions/companies';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { alertUnsavedChanges } from '../../../components/form/utils/handleUnsavedChanges';\nimport { getInputValueByLabel } from '../../../components/form/utils/customFormQueries';\nimport { date_YYYY_MM, date_DD_MM_YYYY } from '../../../components/calendar/dates';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass NewInvoice extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      invoice: null\n    };\n    this.handleChanges = this.handleChanges.bind(this);\n    this.resestInvoiceState = this.resestInvoiceState.bind(this);\n    this.setAllTasksToExcluded = this.setAllTasksToExcluded.bind(this);\n  }\n\n  resestInvoiceState() {\n    //on leave clear invoice permanent state\n    //no changes or submit or page leave\n    this.props.setInvoiceInitState({\n      bg_color: localStorage.invoice_bg || 'blue',\n      text_color: localStorage.invoice_txt || 'white',\n      profile: [],\n      company: [],\n      tasks: [],\n      discount: 0,\n      tax: 0,\n      fees: 0,\n      notes: 'Thank you for your business.',\n      currency: ''\n    });\n  }\n\n  async setAllTasksToExcluded(tasksArr) {\n    console.log(tasksArr, this.props.company.tasks);\n    let tasks = tasksArr.map(task => {\n      task.addToInvoice = false;\n      return task;\n    });\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      await axios.post(`/api/companies/task/${this.props.company._id}`, JSON.stringify(tasks), config);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  componentDidMount() {\n    //set current tabs for handling unsaved changes redirection\n    this.setState({ ...this.state,\n      tabs: window.location.search\n    });\n    const searchArr = window.location.search.split('&');\n    console.log(searchArr);\n\n    if (searchArr.length < 2) {\n      //invoice num #\n      let company_abbr = getInputValueByLabel(this.props.company.details, 'Name').split(' ');\n\n      if (company_abbr.length > 1 && company_abbr[1]) {\n        company_abbr = company_abbr.map(el => el[0].toUpperCase()).join('');\n      } else {\n        company_abbr = company_abbr[0].slice(0, 3).toUpperCase();\n      }\n\n      let invoices_num = '1';\n      if (this.props.company.invoices) invoices_num = String(this.props.company.invoices.length + 1);\n\n      while (invoices_num.length < 5) {\n        invoices_num = '0' + invoices_num;\n      }\n\n      let saved_as = company_abbr + '-';\n      saved_as += date_YYYY_MM(new Date()) + '-';\n      saved_as += invoices_num; //generate due date in 14 days\n\n      const TWO_WEEKS = 1.21e9;\n      let due_date = date_DD_MM_YYYY(new Date().getTime() + TWO_WEEKS); //a new invoice\n\n      let invoiceInitState = {\n        _id: uuidv4(),\n        created_at: new Date(),\n        saved_as,\n        issue_date: date_DD_MM_YYYY(new Date()),\n        due_date,\n        bg_color: localStorage.invoice_bg || 'blue',\n        text_color: localStorage.invoice_txt || 'white',\n        profile: JSON.parse(JSON.stringify(this.props.profile.details)),\n        company: JSON.parse(JSON.stringify(this.props.company.details)),\n        tasks: [],\n        discount: 0,\n        tax: 0,\n        fees: 0,\n        notes: 'Thank you for your business.',\n        currency: ''\n      }; //set init state for comparison on component unmounting\n\n      this.setState({\n        invoice: JSON.parse(JSON.stringify(invoiceInitState))\n      }); //set redux state\n\n      this.props.setInvoiceInitState(invoiceInitState);\n    }\n\n    if (searchArr[1]) {\n      //updating an existing invoice\n      //?updating=...\n      //downlaoding an existing invoice\n      //?download=...\n      const invoice_ID = searchArr[1].slice(9);\n      const invoiceToLoad = this.props.company.invoices.find(invoice => invoice._id === invoice_ID); //set component init state\n\n      this.setState({\n        invoice: JSON.parse(JSON.stringify(invoiceToLoad))\n      }); //set redux state\n\n      this.props.setInvoiceInitState(invoiceToLoad);\n\n      if (!invoiceToLoad) {\n        this.props.history.push(`/dashboard/companies/${this.props.company._id}?tab=invoices`);\n      }\n\n      if (invoiceToLoad) {\n        //add invoice tasks to existing tasks of the current company\n        const tasksArrIncInvoiceTasks = [...invoiceToLoad.tasks, ...this.props.company.tasks];\n        this.props.updateCompanyArr('tasks', tasksArrIncInvoiceTasks, this.props.company._id);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    //auth err and logout won't trigger fun\n    if (this.props.session.authenticated) this.handleChanges();\n  }\n\n  handleChanges() {\n    //TASKS CAN BE AMENDED/UPDATED IN FORM  WITH EFECT ON DB HENCE NEED TO CHECK INIT STATE AGAINST COMPANY.TASKS NOT INVOICE.TASKS!!!\n    //update invoice state of added tasks before comaring changes on leave\n    this.props.invoice.tasks = this.props.company.tasks.filter(t => t.addToInvoice);\n    console.log(JSON.stringify(this.state.invoice) === JSON.stringify(this.props.invoice));\n    console.log('state:', this.state.invoice, 'redux', this.props.invoice); //remove tasks added on update\n\n    const initStateTasksIds = this.state.invoice.tasks.map(t => t._id);\n    const nonInvoiceTasks = this.props.company.tasks.filter(task => !initStateTasksIds.includes(task._id));\n    console.log(nonInvoiceTasks);\n    this.props.updateCompanyArr('tasks', nonInvoiceTasks, this.props.company._id);\n\n    const stateUpdate = () => {\n      //no changes detected\n      this.resestInvoiceState(); //if changes discarched update DB\n\n      if (JSON.stringify(this.state.invoice) !== JSON.stringify(this.props.invoice)) this.setAllTasksToExcluded(nonInvoiceTasks);\n    };\n\n    alertUnsavedChanges(this.state.invoice, this.props.invoice, `/dashboard/companies/${this.props.company._id}${this.state.tabs}`, stateUpdate, this.props.history);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"company-invoice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }\n    }, \"Create a new invoice.\"), /*#__PURE__*/React.createElement(InvoiceDoc, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(NewInvoiceSubmit, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nNewInvoice.propTypes = {\n  session: PropTypes.object,\n  profile: PropTypes.object,\n  company: PropTypes.object,\n  invoice: PropTypes.object,\n  updateCompanyArr: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  session: state.session,\n  profile: state.profile,\n  company: state.companies.find(c => c._id === state.session.currentCompany),\n  invoice: state.invoice\n});\n\nconst mapDispatchToProps = {\n  setInvoiceInitState,\n  updateCompanyArr\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(NewInvoice));","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js"],"names":["React","Component","PropTypes","axios","withRouter","connect","setInvoiceInitState","updateCompanyArr","InvoiceDoc","NewInvoiceSubmit","alertUnsavedChanges","getInputValueByLabel","date_YYYY_MM","date_DD_MM_YYYY","v4","uuidv4","NewInvoice","constructor","props","state","invoice","handleChanges","bind","resestInvoiceState","setAllTasksToExcluded","bg_color","localStorage","invoice_bg","text_color","invoice_txt","profile","company","tasks","discount","tax","fees","notes","currency","tasksArr","console","log","map","task","addToInvoice","config","headers","post","_id","JSON","stringify","err","componentDidMount","setState","tabs","window","location","search","searchArr","split","length","company_abbr","details","el","toUpperCase","join","slice","invoices_num","invoices","String","saved_as","Date","TWO_WEEKS","due_date","getTime","invoiceInitState","created_at","issue_date","parse","invoice_ID","invoiceToLoad","find","history","push","tasksArrIncInvoiceTasks","componentWillUnmount","session","authenticated","filter","t","initStateTasksIds","nonInvoiceTasks","includes","stateUpdate","render","propTypes","object","func","mapStateToProps","companies","c","currentCompany","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport { updateCompanyArr } from '../../../redux/actions/companies';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { alertUnsavedChanges } from '../../../components/form/utils/handleUnsavedChanges';\nimport { getInputValueByLabel } from '../../../components/form/utils/customFormQueries';\nimport {\n    date_YYYY_MM,\n    date_DD_MM_YYYY,\n} from '../../../components/calendar/dates';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass NewInvoice extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            invoice: null,\n        };\n        this.handleChanges = this.handleChanges.bind(this);\n        this.resestInvoiceState = this.resestInvoiceState.bind(this);\n        this.setAllTasksToExcluded = this.setAllTasksToExcluded.bind(this);\n    }\n\n    resestInvoiceState() {\n        //on leave clear invoice permanent state\n        //no changes or submit or page leave\n        this.props.setInvoiceInitState({\n            bg_color: localStorage.invoice_bg || 'blue',\n            text_color: localStorage.invoice_txt || 'white',\n            profile: [],\n            company: [],\n            tasks: [],\n            discount: 0,\n            tax: 0,\n            fees: 0,\n            notes: 'Thank you for your business.',\n            currency: '',\n        });\n    }\n    async setAllTasksToExcluded(tasksArr) {\n        console.log(tasksArr, this.props.company.tasks);\n        let tasks = tasksArr.map((task) => {\n            task.addToInvoice = false;\n            return task;\n        });\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            await axios.post(\n                `/api/companies/task/${this.props.company._id}`,\n                JSON.stringify(tasks),\n                config\n            );\n        } catch (err) {\n            console.log(err);\n        }\n    }\n    componentDidMount() {\n        //set current tabs for handling unsaved changes redirection\n        this.setState({ ...this.state, tabs: window.location.search });\n        const searchArr = window.location.search.split('&');\n        console.log(searchArr);\n        if (searchArr.length < 2) {\n            //invoice num #\n            let company_abbr = getInputValueByLabel(\n                this.props.company.details,\n                'Name'\n            ).split(' ');\n            if (company_abbr.length > 1 && company_abbr[1]) {\n                company_abbr = company_abbr\n                    .map((el) => el[0].toUpperCase())\n                    .join('');\n            } else {\n                company_abbr = company_abbr[0].slice(0, 3).toUpperCase();\n            }\n            let invoices_num = '1';\n            if (this.props.company.invoices)\n                invoices_num = String(this.props.company.invoices.length + 1);\n            while (invoices_num.length < 5) {\n                invoices_num = '0' + invoices_num;\n            }\n            let saved_as = company_abbr + '-';\n            saved_as += date_YYYY_MM(new Date()) + '-';\n            saved_as += invoices_num;\n            //generate due date in 14 days\n            const TWO_WEEKS = 1.21e9;\n            let due_date = date_DD_MM_YYYY(new Date().getTime() + TWO_WEEKS);\n            //a new invoice\n            let invoiceInitState = {\n                _id: uuidv4(),\n                created_at: new Date(),\n                saved_as,\n                issue_date: date_DD_MM_YYYY(new Date()),\n                due_date,\n                bg_color: localStorage.invoice_bg || 'blue',\n                text_color: localStorage.invoice_txt || 'white',\n                profile: JSON.parse(JSON.stringify(this.props.profile.details)),\n                company: JSON.parse(JSON.stringify(this.props.company.details)),\n                tasks: [],\n                discount: 0,\n                tax: 0,\n                fees: 0,\n                notes: 'Thank you for your business.',\n                currency: '',\n            };\n            //set init state for comparison on component unmounting\n            this.setState({\n                invoice: JSON.parse(JSON.stringify(invoiceInitState)),\n            });\n\n            //set redux state\n            this.props.setInvoiceInitState(invoiceInitState);\n        }\n\n        if (searchArr[1]) {\n            //updating an existing invoice\n            //?updating=...\n            //downlaoding an existing invoice\n            //?download=...\n            const invoice_ID = searchArr[1].slice(9);\n            const invoiceToLoad = this.props.company.invoices.find(\n                (invoice) => invoice._id === invoice_ID\n            );\n            //set component init state\n            this.setState({\n                invoice: JSON.parse(JSON.stringify(invoiceToLoad)),\n            });\n            //set redux state\n            this.props.setInvoiceInitState(invoiceToLoad);\n            if (!invoiceToLoad) {\n                this.props.history.push(\n                    `/dashboard/companies/${this.props.company._id}?tab=invoices`\n                );\n            }\n            if (invoiceToLoad) {\n                //add invoice tasks to existing tasks of the current company\n                const tasksArrIncInvoiceTasks = [\n                    ...invoiceToLoad.tasks,\n                    ...this.props.company.tasks,\n                ];\n                this.props.updateCompanyArr(\n                    'tasks',\n                    tasksArrIncInvoiceTasks,\n                    this.props.company._id\n                );\n            }\n        }\n    }\n    componentWillUnmount() {\n        //auth err and logout won't trigger fun\n        if (this.props.session.authenticated) this.handleChanges();\n    }\n    handleChanges() {\n        //TASKS CAN BE AMENDED/UPDATED IN FORM  WITH EFECT ON DB HENCE NEED TO CHECK INIT STATE AGAINST COMPANY.TASKS NOT INVOICE.TASKS!!!\n        //update invoice state of added tasks before comaring changes on leave\n        this.props.invoice.tasks = this.props.company.tasks.filter(\n            (t) => t.addToInvoice\n        );\n        console.log(\n            JSON.stringify(this.state.invoice) ===\n                JSON.stringify(this.props.invoice)\n        );\n        console.log('state:', this.state.invoice, 'redux', this.props.invoice);\n        //remove tasks added on update\n        const initStateTasksIds = this.state.invoice.tasks.map((t) => t._id);\n        const nonInvoiceTasks = this.props.company.tasks.filter(\n            (task) => !initStateTasksIds.includes(task._id)\n        );\n        console.log(nonInvoiceTasks);\n        this.props.updateCompanyArr(\n            'tasks',\n            nonInvoiceTasks,\n            this.props.company._id\n        );\n        const stateUpdate = () => {\n            //no changes detected\n            this.resestInvoiceState();\n            //if changes discarched update DB\n            if (\n                JSON.stringify(this.state.invoice) !==\n                JSON.stringify(this.props.invoice)\n            )\n                this.setAllTasksToExcluded(nonInvoiceTasks);\n        };\n        alertUnsavedChanges(\n            this.state.invoice,\n            this.props.invoice,\n            `/dashboard/companies/${this.props.company._id}${this.state.tabs}`,\n            stateUpdate,\n            this.props.history\n        );\n    }\n    render() {\n        return (\n            <section className='company-invoice'>\n                <h2 className='sr-only'>Create a new invoice.</h2>\n                <InvoiceDoc />\n                <NewInvoiceSubmit />\n            </section>\n        );\n    }\n}\n\nNewInvoice.propTypes = {\n    session: PropTypes.object,\n    profile: PropTypes.object,\n    company: PropTypes.object,\n    invoice: PropTypes.object,\n    updateCompanyArr: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n    session: state.session,\n    profile: state.profile,\n    company: state.companies.find(\n        (c) => c._id === state.session.currentCompany\n    ),\n    invoice: state.invoice,\n});\n\nconst mapDispatchToProps = {\n    setInvoiceInitState,\n    updateCompanyArr,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(NewInvoice));\n"]},"metadata":{},"sourceType":"module"}