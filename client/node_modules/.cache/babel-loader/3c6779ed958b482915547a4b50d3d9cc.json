{"ast":null,"code":"\"use strict\";\n\nconst whatwgURL = require(\"whatwg-url\");\n\nconst arrayEqual = require(\"array-equal\");\n\nconst notImplemented = require(\"../../browser/not-implemented.js\");\n\nconst reportException = require(\"../helpers/runtime-script-errors.js\");\n\nconst idlUtils = require(\"../generated/utils.js\");\n\nexports.evaluateJavaScriptURL = (window, urlRecord) => {\n  const urlString = whatwgURL.serializeURL(urlRecord);\n  const scriptSource = whatwgURL.percentDecode(Buffer.from(urlString)).toString();\n\n  if (window._runScripts === \"dangerously\") {\n    try {\n      return window.eval(scriptSource);\n    } catch (e) {\n      reportException(window, e, urlString);\n    }\n  }\n\n  return undefined;\n}; // https://html.spec.whatwg.org/#navigating-across-documents\n\n\nexports.navigate = (window, newURL, flags) => {\n  // This is NOT a spec-compliant implementation of navigation in any way. It implements a few selective steps that\n  // are nice for jsdom users, regarding hash changes and JavaScript URLs. Full navigation support is being worked on\n  // and will likely require some additional hooks to be implemented.\n  const document = idlUtils.implForWrapper(window._document);\n  const currentURL = document._URL;\n\n  if (!flags.reloadTriggered && urlEquals(currentURL, newURL, {\n    excludeFragments: true\n  })) {\n    if (newURL.fragment !== currentURL.fragment) {\n      navigateToFragment(window, newURL, flags);\n    }\n\n    return;\n  } // NOT IMPLEMENTED: Prompt to unload the active document of browsingContext.\n  // NOT IMPLEMENTED: form submission algorithm\n  // const navigationType = 'other';\n  // NOT IMPLEMENTED: if resource is a response...\n\n\n  if (newURL.scheme === \"javascript\") {\n    window.setTimeout(() => {\n      const result = exports.evaluateJavaScriptURL(window, newURL);\n\n      if (typeof result === \"string\") {\n        notImplemented(\"string results from 'javascript:' URLs\", window);\n      }\n    }, 0);\n    return;\n  }\n\n  navigateFetch(window);\n}; // https://html.spec.whatwg.org/#scroll-to-fragid\n\n\nfunction navigateToFragment(window, newURL, flags) {\n  const document = idlUtils.implForWrapper(window._document);\n\n  window._sessionHistory.clearHistoryTraversalTasks();\n\n  if (!flags.replacement) {\n    // handling replacement=true here deviates from spec, but matches real browser behaviour\n    // see https://github.com/whatwg/html/issues/2796 for spec bug\n    window._sessionHistory.removeAllEntriesAfterCurrentEntry();\n  }\n\n  const newEntry = {\n    document,\n    url: newURL\n  };\n\n  window._sessionHistory.addEntryAfterCurrentEntry(newEntry);\n\n  window._sessionHistory.traverseHistory(newEntry, {\n    nonBlockingEvents: true,\n    replacement: flags.replacement\n  });\n} // https://html.spec.whatwg.org/#process-a-navigate-fetch\n\n\nfunction navigateFetch(window) {\n  // TODO:\n  notImplemented(\"navigation (except hash changes)\", window);\n}\n\nfunction urlEquals(a, b, flags) {\n  if (a.scheme !== b.scheme || a.username !== b.username || a.password !== b.password || a.host !== b.host || a.port !== b.port || !arrayEqual(a.path, b.path) || a.query !== b.query || // Omitted per spec: url.fragment !== this._url.fragment ||\n  a.cannotBeABaseURL !== b.cannotBeABaseURL) {\n    return false;\n  }\n\n  return flags.excludeFragments || a.fragment === b.fragment;\n}","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/window/navigation.js"],"names":["whatwgURL","require","arrayEqual","notImplemented","reportException","idlUtils","exports","evaluateJavaScriptURL","window","urlRecord","urlString","serializeURL","scriptSource","percentDecode","Buffer","from","toString","_runScripts","eval","e","undefined","navigate","newURL","flags","document","implForWrapper","_document","currentURL","_URL","reloadTriggered","urlEquals","excludeFragments","fragment","navigateToFragment","scheme","setTimeout","result","navigateFetch","_sessionHistory","clearHistoryTraversalTasks","replacement","removeAllEntriesAfterCurrentEntry","newEntry","url","addEntryAfterCurrentEntry","traverseHistory","nonBlockingEvents","a","b","username","password","host","port","path","query","cannotBeABaseURL"],"mappings":"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","sourcesContent":["\"use strict\";\nconst whatwgURL = require(\"whatwg-url\");\nconst arrayEqual = require(\"array-equal\");\nconst notImplemented = require(\"../../browser/not-implemented.js\");\nconst reportException = require(\"../helpers/runtime-script-errors.js\");\nconst idlUtils = require(\"../generated/utils.js\");\n\nexports.evaluateJavaScriptURL = (window, urlRecord) => {\n  const urlString = whatwgURL.serializeURL(urlRecord);\n  const scriptSource = whatwgURL.percentDecode(Buffer.from(urlString)).toString();\n  if (window._runScripts === \"dangerously\") {\n    try {\n      return window.eval(scriptSource);\n    } catch (e) {\n      reportException(window, e, urlString);\n    }\n  }\n  return undefined;\n};\n\n// https://html.spec.whatwg.org/#navigating-across-documents\nexports.navigate = (window, newURL, flags) => {\n  // This is NOT a spec-compliant implementation of navigation in any way. It implements a few selective steps that\n  // are nice for jsdom users, regarding hash changes and JavaScript URLs. Full navigation support is being worked on\n  // and will likely require some additional hooks to be implemented.\n\n  const document = idlUtils.implForWrapper(window._document);\n  const currentURL = document._URL;\n\n  if (!flags.reloadTriggered && urlEquals(currentURL, newURL, { excludeFragments: true })) {\n    if (newURL.fragment !== currentURL.fragment) {\n      navigateToFragment(window, newURL, flags);\n    }\n    return;\n  }\n\n  // NOT IMPLEMENTED: Prompt to unload the active document of browsingContext.\n\n  // NOT IMPLEMENTED: form submission algorithm\n  // const navigationType = 'other';\n\n  // NOT IMPLEMENTED: if resource is a response...\n  if (newURL.scheme === \"javascript\") {\n    window.setTimeout(() => {\n      const result = exports.evaluateJavaScriptURL(window, newURL);\n      if (typeof result === \"string\") {\n        notImplemented(\"string results from 'javascript:' URLs\", window);\n      }\n    }, 0);\n    return;\n  }\n  navigateFetch(window);\n};\n\n// https://html.spec.whatwg.org/#scroll-to-fragid\nfunction navigateToFragment(window, newURL, flags) {\n  const document = idlUtils.implForWrapper(window._document);\n\n  window._sessionHistory.clearHistoryTraversalTasks();\n\n  if (!flags.replacement) {\n    // handling replacement=true here deviates from spec, but matches real browser behaviour\n    // see https://github.com/whatwg/html/issues/2796 for spec bug\n    window._sessionHistory.removeAllEntriesAfterCurrentEntry();\n  }\n  const newEntry = { document, url: newURL };\n  window._sessionHistory.addEntryAfterCurrentEntry(newEntry);\n  window._sessionHistory.traverseHistory(newEntry, { nonBlockingEvents: true, replacement: flags.replacement });\n}\n\n// https://html.spec.whatwg.org/#process-a-navigate-fetch\nfunction navigateFetch(window) {\n  // TODO:\n  notImplemented(\"navigation (except hash changes)\", window);\n}\n\nfunction urlEquals(a, b, flags) {\n  if (a.scheme !== b.scheme ||\n      a.username !== b.username ||\n      a.password !== b.password ||\n      a.host !== b.host ||\n      a.port !== b.port ||\n      !arrayEqual(a.path, b.path) ||\n      a.query !== b.query ||\n      // Omitted per spec: url.fragment !== this._url.fragment ||\n      a.cannotBeABaseURL !== b.cannotBeABaseURL) {\n    return false;\n  }\n  return flags.excludeFragments || a.fragment === b.fragment;\n}\n"]},"metadata":{},"sourceType":"script"}