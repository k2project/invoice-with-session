{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/form/forms/TaskForm.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getAllCompanies } from '../../../redux/actions/companies';\nimport FormInput from '../components/FormInput';\nimport FormErrorsDisplay from '../components/FormErrorsDisplay';\nimport { formErrorsStyling } from '../utils/formFuns';\nimport { validateQtyInputToNum, validateRateInputToObj, validateTaxInputValueToNum, toNumberWithCommas } from '../utils/validations';\nimport { setCurrentTask } from '../../../redux/actions/session';\nexport const TaskForm = ({\n  currentCompany,\n  getAllCompanies,\n  currentTask,\n  setCurrentTask,\n  tasks\n}) => {\n  const initState = {\n    description: '',\n    qty: 'N/A',\n    rate: 'N/A',\n    tax: '0%',\n    errors: []\n  };\n  const searchArr = useLocation().search.split('&');\n  const tab = searchArr[0].slice(5);\n  const [formData, setFormData] = useState(initState);\n  useEffect(() => {\n    if (currentTask) {\n      setFormData({ ...currentTask,\n        errors: []\n      });\n    } else {\n      //clear form on curent task deletion\n      setFormData(initState);\n    }\n  }, [currentTask]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    let {\n      description,\n      qty,\n      rate,\n      tax\n    } = formData;\n    const non_numerical_inputs = ['FREE', 'N/A'];\n    const errors = [];\n    description = description.trim();\n\n    if (!description) {\n      const error = {\n        param: 'description',\n        msg: 'Please describe the task.'\n      };\n      errors.push(error);\n    } //validate qty input value\n\n\n    qty = qty.trim();\n    const qty_numerical_value = validateQtyInputToNum(qty);\n\n    if (!non_numerical_inputs.includes(qty.toUpperCase()) && !qty_numerical_value) {\n      const error = {\n        param: 'qty',\n        msg: \"Please enter Qty value in one of the following formats: 1,000.50, 1 , 3 items, FREE or N/A. Qty mustn't be zero.\"\n      };\n      errors.push(error);\n    } //validate rate input\n    //returns {currency, numValue}\n\n\n    rate = rate.trim();\n    const rate_obj = validateRateInputToObj(rate);\n\n    if (!non_numerical_inputs.includes(rate.toUpperCase()) && !rate_obj) {\n      const error = {\n        param: 'rate',\n        msg: 'Please enter Rate value in one of the following formats: 1,000 PLN, Â£ 10.50 , FREE or N/A.'\n      };\n      errors.push(error);\n    } else {\n      if (rate_obj) {\n        //check if currency exist\n        if (!rate_obj.currency) {\n          const error = {\n            param: 'rate',\n            msg: 'Please provide some form of currency for the entered rate value.'\n          };\n          errors.push(error);\n        } //check if different currency has been used\n\n\n        const different_currencies = [];\n        tasks.forEach(el => {\n          if (el.amount.currency && el.amount.currency !== rate_obj.currency) {\n            different_currencies.push(1);\n          }\n        });\n\n        if (different_currencies.length > 0) {\n          const error = {\n            param: 'rate',\n            msg: 'Please provide the same currency for all rate entries.'\n          };\n          errors.push(error);\n        }\n\n        rate = rate_obj.currency + toNumberWithCommas(rate_obj.numValue);\n      }\n    } //validate tax input\n\n\n    tax = tax.trim();\n    const tax_numerical_value = validateTaxInputValueToNum(tax);\n\n    if (!tax_numerical_value && tax_numerical_value !== 0) {\n      const error = {\n        param: 'tax',\n        msg: 'Please enter the Tax value in one of the following formats: 0% - 100% or 0-100'\n      };\n      errors.push(error);\n    } else {\n      //in case input is without %\n      tax = tax_numerical_value + '%';\n    } //check for a rate value without qty value\n    //for rate === string, amount === string\n\n\n    if (rate_obj && non_numerical_inputs.includes(qty.toUpperCase())) {\n      const error = {\n        param: 'qty',\n        msg: \"Please item's provide quantity for the entered rate value.\"\n      };\n      errors.push(error);\n    } //calculate taxed and net amount\n\n\n    let amount;\n\n    if (rate_obj && qty_numerical_value) {\n      //net : excluding vat\n      const amountNet = rate_obj.numValue * qty_numerical_value;\n      let amountTaxed = 0;\n      if (tax_numerical_value) amountTaxed = amountNet * (tax_numerical_value / 100);\n      amountTaxed = amountTaxed.toFixed(2);\n      amountTaxed = +amountTaxed;\n      amount = {\n        currency: rate_obj.currency,\n        amountNet,\n        amountTaxed\n      };\n    } else {\n      // for N/A and FREE values\n      amount = rate.toUpperCase();\n    }\n\n    if (errors.length > 0) {\n      setFormData({ ...formData,\n        errors\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }; //create task\n\n      const task = {\n        description,\n        qty: qty || 'N/A',\n        rate: rate || 'N/A',\n        tax: tax || '0%',\n        amount\n      };\n      task._id = currentTask ? currentTask._id : uuidv4();\n      const addToInvoiceForNewEntry = tab === 'invoice' ? true : false;\n      task.addToInvoice = currentTask ? currentTask.addToInvoice : addToInvoiceForNewEntry;\n      task.createdAt = currentTask ? currentTask.createdAt : new Date();\n      const indexOfTask = Number(tasks.findIndex(task => task._id === currentTask._id));\n\n      if (currentTask) {\n        tasks.splice(indexOfTask, 1, task);\n      } else {\n        tasks.push(task);\n      }\n\n      await axios.post(`/api/companies/task/${currentCompany}`, JSON.stringify(tasks), config);\n      getAllCompanies();\n      setCurrentTask(null); //reset state\n\n      setFormData(initState);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    formErrorsStyling(formData.errors);\n  }, [formData.errors]);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"task-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 21\n    }\n  }, \"Add a new task to bill for.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 25\n    }\n  }, \" *Required\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-3-cls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"col-span-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    form: {\n      formData,\n      setFormData\n    },\n    name: \"description\",\n    size: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 29\n    }\n  }, \"Description*\"))), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    form: {\n      formData,\n      setFormData\n    },\n    name: \"qty\",\n    size: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 29\n    }\n  }, \"Qty* \"), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 29\n    }\n  }, \"(e.g. 1, 2.5hr, N/A, Free)\"))), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 21\n    }\n  }, ' ', /*#__PURE__*/React.createElement(FormInput, {\n    form: {\n      formData,\n      setFormData\n    },\n    name: \"rate\",\n    size: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 29\n    }\n  }, \"Rate* \"), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 29\n    }\n  }, \"(e.g. \\xA311, N/A, Free)\")))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn--info\",\n    onMouseDown: e => e.preventDefault(),\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 17\n    }\n  }, currentTask ? 'Update ' : 'Add ', \" Item\"), currentTask && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn--grey\",\n    onMouseDown: e => e.preventDefault(),\n    onClick: () => setCurrentTask(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 21\n    }\n  }, \"Cancel\")), formData.errors.length > 0 && /*#__PURE__*/React.createElement(FormErrorsDisplay, {\n    errors: formData.errors,\n    label: \"Add custom field form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 17\n    }\n  }));\n};\nTaskForm.propTypes = {\n  company: PropTypes.object,\n  getAllCompanies: PropTypes.func,\n  tasks: PropTypes.array\n};\n\nconst mapStateToProps = state => ({\n  currentCompany: state.session.currentCompany,\n  currentTask: state.session.currentTask,\n  tasks: state.companies.find(c => c._id === state.session.currentCompany).tasks\n});\n\nconst mapDispatchToProps = {\n  getAllCompanies,\n  setCurrentTask\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm);","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/form/forms/TaskForm.js"],"names":["React","useState","useEffect","useLocation","axios","v4","uuidv4","PropTypes","connect","getAllCompanies","FormInput","FormErrorsDisplay","formErrorsStyling","validateQtyInputToNum","validateRateInputToObj","validateTaxInputValueToNum","toNumberWithCommas","setCurrentTask","TaskForm","currentCompany","currentTask","tasks","initState","description","qty","rate","tax","errors","searchArr","search","split","tab","slice","formData","setFormData","handleSubmit","e","preventDefault","non_numerical_inputs","trim","error","param","msg","push","qty_numerical_value","includes","toUpperCase","rate_obj","currency","different_currencies","forEach","el","amount","length","numValue","tax_numerical_value","amountNet","amountTaxed","toFixed","config","headers","task","_id","addToInvoiceForNewEntry","addToInvoice","createdAt","Date","indexOfTask","Number","findIndex","splice","post","JSON","stringify","err","console","log","propTypes","company","object","func","array","mapStateToProps","state","session","companies","find","c","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getAllCompanies } from '../../../redux/actions/companies';\nimport FormInput from '../components/FormInput';\nimport FormErrorsDisplay from '../components/FormErrorsDisplay';\nimport { formErrorsStyling } from '../utils/formFuns';\nimport {\n    validateQtyInputToNum,\n    validateRateInputToObj,\n    validateTaxInputValueToNum,\n    toNumberWithCommas,\n} from '../utils/validations';\nimport { setCurrentTask } from '../../../redux/actions/session';\n\nexport const TaskForm = ({\n    currentCompany,\n    getAllCompanies,\n    currentTask,\n    setCurrentTask,\n    tasks,\n}) => {\n    const initState = {\n        description: '',\n        qty: 'N/A',\n        rate: 'N/A',\n        tax: '0%',\n        errors: [],\n    };\n    const searchArr = useLocation().search.split('&');\n    const tab = searchArr[0].slice(5);\n    const [formData, setFormData] = useState(initState);\n    useEffect(() => {\n        if (currentTask) {\n            setFormData({ ...currentTask, errors: [] });\n        } else {\n            //clear form on curent task deletion\n            setFormData(initState);\n        }\n    }, [currentTask]);\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        let { description, qty, rate, tax } = formData;\n        const non_numerical_inputs = ['FREE', 'N/A'];\n        const errors = [];\n\n        description = description.trim();\n        if (!description) {\n            const error = {\n                param: 'description',\n                msg: 'Please describe the task.',\n            };\n            errors.push(error);\n        }\n        //validate qty input value\n        qty = qty.trim();\n        const qty_numerical_value = validateQtyInputToNum(qty);\n        if (\n            !non_numerical_inputs.includes(qty.toUpperCase()) &&\n            !qty_numerical_value\n        ) {\n            const error = {\n                param: 'qty',\n                msg:\n                    \"Please enter Qty value in one of the following formats: 1,000.50, 1 , 3 items, FREE or N/A. Qty mustn't be zero.\",\n            };\n            errors.push(error);\n        }\n        //validate rate input\n        //returns {currency, numValue}\n        rate = rate.trim();\n        const rate_obj = validateRateInputToObj(rate);\n        if (!non_numerical_inputs.includes(rate.toUpperCase()) && !rate_obj) {\n            const error = {\n                param: 'rate',\n                msg:\n                    'Please enter Rate value in one of the following formats: 1,000 PLN, Â£ 10.50 , FREE or N/A.',\n            };\n            errors.push(error);\n        } else {\n            if (rate_obj) {\n                //check if currency exist\n                if (!rate_obj.currency) {\n                    const error = {\n                        param: 'rate',\n                        msg:\n                            'Please provide some form of currency for the entered rate value.',\n                    };\n                    errors.push(error);\n                }\n                //check if different currency has been used\n                const different_currencies = [];\n                tasks.forEach((el) => {\n                    if (\n                        el.amount.currency &&\n                        el.amount.currency !== rate_obj.currency\n                    ) {\n                        different_currencies.push(1);\n                    }\n                });\n                if (different_currencies.length > 0) {\n                    const error = {\n                        param: 'rate',\n                        msg:\n                            'Please provide the same currency for all rate entries.',\n                    };\n                    errors.push(error);\n                }\n                rate =\n                    rate_obj.currency + toNumberWithCommas(rate_obj.numValue);\n            }\n        }\n\n        //validate tax input\n        tax = tax.trim();\n        const tax_numerical_value = validateTaxInputValueToNum(tax);\n        if (!tax_numerical_value && tax_numerical_value !== 0) {\n            const error = {\n                param: 'tax',\n                msg:\n                    'Please enter the Tax value in one of the following formats: 0% - 100% or 0-100',\n            };\n            errors.push(error);\n        } else {\n            //in case input is without %\n            tax = tax_numerical_value + '%';\n        }\n        //check for a rate value without qty value\n        //for rate === string, amount === string\n        if (rate_obj && non_numerical_inputs.includes(qty.toUpperCase())) {\n            const error = {\n                param: 'qty',\n                msg:\n                    \"Please item's provide quantity for the entered rate value.\",\n            };\n            errors.push(error);\n        }\n        //calculate taxed and net amount\n        let amount;\n        if (rate_obj && qty_numerical_value) {\n            //net : excluding vat\n            const amountNet = rate_obj.numValue * qty_numerical_value;\n            let amountTaxed = 0;\n            if (tax_numerical_value)\n                amountTaxed = amountNet * (tax_numerical_value / 100);\n            amountTaxed = amountTaxed.toFixed(2);\n            amountTaxed = +amountTaxed;\n            amount = {\n                currency: rate_obj.currency,\n                amountNet,\n                amountTaxed,\n            };\n        } else {\n            // for N/A and FREE values\n            amount = rate.toUpperCase();\n        }\n\n        if (errors.length > 0) {\n            setFormData({\n                ...formData,\n                errors,\n            });\n            return;\n        }\n\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            //create task\n            const task = {\n                description,\n                qty: qty || 'N/A',\n                rate: rate || 'N/A',\n                tax: tax || '0%',\n                amount,\n            };\n            task._id = currentTask ? currentTask._id : uuidv4();\n\n            const addToInvoiceForNewEntry = tab === 'invoice' ? true : false;\n            task.addToInvoice = currentTask\n                ? currentTask.addToInvoice\n                : addToInvoiceForNewEntry;\n            task.createdAt = currentTask ? currentTask.createdAt : new Date();\n\n            const indexOfTask = Number(\n                tasks.findIndex((task) => task._id === currentTask._id)\n            );\n            if (currentTask) {\n                tasks.splice(indexOfTask, 1, task);\n            } else {\n                tasks.push(task);\n            }\n\n            await axios.post(\n                `/api/companies/task/${currentCompany}`,\n                JSON.stringify(tasks),\n                config\n            );\n            getAllCompanies();\n            setCurrentTask(null);\n            //reset state\n            setFormData(initState);\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        formErrorsStyling(formData.errors);\n    }, [formData.errors]);\n    return (\n        <form className='task-form' onSubmit={handleSubmit}>\n            <fieldset>\n                <legend>\n                    <b>Add a new task to bill for.</b>\n                    <p>\n                        <small> *Required</small>\n                    </p>\n                </legend>\n                <div className='grid-3-cls'>\n                    <span className='col-span-3'>\n                        <FormInput\n                            form={{ formData, setFormData }}\n                            name='description'\n                            size='auto'\n                        >\n                            <b>Description*</b>\n                        </FormInput>\n                    </span>\n                    <span>\n                        <FormInput\n                            form={{ formData, setFormData }}\n                            name='qty'\n                            size='auto'\n                        >\n                            <b>Qty* </b>\n                            <small>(e.g. 1, 2.5hr, N/A, Free)</small>\n                        </FormInput>\n                    </span>\n                    <span>\n                        {' '}\n                        <FormInput\n                            form={{ formData, setFormData }}\n                            name='rate'\n                            size='auto'\n                        >\n                            <b>Rate* </b>\n                            <small>(e.g. Â£11, N/A, Free)</small>\n                        </FormInput>\n                    </span>\n                    {/* <span>\n                        <FormInput\n                            form={{ formData, setFormData }}\n                            name='tax'\n                            size='auto'\n                        >\n                            <b>Tax* </b>\n                            <small>(e.g. 10%, 10, N/A, Free)</small>\n                        </FormInput>\n                    </span> */}\n                </div>\n\n                <button\n                    className='btn btn--info'\n                    onMouseDown={(e) => e.preventDefault()}\n                    onClick={handleSubmit}\n                >\n                    {currentTask ? 'Update ' : 'Add '} Item\n                </button>\n                {currentTask && (\n                    <button\n                        className='btn btn--grey'\n                        onMouseDown={(e) => e.preventDefault()}\n                        onClick={() => setCurrentTask(null)}\n                    >\n                        Cancel\n                    </button>\n                )}\n            </fieldset>\n            {formData.errors.length > 0 && (\n                <FormErrorsDisplay\n                    errors={formData.errors}\n                    label='Add custom field form'\n                />\n            )}\n        </form>\n    );\n};\n\nTaskForm.propTypes = {\n    company: PropTypes.object,\n    getAllCompanies: PropTypes.func,\n    tasks: PropTypes.array,\n};\n\nconst mapStateToProps = (state) => ({\n    currentCompany: state.session.currentCompany,\n    currentTask: state.session.currentTask,\n    tasks: state.companies.find((c) => c._id === state.session.currentCompany)\n        .tasks,\n});\n\nconst mapDispatchToProps = {\n    getAllCompanies,\n    setCurrentTask,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm);\n"]},"metadata":{},"sourceType":"module"}