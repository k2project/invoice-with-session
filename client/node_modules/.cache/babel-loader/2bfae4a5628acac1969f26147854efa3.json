{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst DOMException = require(\"domexception\");\n\nconst Event = require(\"../generated/Event\");\n\nconst FileList = require(\"../generated/FileList\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nconst ValidityState = require(\"../generated/ValidityState\");\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst {\n  domSymbolTree,\n  cloningSteps\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  closest\n} = require(\"../helpers/traversal\");\n\nconst {\n  getLabelsForLabelable\n} = require(\"../helpers/form-controls\");\n\nconst {\n  isDisabled,\n  isValidEmailAddress,\n  isValidAbsoluteURL,\n  sanitizeValueByType\n} = require(\"../helpers/form-controls\");\n\nconst {\n  parseFloatingPointNumber,\n  asciiCaseInsensitiveMatch,\n  splitOnCommas\n} = require(\"../helpers/strings\");\n\nconst {\n  parseDateString,\n  parseLocalDateAndTimeString,\n  parseMonthString,\n  parseTimeString,\n  parseWeekString\n} = require(\"../helpers/dates-and-times\");\n\nconst filesSymbol = Symbol(\"files\");\nconst selectAllowedTypes = new Set([\"text\", \"search\", \"tel\", \"url\", \"password\", \"email\", \"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"color\", \"file\", \"number\"]);\nconst variableLengthSelectionAllowedTypes = new Set([\"text\", \"search\", \"tel\", \"url\", \"password\"]);\nconst maxMinStepTypes = new Set([\"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"number\", \"range\", \"datetime\"]); // https://html.spec.whatwg.org/multipage/input.html#concept-input-apply\n\nconst applicableTypesForAttribute = {\n  max: maxMinStepTypes,\n  min: maxMinStepTypes,\n  step: maxMinStepTypes,\n  pattern: new Set([\"text\", \"search\", \"tel\", \"url\", \"email\", \"password\"])\n};\n\nfunction allowSelect(type) {\n  return selectAllowedTypes.has(type.toLowerCase());\n}\n\nfunction allowVariableLengthSelection(type) {\n  return variableLengthSelectionAllowedTypes.has(type.toLowerCase());\n}\n\nconst valueAttributeDefaultMode = new Set([\"hidden\", \"submit\", \"image\", \"reset\", \"button\"]);\nconst valueAttributeDefaultOnMode = new Set([\"checkbox\", \"radio\"]);\n\nfunction valueAttributeMode(type) {\n  if (valueAttributeDefaultMode.has(type)) {\n    return \"default\";\n  }\n\n  if (valueAttributeDefaultOnMode.has(type)) {\n    return \"default/on\";\n  }\n\n  if (type === \"file\") {\n    return \"filename\";\n  }\n\n  return \"value\";\n} // Necessary because Date.UTC() treats year within [0, 99] as [1900, 1999].\n\n\nfunction getUTCMs(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, millisecond = 0) {\n  if (year > 99 || year < 0) {\n    return Date.UTC(year, month - 1, day, hour, minute, second, millisecond);\n  }\n\n  const d = new Date(0);\n  d.setUTCFullYear(year);\n  d.setUTCMonth(month - 1);\n  d.setUTCDate(day);\n  d.setUTCHours(hour);\n  d.setUTCMinutes(minute);\n  d.setUTCSeconds(second, millisecond);\n  return d.valueOf();\n}\n\nconst dayOfWeekRelMondayLUT = [-1, 0, 1, 2, 3, -3, -2];\nconst convertStringToNumberByTypeMap = new Map([[// https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number\n\"date\", input => {\n  const date = parseDateString(input);\n\n  if (date === null) {\n    return NaN;\n  }\n\n  return getUTCMs(date.year, date.month, date.day);\n}], [// https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number\n\"month\", input => {\n  const date = parseMonthString(input);\n\n  if (date === null) {\n    return NaN;\n  }\n\n  return (date.year - 1970) * 12 + (date.month - 1);\n}], [// https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-number\n\"week\", input => {\n  const date = parseWeekString(input);\n\n  if (date === null) {\n    return NaN;\n  }\n\n  const dateObj = new Date(getUTCMs(date.year)); // An HTML week starts on Monday, while 0 represents Sunday. Account for such.\n\n  const dayOfWeekRelMonday = dayOfWeekRelMondayLUT[dateObj.getUTCDay()];\n  return dateObj.setUTCDate(1 + 7 * (date.week - 1) - dayOfWeekRelMonday);\n}], [// https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-number\n\"time\", input => {\n  const time = parseTimeString(input);\n\n  if (time === null) {\n    return NaN;\n  }\n\n  return ((time.hour * 60 + time.minute) * 60 + time.second) * 1000 + time.millisecond;\n}], [// https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-string-number\n\"datetime-local\", input => {\n  const dateAndTime = parseLocalDateAndTimeString(input);\n\n  if (dateAndTime === null) {\n    return NaN;\n  }\n\n  const {\n    date: {\n      year,\n      month,\n      day\n    },\n    time: {\n      hour,\n      minute,\n      second,\n      millisecond\n    }\n  } = dateAndTime; // Doesn't quite matter whether or not UTC is used, since the offset from 1970-01-01 local time is returned.\n\n  return getUTCMs(year, month, day, hour, minute, second, millisecond);\n}], // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-string-number\n[\"number\", parseFloatingPointNumber], // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-string-number\n[\"range\", parseFloatingPointNumber]]);\n\nclass HTMLInputElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._selectionStart = this._selectionEnd = 0;\n    this._selectionDirection = \"none\";\n    this._value = null;\n    this._dirtyValue = false;\n    this._checkedness = false;\n    this._dirtyCheckedness = false; // This is used to implement the canceled activation steps for radio inputs:\n    // \"The canceled activation steps consist of setting the checkedness and the element's indeterminate IDL\n    // attribute back to the values they had before the pre-click activation steps were run.\"\n\n    this._preCheckedRadioState = null;\n    this.indeterminate = false;\n    this._customValidityErrorMessage = \"\";\n    this._labels = null;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-value-string-number\n\n\n  get _convertStringToNumber() {\n    return convertStringToNumberByTypeMap.get(this.type);\n  }\n\n  _getValue() {\n    return this._value;\n  }\n\n  _preClickActivationSteps() {\n    if (this.type === \"checkbox\") {\n      this.checked = !this.checked;\n    } else if (this.type === \"radio\") {\n      this._preCheckedRadioState = this.checked;\n      this.checked = true;\n    }\n  }\n\n  _canceledActivationSteps() {\n    if (this.type === \"checkbox\") {\n      this.checked = !this.checked;\n    } else if (this.type === \"radio\") {\n      if (this._preCheckedRadioState !== null) {\n        this.checked = this._preCheckedRadioState;\n        this._preCheckedRadioState = null;\n      }\n    }\n  }\n\n  _activationBehavior() {\n    if (isDisabled(this)) {\n      return;\n    }\n\n    if (this.type === \"checkbox\" || this.type === \"radio\" && !this._preCheckedRadioState) {\n      const inputEvent = Event.createImpl([\"input\", {\n        isTrusted: true,\n        bubbles: true,\n        cancelable: true\n      }], {});\n      this.dispatchEvent(inputEvent);\n      const changeEvent = Event.createImpl([\"change\", {\n        bubbles: true,\n        cancelable: true\n      }], {});\n      this.dispatchEvent(changeEvent);\n    } else if (this.type === \"submit\") {\n      const {\n        form\n      } = this;\n\n      if (form) {\n        form._doSubmit();\n      }\n    }\n  }\n\n  _attrModified(name) {\n    const wrapper = idlUtils.wrapperForImpl(this);\n\n    if (!this._dirtyValue && name === \"value\") {\n      this._value = sanitizeValueByType(this, wrapper.defaultValue);\n    }\n\n    if (!this._dirtyCheckedness && name === \"checked\") {\n      this._checkedness = wrapper.defaultChecked;\n\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n\n    if (name === \"name\" || name === \"type\") {\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n\n    super._attrModified.apply(this, arguments);\n  }\n\n  _formReset() {\n    const wrapper = idlUtils.wrapperForImpl(this);\n    this._value = sanitizeValueByType(this, wrapper.defaultValue);\n    this._dirtyValue = false;\n    this._checkedness = wrapper.defaultChecked;\n    this._dirtyCheckedness = false;\n\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  _changedFormOwner() {\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  get _otherRadioGroupElements() {\n    const wrapper = idlUtils.wrapperForImpl(this);\n    const root = this._radioButtonGroupRoot;\n\n    if (!root) {\n      return [];\n    }\n\n    const result = [];\n    const name = wrapper.name.toLowerCase();\n    const descendants = domSymbolTree.treeIterator(root);\n\n    for (const candidate of descendants) {\n      if (candidate._radioButtonGroupRoot !== root) {\n        continue;\n      }\n\n      const candidateWrapper = idlUtils.wrapperForImpl(candidate);\n\n      if (!candidateWrapper.name || candidateWrapper.name.toLowerCase() !== name) {\n        continue;\n      }\n\n      if (candidate !== this) {\n        result.push(candidate);\n      }\n    }\n\n    return result;\n  }\n\n  _removeOtherRadioCheckedness() {\n    for (const radioGroupElement of this._otherRadioGroupElements) {\n      radioGroupElement._checkedness = false;\n    }\n  }\n\n  get _radioButtonGroupRoot() {\n    const wrapper = idlUtils.wrapperForImpl(this);\n\n    if (this.type !== \"radio\" || !wrapper.name) {\n      return null;\n    }\n\n    let e = domSymbolTree.parent(this);\n\n    while (e) {\n      // root node of this home sub tree\n      // or the form element we belong to\n      if (!domSymbolTree.parent(e) || e.nodeName.toUpperCase() === \"FORM\") {\n        return e;\n      }\n\n      e = domSymbolTree.parent(e);\n    }\n\n    return null;\n  }\n\n  _isRadioGroupChecked() {\n    if (this.checked) {\n      return true;\n    }\n\n    return this._otherRadioGroupElements.some(radioGroupElement => radioGroupElement.checked);\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return closest(this, \"form\");\n  }\n\n  get checked() {\n    return this._checkedness;\n  }\n\n  set checked(checked) {\n    this._checkedness = Boolean(checked);\n    this._dirtyCheckedness = true;\n\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  get value() {\n    switch (valueAttributeMode(this.type)) {\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value\n      case \"value\":\n        return this._value !== null ? this._value : \"\";\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default\n\n      case \"default\":\n        {\n          const attr = this.getAttribute(\"value\");\n          return attr !== null ? attr : \"\";\n        }\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n\n      case \"default/on\":\n        {\n          const attr = this.getAttribute(\"value\");\n          return attr !== null ? attr : \"on\";\n        }\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename\n\n      case \"filename\":\n        return this.files.length ? \"C:\\\\fakepath\\\\\" + this.files[0].name : \"\";\n\n      default:\n        throw new Error(\"jsdom internal error: unknown value attribute mode\");\n    }\n  }\n\n  set value(val) {\n    switch (valueAttributeMode(this.type)) {\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value\n      case \"value\":\n        {\n          const oldValue = this._value;\n\n          if (val === null) {\n            this._value = null;\n          } else {\n            this._value = sanitizeValueByType(this, String(val));\n          }\n\n          this._dirtyValue = true;\n\n          if (oldValue !== this._value) {\n            this._selectionStart = 0;\n            this._selectionEnd = 0;\n            this._selectionDirection = \"none\";\n          }\n\n          break;\n        }\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n\n      case \"default\":\n      case \"default/on\":\n        this.setAttribute(\"value\", val);\n        break;\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename\n\n      case \"filename\":\n        if (val === \"\") {\n          this.files.length = 0;\n        } else {\n          throw new DOMException(\"This input element accepts a filename, which may only be programmatically set to \" + \"the empty string.\", \"InvalidStateError\");\n        }\n\n        break;\n\n      default:\n        throw new Error(\"jsdom internal error: unknown value attribute mode\");\n    }\n  }\n\n  get files() {\n    if (this.type === \"file\") {\n      this[filesSymbol] = this[filesSymbol] || FileList.createImpl();\n    } else {\n      this[filesSymbol] = null;\n    }\n\n    return this[filesSymbol];\n  }\n\n  set files(value) {\n    if (this.type === \"file\" && value !== null) {\n      this[filesSymbol] = value;\n    }\n  }\n\n  get type() {\n    const type = this.getAttribute(\"type\");\n    return type ? type.toLowerCase() : \"text\";\n  }\n\n  set type(type) {\n    this.setAttribute(\"type\", type);\n  }\n\n  _dispatchSelectEvent() {\n    const event = this._ownerDocument.createEvent(\"HTMLEvents\");\n\n    event.initEvent(\"select\", true, true);\n    this.dispatchEvent(event);\n  }\n\n  _getValueLength() {\n    return typeof this.value === \"string\" ? this.value.length : 0;\n  }\n\n  select() {\n    if (!allowSelect(this.type)) {\n      return;\n    }\n\n    this._selectionStart = 0;\n    this._selectionEnd = this._getValueLength();\n    this._selectionDirection = \"none\";\n\n    this._dispatchSelectEvent();\n  }\n\n  get selectionStart() {\n    if (!allowVariableLengthSelection(this.type)) {\n      return null;\n    }\n\n    return this._selectionStart;\n  }\n\n  set selectionStart(start) {\n    if (!allowVariableLengthSelection(this.type)) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n  }\n\n  get selectionEnd() {\n    if (!allowVariableLengthSelection(this.type)) {\n      return null;\n    }\n\n    return this._selectionEnd;\n  }\n\n  set selectionEnd(end) {\n    if (!allowVariableLengthSelection(this.type)) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n  }\n\n  get selectionDirection() {\n    if (!allowVariableLengthSelection(this.type)) {\n      return null;\n    }\n\n    return this._selectionDirection;\n  }\n\n  set selectionDirection(dir) {\n    if (!allowVariableLengthSelection(this.type)) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n  }\n\n  setSelectionRange(start, end, dir) {\n    if (!allowVariableLengthSelection(this.type)) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this._selectionEnd = Math.min(end, this._getValueLength());\n    this._selectionStart = Math.min(start, this._selectionEnd);\n    this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n\n    this._dispatchSelectEvent();\n  }\n\n  setRangeText(repl, start, end, selectionMode = \"preserve\") {\n    if (!allowVariableLengthSelection(this.type)) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    if (arguments.length < 2) {\n      start = this._selectionStart;\n      end = this._selectionEnd;\n    } else if (start > end) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    start = Math.min(start, this._getValueLength());\n    end = Math.min(end, this._getValueLength());\n    const val = this.value;\n    let selStart = this._selectionStart;\n    let selEnd = this._selectionEnd;\n    this.value = val.slice(0, start) + repl + val.slice(end);\n    const newEnd = start + this.value.length;\n\n    if (selectionMode === \"select\") {\n      this.setSelectionRange(start, newEnd);\n    } else if (selectionMode === \"start\") {\n      this.setSelectionRange(start, start);\n    } else if (selectionMode === \"end\") {\n      this.setSelectionRange(newEnd, newEnd);\n    } else {\n      // preserve\n      const delta = repl.length - (end - start);\n\n      if (selStart > end) {\n        selStart += delta;\n      } else if (selStart > start) {\n        selStart = start;\n      }\n\n      if (selEnd > end) {\n        selEnd += delta;\n      } else if (selEnd > start) {\n        selEnd = newEnd;\n      }\n\n      this.setSelectionRange(selStart, selEnd);\n    }\n  }\n\n  set maxLength(value) {\n    if (value < 0) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    this.setAttribute(\"maxlength\", String(value));\n  }\n\n  get maxLength() {\n    if (!this.hasAttribute(\"maxlength\")) {\n      return 524288; // stole this from chrome\n    }\n\n    return parseInt(this.getAttribute(\"maxlength\"));\n  }\n\n  set minLength(value) {\n    if (value < 0) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    this.setAttribute(\"minlength\", String(value));\n  }\n\n  get minLength() {\n    if (!this.hasAttribute(\"minlength\")) {\n      return 0;\n    }\n\n    return parseInt(this.getAttribute(\"minlength\"));\n  }\n\n  get size() {\n    if (!this.hasAttribute(\"size\")) {\n      return 20;\n    }\n\n    return parseInt(this.getAttribute(\"size\"));\n  }\n\n  set size(value) {\n    if (value <= 0) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    this.setAttribute(\"size\", String(value));\n  }\n\n  get src() {\n    return conversions.USVString(this.getAttribute(\"src\"));\n  }\n\n  set src(value) {\n    this.setAttribute(\"src\", value);\n  } // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes\n\n\n  get _minimum() {\n    let min = this._defaultMinimum;\n    const attr = this.getAttribute(\"min\");\n    const convertStringToNumber = this._convertStringToNumber;\n\n    if (attr !== null && convertStringToNumber !== undefined) {\n      const parsed = convertStringToNumber(attr);\n\n      if (!isNaN(parsed)) {\n        min = parsed;\n      }\n    }\n\n    return min;\n  }\n\n  get _maximum() {\n    let max = this._defaultMaximum;\n    const attr = this.getAttribute(\"max\");\n    const convertStringToNumber = this._convertStringToNumber;\n\n    if (attr !== null && convertStringToNumber !== undefined) {\n      const parsed = convertStringToNumber(attr);\n\n      if (!isNaN(parsed)) {\n        max = parsed;\n      }\n    }\n\n    return max;\n  }\n\n  get _defaultMinimum() {\n    if (this.type === \"range\") {\n      return 0;\n    }\n\n    return null;\n  }\n\n  get _defaultMaximum() {\n    if (this.type === \"range\") {\n      return 100;\n    }\n\n    return null;\n  }\n\n  get _parsedValue() {\n    const converter = this._convertStringToNumber;\n\n    if (converter !== undefined) {\n      return converter(this.value);\n    }\n\n    return this.value;\n  } // https://html.spec.whatwg.org/multipage/input.html#attr-input-step\n\n\n  get _step() {\n    let step = this._defaultStep;\n\n    if (this.hasAttribute(\"step\") && !asciiCaseInsensitiveMatch(this.getAttribute(\"step\"), \"any\")) {\n      const parsedStep = parseFloatingPointNumber(this.getAttribute(\"step\"));\n\n      if (!isNaN(parsedStep) && parsedStep > 0) {\n        step = parsedStep;\n      }\n    }\n\n    return step;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-scale\n\n\n  get _stepScaleFactor() {\n    const dayInMilliseconds = 24 * 60 * 60 * 1000;\n\n    switch (this.type) {\n      case \"week\":\n        return 7 * dayInMilliseconds;\n\n      case \"date\":\n        return dayInMilliseconds;\n\n      case \"datetime-local\":\n      case \"datetime\":\n      case \"time\":\n        return 1000;\n    }\n\n    return 1;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default\n\n\n  get _defaultStep() {\n    if (this.type === \"datetime-local\" || this.type === \"datetime\" || this.type === \"time\") {\n      return 60;\n    }\n\n    return 1;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-min-zero\n\n\n  get _stepBase() {\n    const parseAttribute = attributeName => parseFloatingPointNumber(this.getAttribute(attributeName));\n\n    if (this.hasAttribute(\"min\")) {\n      const min = parseAttribute(\"min\");\n\n      if (!isNaN(min)) {\n        return min;\n      }\n    }\n\n    if (this.hasAttribute(\"value\")) {\n      const value = parseAttribute(\"value\");\n\n      if (!isNaN(value)) {\n        return value;\n      }\n    }\n\n    return this._defaultStepBase;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default-base\n\n\n  get _defaultStepBase() {\n    if (this.type === \"week\") {\n      // The start of week 1970-W01\n      return 259200000;\n    }\n\n    return 0;\n  }\n\n  _attributeApplies(attribute) {\n    return applicableTypesForAttribute[attribute].has(this.type);\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    // https://html.spec.whatwg.org/multipage/input.html#hidden-state-(type=hidden)\n    // https://html.spec.whatwg.org/multipage/input.html#reset-button-state-(type=reset)\n    // https://html.spec.whatwg.org/multipage/input.html#button-state-(type=button)\n    const willNotValidateTypes = new Set([\"hidden\", \"reset\", \"button\"]); // https://html.spec.whatwg.org/multipage/input.html#attr-input-readonly\n\n    const readOnly = this.hasAttribute(\"readonly\"); // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-disabled\n\n    return willNotValidateTypes.has(this.type) || readOnly;\n  }\n\n  get validity() {\n    if (!this._validity) {\n      this._validity = ValidityState.createImpl(this, {\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-missing\n        valueMissing: () => {\n          if (!this.hasAttribute(\"required\")) {\n            return false;\n          }\n\n          if (this.type === \"checkbox\") {\n            // https://html.spec.whatwg.org/multipage/input.html#checkbox-state-(type=checkbox)\n            // Constraint validation: If the element is required and its checkedness is\n            // false, then the element is suffering from being missing.\n            return !this.checked;\n          } else if (this.type === \"radio\") {\n            // https://html.spec.whatwg.org/multipage/input.html#radio-button-state-(type=radio)\n            // Constraint validation: If an element in the radio button group is required,\n            // and all of the input elements in the radio button group have a checkedness\n            // that is false, then the element is suffering from being missing.\n            return !this._isRadioGroupChecked();\n          }\n\n          return this.value === \"\";\n        },\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-long\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-maxlength\n        // jsdom has no way at the moment to emulate a user interaction, so tooLong/tooShort have\n        // to be set to false.\n        tooLong: () => false,\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-short\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-minlength\n        tooShort: () => false,\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-overflow\n        // https://html.spec.whatwg.org/multipage/input.html#attr-input-max\n        rangeOverflow: () => this._attributeApplies(\"max\") && this._maximum !== null && this._parsedValue > this._maximum,\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-underflow\n        // https://html.spec.whatwg.org/multipage/input.html#attr-input-min\n        rangeUnderflow: () => this._attributeApplies(\"min\") && this._minimum !== null && this._parsedValue < this._minimum,\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-pattern-mismatch\n        patternMismatch: () => {\n          if (!this.hasAttribute(\"pattern\") || !this._attributeApplies(\"pattern\") || this.value === \"\") {\n            return false;\n          }\n\n          let regExp;\n\n          try {\n            regExp = new RegExp(this.getAttribute(\"pattern\"), \"u\");\n          } catch (e) {\n            return false;\n          }\n\n          if (this.type === \"email\" && this.hasAttribute(\"multiple\")) {\n            return splitOnCommas(this.value).every(value => regExp.test(value));\n          }\n\n          return !regExp.test(this.value);\n        },\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-step-mismatch\n        // https://html.spec.whatwg.org/multipage/input.html#attr-input-step\n        stepMismatch: () => {\n          // Constraint validation: When the element has an allowed value step, and the result of applying\n          // the algorithm to convert a string to a number to the string given by the element's value is a\n          // number, and that number subtracted from the step base is not an integral multiple of the\n          // allowed value step, the element is suffering from a step mismatch.\n          if (!this._attributeApplies(\"step\")) {\n            return false;\n          }\n\n          const step = parseFloatingPointNumber(this.getAttribute(\"step\"));\n\n          if (isNaN(step) || step <= 0) {\n            return false;\n          }\n\n          let number = this._parsedValue;\n\n          if (isNaN(number) || this.value === \"\") {\n            return false;\n          }\n\n          if (this._type === \"month\") {\n            number = parseMonthString(this.value).month - 1;\n          }\n\n          return number % (this._stepBase - this._step * this._stepScaleFactor) !== 0;\n        },\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-type-mismatch\n        typeMismatch: () => {\n          if (this.value === \"\") {\n            return false;\n          }\n\n          if (this.type === \"email\") {\n            // https://html.spec.whatwg.org/multipage/input.html#e-mail-state-(type=email)\n            // Constraint validation [multiple=false]: While the value of the element is neither the empty\n            // string nor a single valid e - mail address, the element is suffering from a type mismatch.\n            // Constraint validation [multiple=true]: While the value of the element is not a valid e-mail address list,\n            // the element is suffering from a type mismatch.\n            return !isValidEmailAddress(this.value, this.hasAttribute(\"multiple\"));\n          } else if (this.type === \"url\") {\n            // https://html.spec.whatwg.org/multipage/input.html#url-state-(type=url)\n            // Constraint validation: While the value of the element is neither the empty string\n            // nor a valid absolute URL, the element is suffering from a type mismatch.\n            return !isValidAbsoluteURL(this.value);\n          }\n\n          return false;\n        }\n      });\n    }\n\n    return this._validity;\n  }\n\n  [cloningSteps](copy, node) {\n    copy._value = node._value;\n    copy._checkedness = node._checkedness;\n    copy._dirtyValue = node._dirtyValue;\n    copy._dirtyCheckedness = node._dirtyCheckedness;\n  }\n\n}\n\nmixin(HTMLInputElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLInputElementImpl\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLInputElement-impl.js"],"names":["conversions","require","DOMException","Event","FileList","HTMLElementImpl","implementation","idlUtils","DefaultConstraintValidationImpl","ValidityState","mixin","domSymbolTree","cloningSteps","closest","getLabelsForLabelable","isDisabled","isValidEmailAddress","isValidAbsoluteURL","sanitizeValueByType","parseFloatingPointNumber","asciiCaseInsensitiveMatch","splitOnCommas","parseDateString","parseLocalDateAndTimeString","parseMonthString","parseTimeString","parseWeekString","filesSymbol","Symbol","selectAllowedTypes","Set","variableLengthSelectionAllowedTypes","maxMinStepTypes","applicableTypesForAttribute","max","min","step","pattern","allowSelect","type","has","toLowerCase","allowVariableLengthSelection","valueAttributeDefaultMode","valueAttributeDefaultOnMode","valueAttributeMode","getUTCMs","year","month","day","hour","minute","second","millisecond","Date","UTC","d","setUTCFullYear","setUTCMonth","setUTCDate","setUTCHours","setUTCMinutes","setUTCSeconds","valueOf","dayOfWeekRelMondayLUT","convertStringToNumberByTypeMap","Map","input","date","NaN","dateObj","dayOfWeekRelMonday","getUTCDay","week","time","dateAndTime","HTMLInputElementImpl","constructor","args","privateData","_selectionStart","_selectionEnd","_selectionDirection","_value","_dirtyValue","_checkedness","_dirtyCheckedness","_preCheckedRadioState","indeterminate","_customValidityErrorMessage","_labels","_convertStringToNumber","get","_getValue","_preClickActivationSteps","checked","_canceledActivationSteps","_activationBehavior","inputEvent","createImpl","isTrusted","bubbles","cancelable","dispatchEvent","changeEvent","form","_doSubmit","_attrModified","name","wrapper","wrapperForImpl","defaultValue","defaultChecked","_removeOtherRadioCheckedness","apply","arguments","_formReset","_changedFormOwner","_otherRadioGroupElements","root","_radioButtonGroupRoot","result","descendants","treeIterator","candidate","candidateWrapper","push","radioGroupElement","e","parent","nodeName","toUpperCase","_isRadioGroupChecked","some","labels","Boolean","value","attr","getAttribute","files","length","Error","val","oldValue","String","setAttribute","_dispatchSelectEvent","event","_ownerDocument","createEvent","initEvent","_getValueLength","select","selectionStart","start","setSelectionRange","Math","selectionEnd","end","selectionDirection","dir","setRangeText","repl","selectionMode","selStart","selEnd","slice","newEnd","delta","maxLength","hasAttribute","parseInt","minLength","size","src","USVString","_minimum","_defaultMinimum","convertStringToNumber","undefined","parsed","isNaN","_maximum","_defaultMaximum","_parsedValue","converter","_step","_defaultStep","parsedStep","_stepScaleFactor","dayInMilliseconds","_stepBase","parseAttribute","attributeName","_defaultStepBase","_attributeApplies","attribute","_barredFromConstraintValidationSpecialization","willNotValidateTypes","readOnly","validity","_validity","valueMissing","tooLong","tooShort","rangeOverflow","rangeUnderflow","patternMismatch","regExp","RegExp","every","test","stepMismatch","number","_type","typeMismatch","copy","node","prototype","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst conversions = require(\"webidl-conversions\");\nconst DOMException = require(\"domexception\");\nconst Event = require(\"../generated/Event\");\nconst FileList = require(\"../generated/FileList\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst idlUtils = require(\"../generated/utils\");\nconst DefaultConstraintValidationImpl =\n  require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst ValidityState = require(\"../generated/ValidityState\");\nconst { mixin } = require(\"../../utils\");\nconst { domSymbolTree, cloningSteps } = require(\"../helpers/internal-constants\");\nconst { closest } = require(\"../helpers/traversal\");\nconst { getLabelsForLabelable } = require(\"../helpers/form-controls\");\nconst {\n  isDisabled,\n  isValidEmailAddress,\n  isValidAbsoluteURL,\n  sanitizeValueByType\n} = require(\"../helpers/form-controls\");\nconst {\n  parseFloatingPointNumber,\n  asciiCaseInsensitiveMatch,\n  splitOnCommas\n} = require(\"../helpers/strings\");\nconst {\n  parseDateString,\n  parseLocalDateAndTimeString,\n  parseMonthString,\n  parseTimeString,\n  parseWeekString\n} = require(\"../helpers/dates-and-times\");\n\nconst filesSymbol = Symbol(\"files\");\n\nconst selectAllowedTypes = new Set([\n  \"text\", \"search\", \"tel\", \"url\", \"password\", \"email\", \"date\", \"month\", \"week\",\n  \"time\", \"datetime-local\", \"color\", \"file\", \"number\"\n]);\n\nconst variableLengthSelectionAllowedTypes = new Set([\"text\", \"search\", \"tel\", \"url\", \"password\"]);\n\nconst maxMinStepTypes = new Set([\"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"number\", \"range\", \"datetime\"]);\n\n// https://html.spec.whatwg.org/multipage/input.html#concept-input-apply\nconst applicableTypesForAttribute = {\n  max: maxMinStepTypes,\n  min: maxMinStepTypes,\n  step: maxMinStepTypes,\n  pattern: new Set([\"text\", \"search\", \"tel\", \"url\", \"email\", \"password\"])\n};\n\nfunction allowSelect(type) {\n  return selectAllowedTypes.has(type.toLowerCase());\n}\n\nfunction allowVariableLengthSelection(type) {\n  return variableLengthSelectionAllowedTypes.has(type.toLowerCase());\n}\n\nconst valueAttributeDefaultMode = new Set([\"hidden\", \"submit\", \"image\", \"reset\", \"button\"]);\nconst valueAttributeDefaultOnMode = new Set([\"checkbox\", \"radio\"]);\n\nfunction valueAttributeMode(type) {\n  if (valueAttributeDefaultMode.has(type)) {\n    return \"default\";\n  }\n  if (valueAttributeDefaultOnMode.has(type)) {\n    return \"default/on\";\n  }\n  if (type === \"file\") {\n    return \"filename\";\n  }\n  return \"value\";\n}\n\n// Necessary because Date.UTC() treats year within [0, 99] as [1900, 1999].\nfunction getUTCMs(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, millisecond = 0) {\n  if (year > 99 || year < 0) {\n    return Date.UTC(year, month - 1, day, hour, minute, second, millisecond);\n  }\n  const d = new Date(0);\n  d.setUTCFullYear(year);\n  d.setUTCMonth(month - 1);\n  d.setUTCDate(day);\n  d.setUTCHours(hour);\n  d.setUTCMinutes(minute);\n  d.setUTCSeconds(second, millisecond);\n  return d.valueOf();\n}\n\nconst dayOfWeekRelMondayLUT = [-1, 0, 1, 2, 3, -3, -2];\n\nconst convertStringToNumberByTypeMap = new Map([\n  [\n    // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number\n    \"date\", input => {\n      const date = parseDateString(input);\n      if (date === null) {\n        return NaN;\n      }\n      return getUTCMs(date.year, date.month, date.day);\n    }\n  ],\n  [\n    // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number\n    \"month\", input => {\n      const date = parseMonthString(input);\n      if (date === null) {\n        return NaN;\n      }\n      return (date.year - 1970) * 12 + (date.month - 1);\n    }\n  ],\n  [\n    // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-number\n    \"week\", input => {\n      const date = parseWeekString(input);\n      if (date === null) {\n        return NaN;\n      }\n      const dateObj = new Date(getUTCMs(date.year));\n      // An HTML week starts on Monday, while 0 represents Sunday. Account for such.\n      const dayOfWeekRelMonday = dayOfWeekRelMondayLUT[dateObj.getUTCDay()];\n      return dateObj.setUTCDate(1 + 7 * (date.week - 1) - dayOfWeekRelMonday);\n    }\n  ],\n  [\n    // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-number\n    \"time\", input => {\n      const time = parseTimeString(input);\n      if (time === null) {\n        return NaN;\n      }\n      return ((time.hour * 60 + time.minute) * 60 + time.second) * 1000 + time.millisecond;\n    }\n  ],\n  [\n    // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-string-number\n    \"datetime-local\", input => {\n      const dateAndTime = parseLocalDateAndTimeString(input);\n      if (dateAndTime === null) {\n        return NaN;\n      }\n      const { date: { year, month, day }, time: { hour, minute, second, millisecond } } = dateAndTime;\n      // Doesn't quite matter whether or not UTC is used, since the offset from 1970-01-01 local time is returned.\n      return getUTCMs(year, month, day, hour, minute, second, millisecond);\n    }\n  ],\n  // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-string-number\n  [\"number\", parseFloatingPointNumber],\n  // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-string-number\n  [\"range\", parseFloatingPointNumber]\n]);\n\nclass HTMLInputElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this._selectionStart = this._selectionEnd = 0;\n    this._selectionDirection = \"none\";\n    this._value = null;\n    this._dirtyValue = false;\n    this._checkedness = false;\n    this._dirtyCheckedness = false;\n\n    // This is used to implement the canceled activation steps for radio inputs:\n    // \"The canceled activation steps consist of setting the checkedness and the element's indeterminate IDL\n    // attribute back to the values they had before the pre-click activation steps were run.\"\n    this._preCheckedRadioState = null;\n\n    this.indeterminate = false;\n\n    this._customValidityErrorMessage = \"\";\n\n    this._labels = null;\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#concept-input-value-string-number\n  get _convertStringToNumber() {\n    return convertStringToNumberByTypeMap.get(this.type);\n  }\n\n  _getValue() {\n    return this._value;\n  }\n\n  _preClickActivationSteps() {\n    if (this.type === \"checkbox\") {\n      this.checked = !this.checked;\n    } else if (this.type === \"radio\") {\n      this._preCheckedRadioState = this.checked;\n      this.checked = true;\n    }\n  }\n\n  _canceledActivationSteps() {\n    if (this.type === \"checkbox\") {\n      this.checked = !this.checked;\n    } else if (this.type === \"radio\") {\n      if (this._preCheckedRadioState !== null) {\n        this.checked = this._preCheckedRadioState;\n        this._preCheckedRadioState = null;\n      }\n    }\n  }\n\n  _activationBehavior() {\n    if (isDisabled(this)) {\n      return;\n    }\n\n    if (this.type === \"checkbox\" || (this.type === \"radio\" && !this._preCheckedRadioState)) {\n      const inputEvent = Event.createImpl([\"input\", { isTrusted: true, bubbles: true, cancelable: true }], {});\n      this.dispatchEvent(inputEvent);\n\n      const changeEvent = Event.createImpl([\"change\", { bubbles: true, cancelable: true }], {});\n      this.dispatchEvent(changeEvent);\n    } else if (this.type === \"submit\") {\n      const { form } = this;\n      if (form) {\n        form._doSubmit();\n      }\n    }\n  }\n\n  _attrModified(name) {\n    const wrapper = idlUtils.wrapperForImpl(this);\n    if (!this._dirtyValue && name === \"value\") {\n      this._value = sanitizeValueByType(this, wrapper.defaultValue);\n    }\n    if (!this._dirtyCheckedness && name === \"checked\") {\n      this._checkedness = wrapper.defaultChecked;\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n\n    if (name === \"name\" || name === \"type\") {\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n\n    super._attrModified.apply(this, arguments);\n  }\n\n  _formReset() {\n    const wrapper = idlUtils.wrapperForImpl(this);\n    this._value = sanitizeValueByType(this, wrapper.defaultValue);\n    this._dirtyValue = false;\n    this._checkedness = wrapper.defaultChecked;\n    this._dirtyCheckedness = false;\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  _changedFormOwner() {\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  get _otherRadioGroupElements() {\n    const wrapper = idlUtils.wrapperForImpl(this);\n    const root = this._radioButtonGroupRoot;\n    if (!root) {\n      return [];\n    }\n\n    const result = [];\n\n    const name = wrapper.name.toLowerCase();\n\n    const descendants = domSymbolTree.treeIterator(root);\n    for (const candidate of descendants) {\n      if (candidate._radioButtonGroupRoot !== root) {\n        continue;\n      }\n\n      const candidateWrapper = idlUtils.wrapperForImpl(candidate);\n      if (!candidateWrapper.name || candidateWrapper.name.toLowerCase() !== name) {\n        continue;\n      }\n\n      if (candidate !== this) {\n        result.push(candidate);\n      }\n    }\n    return result;\n  }\n\n  _removeOtherRadioCheckedness() {\n    for (const radioGroupElement of this._otherRadioGroupElements) {\n      radioGroupElement._checkedness = false;\n    }\n  }\n\n  get _radioButtonGroupRoot() {\n    const wrapper = idlUtils.wrapperForImpl(this);\n    if (this.type !== \"radio\" || !wrapper.name) {\n      return null;\n    }\n\n    let e = domSymbolTree.parent(this);\n    while (e) {\n      // root node of this home sub tree\n      // or the form element we belong to\n      if (!domSymbolTree.parent(e) || e.nodeName.toUpperCase() === \"FORM\") {\n        return e;\n      }\n      e = domSymbolTree.parent(e);\n    }\n    return null;\n  }\n\n  _isRadioGroupChecked() {\n    if (this.checked) {\n      return true;\n    }\n    return this._otherRadioGroupElements.some(radioGroupElement => radioGroupElement.checked);\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return closest(this, \"form\");\n  }\n\n  get checked() {\n    return this._checkedness;\n  }\n\n  set checked(checked) {\n    this._checkedness = Boolean(checked);\n    this._dirtyCheckedness = true;\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  get value() {\n    switch (valueAttributeMode(this.type)) {\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value\n      case \"value\":\n        return this._value !== null ? this._value : \"\";\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default\n      case \"default\": {\n        const attr = this.getAttribute(\"value\");\n        return attr !== null ? attr : \"\";\n      }\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n      case \"default/on\": {\n        const attr = this.getAttribute(\"value\");\n        return attr !== null ? attr : \"on\";\n      }\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename\n      case \"filename\":\n        return this.files.length ? \"C:\\\\fakepath\\\\\" + this.files[0].name : \"\";\n      default:\n        throw new Error(\"jsdom internal error: unknown value attribute mode\");\n    }\n  }\n\n  set value(val) {\n    switch (valueAttributeMode(this.type)) {\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value\n      case \"value\": {\n        const oldValue = this._value;\n        if (val === null) {\n          this._value = null;\n        } else {\n          this._value = sanitizeValueByType(this, String(val));\n        }\n        this._dirtyValue = true;\n\n        if (oldValue !== this._value) {\n          this._selectionStart = 0;\n          this._selectionEnd = 0;\n          this._selectionDirection = \"none\";\n        }\n        break;\n      }\n\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n      case \"default\":\n      case \"default/on\":\n        this.setAttribute(\"value\", val);\n        break;\n\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename\n      case \"filename\":\n        if (val === \"\") {\n          this.files.length = 0;\n        } else {\n          throw new DOMException(\"This input element accepts a filename, which may only be programmatically set to \" +\n            \"the empty string.\", \"InvalidStateError\");\n        }\n        break;\n\n      default:\n        throw new Error(\"jsdom internal error: unknown value attribute mode\");\n    }\n  }\n\n  get files() {\n    if (this.type === \"file\") {\n      this[filesSymbol] = this[filesSymbol] || FileList.createImpl();\n    } else {\n      this[filesSymbol] = null;\n    }\n    return this[filesSymbol];\n  }\n\n  set files(value) {\n    if (this.type === \"file\" && value !== null) {\n      this[filesSymbol] = value;\n    }\n  }\n\n  get type() {\n    const type = this.getAttribute(\"type\");\n    return type ? type.toLowerCase() : \"text\";\n  }\n\n  set type(type) {\n    this.setAttribute(\"type\", type);\n  }\n\n  _dispatchSelectEvent() {\n    const event = this._ownerDocument.createEvent(\"HTMLEvents\");\n    event.initEvent(\"select\", true, true);\n    this.dispatchEvent(event);\n  }\n\n  _getValueLength() {\n    return typeof this.value === \"string\" ? this.value.length : 0;\n  }\n\n  select() {\n    if (!allowSelect(this.type)) {\n      return;\n    }\n\n    this._selectionStart = 0;\n    this._selectionEnd = this._getValueLength();\n    this._selectionDirection = \"none\";\n    this._dispatchSelectEvent();\n  }\n\n  get selectionStart() {\n    if (!allowVariableLengthSelection(this.type)) {\n      return null;\n    }\n\n    return this._selectionStart;\n  }\n\n  set selectionStart(start) {\n    if (!allowVariableLengthSelection(this.type)) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n  }\n\n  get selectionEnd() {\n    if (!allowVariableLengthSelection(this.type)) {\n      return null;\n    }\n\n    return this._selectionEnd;\n  }\n\n  set selectionEnd(end) {\n    if (!allowVariableLengthSelection(this.type)) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n  }\n\n  get selectionDirection() {\n    if (!allowVariableLengthSelection(this.type)) {\n      return null;\n    }\n\n    return this._selectionDirection;\n  }\n\n  set selectionDirection(dir) {\n    if (!allowVariableLengthSelection(this.type)) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n  }\n\n  setSelectionRange(start, end, dir) {\n    if (!allowVariableLengthSelection(this.type)) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this._selectionEnd = Math.min(end, this._getValueLength());\n    this._selectionStart = Math.min(start, this._selectionEnd);\n    this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n    this._dispatchSelectEvent();\n  }\n\n  setRangeText(repl, start, end, selectionMode = \"preserve\") {\n    if (!allowVariableLengthSelection(this.type)) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    if (arguments.length < 2) {\n      start = this._selectionStart;\n      end = this._selectionEnd;\n    } else if (start > end) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    start = Math.min(start, this._getValueLength());\n    end = Math.min(end, this._getValueLength());\n\n    const val = this.value;\n    let selStart = this._selectionStart;\n    let selEnd = this._selectionEnd;\n\n    this.value = val.slice(0, start) + repl + val.slice(end);\n\n    const newEnd = start + this.value.length;\n\n    if (selectionMode === \"select\") {\n      this.setSelectionRange(start, newEnd);\n    } else if (selectionMode === \"start\") {\n      this.setSelectionRange(start, start);\n    } else if (selectionMode === \"end\") {\n      this.setSelectionRange(newEnd, newEnd);\n    } else { // preserve\n      const delta = repl.length - (end - start);\n\n      if (selStart > end) {\n        selStart += delta;\n      } else if (selStart > start) {\n        selStart = start;\n      }\n\n      if (selEnd > end) {\n        selEnd += delta;\n      } else if (selEnd > start) {\n        selEnd = newEnd;\n      }\n\n      this.setSelectionRange(selStart, selEnd);\n    }\n  }\n\n  set maxLength(value) {\n    if (value < 0) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n    this.setAttribute(\"maxlength\", String(value));\n  }\n\n  get maxLength() {\n    if (!this.hasAttribute(\"maxlength\")) {\n      return 524288; // stole this from chrome\n    }\n    return parseInt(this.getAttribute(\"maxlength\"));\n  }\n\n  set minLength(value) {\n    if (value < 0) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n    this.setAttribute(\"minlength\", String(value));\n  }\n\n  get minLength() {\n    if (!this.hasAttribute(\"minlength\")) {\n      return 0;\n    }\n    return parseInt(this.getAttribute(\"minlength\"));\n  }\n\n  get size() {\n    if (!this.hasAttribute(\"size\")) {\n      return 20;\n    }\n    return parseInt(this.getAttribute(\"size\"));\n  }\n\n  set size(value) {\n    if (value <= 0) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n    this.setAttribute(\"size\", String(value));\n  }\n\n  get src() {\n    return conversions.USVString(this.getAttribute(\"src\"));\n  }\n\n  set src(value) {\n    this.setAttribute(\"src\", value);\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes\n  get _minimum() {\n    let min = this._defaultMinimum;\n    const attr = this.getAttribute(\"min\");\n    const convertStringToNumber = this._convertStringToNumber;\n    if (attr !== null && convertStringToNumber !== undefined) {\n      const parsed = convertStringToNumber(attr);\n      if (!isNaN(parsed)) {\n        min = parsed;\n      }\n    }\n    return min;\n  }\n\n  get _maximum() {\n    let max = this._defaultMaximum;\n    const attr = this.getAttribute(\"max\");\n    const convertStringToNumber = this._convertStringToNumber;\n    if (attr !== null && convertStringToNumber !== undefined) {\n      const parsed = convertStringToNumber(attr);\n      if (!isNaN(parsed)) {\n        max = parsed;\n      }\n    }\n    return max;\n  }\n\n  get _defaultMinimum() {\n    if (this.type === \"range\") {\n      return 0;\n    }\n    return null;\n  }\n\n  get _defaultMaximum() {\n    if (this.type === \"range\") {\n      return 100;\n    }\n    return null;\n  }\n\n  get _parsedValue() {\n    const converter = this._convertStringToNumber;\n    if (converter !== undefined) {\n      return converter(this.value);\n    }\n    return this.value;\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#attr-input-step\n  get _step() {\n    let step = this._defaultStep;\n    if (this.hasAttribute(\"step\") && !asciiCaseInsensitiveMatch(this.getAttribute(\"step\"), \"any\")) {\n      const parsedStep = parseFloatingPointNumber(this.getAttribute(\"step\"));\n      if (!isNaN(parsedStep) && parsedStep > 0) {\n        step = parsedStep;\n      }\n    }\n    return step;\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-scale\n  get _stepScaleFactor() {\n    const dayInMilliseconds = 24 * 60 * 60 * 1000;\n    switch (this.type) {\n      case \"week\":\n        return 7 * dayInMilliseconds;\n      case \"date\":\n        return dayInMilliseconds;\n      case \"datetime-local\":\n      case \"datetime\":\n      case \"time\":\n        return 1000;\n    }\n    return 1;\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default\n  get _defaultStep() {\n    if (this.type === \"datetime-local\" || this.type === \"datetime\" || this.type === \"time\") {\n      return 60;\n    }\n    return 1;\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#concept-input-min-zero\n  get _stepBase() {\n    const parseAttribute = attributeName => parseFloatingPointNumber(this.getAttribute(attributeName));\n    if (this.hasAttribute(\"min\")) {\n      const min = parseAttribute(\"min\");\n      if (!isNaN(min)) {\n        return min;\n      }\n    }\n    if (this.hasAttribute(\"value\")) {\n      const value = parseAttribute(\"value\");\n      if (!isNaN(value)) {\n        return value;\n      }\n    }\n    return this._defaultStepBase;\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default-base\n  get _defaultStepBase() {\n    if (this.type === \"week\") {\n      // The start of week 1970-W01\n      return 259200000;\n    }\n    return 0;\n  }\n\n  _attributeApplies(attribute) {\n    return applicableTypesForAttribute[attribute].has(this.type);\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    // https://html.spec.whatwg.org/multipage/input.html#hidden-state-(type=hidden)\n    // https://html.spec.whatwg.org/multipage/input.html#reset-button-state-(type=reset)\n    // https://html.spec.whatwg.org/multipage/input.html#button-state-(type=button)\n    const willNotValidateTypes = new Set([\"hidden\", \"reset\", \"button\"]);\n    // https://html.spec.whatwg.org/multipage/input.html#attr-input-readonly\n    const readOnly = this.hasAttribute(\"readonly\");\n\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-disabled\n    return willNotValidateTypes.has(this.type) || readOnly;\n  }\n\n  get validity() {\n    if (!this._validity) {\n      this._validity = ValidityState.createImpl(this, {\n\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-missing\n        valueMissing: () => {\n          if (!this.hasAttribute(\"required\")) {\n            return false;\n          }\n          if (this.type === \"checkbox\") {\n            // https://html.spec.whatwg.org/multipage/input.html#checkbox-state-(type=checkbox)\n            // Constraint validation: If the element is required and its checkedness is\n            // false, then the element is suffering from being missing.\n            return !this.checked;\n          } else if (this.type === \"radio\") {\n            // https://html.spec.whatwg.org/multipage/input.html#radio-button-state-(type=radio)\n            // Constraint validation: If an element in the radio button group is required,\n            // and all of the input elements in the radio button group have a checkedness\n            // that is false, then the element is suffering from being missing.\n            return !this._isRadioGroupChecked();\n          }\n          return this.value === \"\";\n        },\n\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-long\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-maxlength\n        // jsdom has no way at the moment to emulate a user interaction, so tooLong/tooShort have\n        // to be set to false.\n        tooLong: () => false,\n\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-short\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-minlength\n        tooShort: () => false,\n\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-overflow\n        // https://html.spec.whatwg.org/multipage/input.html#attr-input-max\n        rangeOverflow: () => this._attributeApplies(\"max\") && this._maximum !== null &&\n          this._parsedValue > this._maximum,\n\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-underflow\n        // https://html.spec.whatwg.org/multipage/input.html#attr-input-min\n        rangeUnderflow: () => this._attributeApplies(\"min\") && this._minimum !== null &&\n          this._parsedValue < this._minimum,\n\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-pattern-mismatch\n        patternMismatch: () => {\n          if (!this.hasAttribute(\"pattern\") || !this._attributeApplies(\"pattern\") || this.value === \"\") {\n            return false;\n          }\n          let regExp;\n          try {\n            regExp = new RegExp(this.getAttribute(\"pattern\"), \"u\");\n          } catch (e) {\n            return false;\n          }\n          if (this.type === \"email\" && this.hasAttribute(\"multiple\")) {\n            return splitOnCommas(this.value).every(value => regExp.test(value));\n          }\n          return !regExp.test(this.value);\n        },\n\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-step-mismatch\n        // https://html.spec.whatwg.org/multipage/input.html#attr-input-step\n        stepMismatch: () => {\n          // Constraint validation: When the element has an allowed value step, and the result of applying\n          // the algorithm to convert a string to a number to the string given by the element's value is a\n          // number, and that number subtracted from the step base is not an integral multiple of the\n          // allowed value step, the element is suffering from a step mismatch.\n          if (!this._attributeApplies(\"step\")) {\n            return false;\n          }\n          const step = parseFloatingPointNumber(this.getAttribute(\"step\"));\n          if (isNaN(step) || step <= 0) {\n            return false;\n          }\n\n          let number = this._parsedValue;\n          if (isNaN(number) || this.value === \"\") {\n            return false;\n          }\n          if (this._type === \"month\") {\n            number = parseMonthString(this.value).month - 1;\n          }\n          return number % (this._stepBase - (this._step * this._stepScaleFactor)) !== 0;\n        },\n\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-type-mismatch\n        typeMismatch: () => {\n          if (this.value === \"\") {\n            return false;\n          }\n          if (this.type === \"email\") {\n            // https://html.spec.whatwg.org/multipage/input.html#e-mail-state-(type=email)\n            // Constraint validation [multiple=false]: While the value of the element is neither the empty\n            // string nor a single valid e - mail address, the element is suffering from a type mismatch.\n\n            // Constraint validation [multiple=true]: While the value of the element is not a valid e-mail address list,\n            // the element is suffering from a type mismatch.\n            return !isValidEmailAddress(this.value, this.hasAttribute(\"multiple\"));\n          } else if (this.type === \"url\") {\n            // https://html.spec.whatwg.org/multipage/input.html#url-state-(type=url)\n            // Constraint validation: While the value of the element is neither the empty string\n            // nor a valid absolute URL, the element is suffering from a type mismatch.\n            return !isValidAbsoluteURL(this.value);\n          }\n          return false;\n        }\n      });\n    }\n    return this._validity;\n  }\n\n  [cloningSteps](copy, node) {\n    copy._value = node._value;\n    copy._checkedness = node._checkedness;\n    copy._dirtyValue = node._dirtyValue;\n    copy._dirtyCheckedness = node._dirtyCheckedness;\n  }\n}\n\nmixin(HTMLInputElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLInputElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}