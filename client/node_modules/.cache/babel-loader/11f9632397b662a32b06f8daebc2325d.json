{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './messages';\nimport { endSession } from './session';\nimport { GET_ALL_COMPANIES, CLEAR_COMPANIES, UPDATE_COMPANY } from '../actions/types';\nexport const getAllCompanies = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/companies');\n    dispatch({\n      type: GET_ALL_COMPANIES,\n      payload: res.data\n    });\n  } catch (err) {\n    console.error('AUTH ERROR ON LOADING ALL COMPANIES', err);\n\n    if (err.response.data.msg === 'AuthError') {\n      dispatch(endSession('Your session has ended. Please sign back in.'));\n      return;\n    }\n  }\n};\nexport const clearCompanies = () => dispatch => {\n  dispatch({\n    type: CLEAR_COMPANIES\n  });\n};\nexport const deleteCompany = id => async dispatch => {\n  try {\n    await axios.delete(`/api/companies/${id}`);\n    await dispatch(getAllCompanies());\n    dispatch(setAlert('Company deleted successfully.', 'success', null, false));\n  } catch (err) {\n    console.log(err);\n    console.error('ERROR ON DELETING COMPANY', err);\n  }\n};\nexport const updateCompanyArr = (property, arr, id) => dispatch => {\n  dispatch({\n    type: UPDATE_COMPANY,\n    payload: {\n      property,\n      arr,\n      id\n    }\n  });\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/redux/actions/companies.js"],"names":["axios","setAlert","endSession","GET_ALL_COMPANIES","CLEAR_COMPANIES","UPDATE_COMPANY","getAllCompanies","dispatch","res","get","type","payload","data","err","console","error","response","msg","clearCompanies","deleteCompany","id","delete","log","updateCompanyArr","property","arr"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SACIC,iBADJ,EAEIC,eAFJ,EAGIC,cAHJ,QAIO,kBAJP;AAMA,OAAO,MAAMC,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACrD,MAAI;AACA,UAAMC,GAAG,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAU,gBAAV,CAAlB;AACAF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEP,iBADD;AAELQ,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIH,GAND,CAME,OAAOC,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAc,qCAAd,EAAqDF,GAArD;;AACA,QAAIA,GAAG,CAACG,QAAJ,CAAaJ,IAAb,CAAkBK,GAAlB,KAA0B,WAA9B,EAA2C;AACvCV,MAAAA,QAAQ,CACJL,UAAU,CAAC,8CAAD,CADN,CAAR;AAGA;AACH;AACJ;AACJ,CAhBM;AAiBP,OAAO,MAAMgB,cAAc,GAAG,MAAOX,QAAD,IAAc;AAC9CA,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEN;AAAR,GAAD,CAAR;AACH,CAFM;AAIP,OAAO,MAAMe,aAAa,GAAIC,EAAD,IAAQ,MAAOb,QAAP,IAAoB;AACrD,MAAI;AACA,UAAMP,KAAK,CAACqB,MAAN,CAAc,kBAAiBD,EAAG,EAAlC,CAAN;AACA,UAAMb,QAAQ,CAACD,eAAe,EAAhB,CAAd;AACAC,IAAAA,QAAQ,CACJN,QAAQ,CAAC,+BAAD,EAAkC,SAAlC,EAA6C,IAA7C,EAAmD,KAAnD,CADJ,CAAR;AAGH,GAND,CAME,OAAOY,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACQ,GAAR,CAAYT,GAAZ;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAc,2BAAd,EAA2CF,GAA3C;AACH;AACJ,CAXM;AAaP,OAAO,MAAMU,gBAAgB,GAAG,CAACC,QAAD,EAAWC,GAAX,EAAgBL,EAAhB,KAAwBb,QAAD,IAAc;AACjEA,EAAAA,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAEL,cADD;AAELM,IAAAA,OAAO,EAAE;AAAEa,MAAAA,QAAF;AAAYC,MAAAA,GAAZ;AAAiBL,MAAAA;AAAjB;AAFJ,GAAD,CAAR;AAIH,CALM","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './messages';\nimport { endSession } from './session';\nimport {\n    GET_ALL_COMPANIES,\n    CLEAR_COMPANIES,\n    UPDATE_COMPANY,\n} from '../actions/types';\n\nexport const getAllCompanies = () => async (dispatch) => {\n    try {\n        const res = await axios.get('/api/companies');\n        dispatch({\n            type: GET_ALL_COMPANIES,\n            payload: res.data,\n        });\n    } catch (err) {\n        console.error('AUTH ERROR ON LOADING ALL COMPANIES', err);\n        if (err.response.data.msg === 'AuthError') {\n            dispatch(\n                endSession('Your session has ended. Please sign back in.')\n            );\n            return;\n        }\n    }\n};\nexport const clearCompanies = () => (dispatch) => {\n    dispatch({ type: CLEAR_COMPANIES });\n};\n\nexport const deleteCompany = (id) => async (dispatch) => {\n    try {\n        await axios.delete(`/api/companies/${id}`);\n        await dispatch(getAllCompanies());\n        dispatch(\n            setAlert('Company deleted successfully.', 'success', null, false)\n        );\n    } catch (err) {\n        console.log(err);\n        console.error('ERROR ON DELETING COMPANY', err);\n    }\n};\n\nexport const updateCompanyArr = (property, arr, id) => (dispatch) => {\n    dispatch({\n        type: UPDATE_COMPANY,\n        payload: { property, arr, id },\n    });\n};\n"]},"metadata":{},"sourceType":"module"}