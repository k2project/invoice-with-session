{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/invoice/Invoice.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Page from '../../components/page/Page';\nexport const Invoice = () => {\n  const downlaod = () => {};\n\n  function demoFromHTML() {\n    var pdf = new jsPDF('p', 'pt', 'letter'); // source can be HTML-formatted string, or a reference\n    // to an actual DOM element from which the text will be scraped.\n\n    source = $('#content')[0]; // we support special element handlers. Register them with jQuery-style\n    // ID selector for either ID or node name. (\"#iAmID\", \"div\", \"span\" etc.)\n    // There is no support for any other type of selectors\n    // (class, of compound) at this time.\n\n    specialElementHandlers = {\n      // element with id of \"bypass\" - jQuery style selector\n      '#bypassme': function (element, renderer) {\n        // true = \"handled elsewhere, bypass text extraction\"\n        return true;\n      }\n    };\n    margins = {\n      top: 80,\n      bottom: 60,\n      left: 40,\n      width: 522\n    }; // all coords and widths are in jsPDF instance's declared units\n    // 'inches' in this case\n\n    pdf.fromHTML(source, // HTML string or DOM elem ref.\n    margins.left, // x coord\n    margins.top, {\n      // y coord\n      width: margins.width,\n      // max width of content on PDF\n      elementHandlers: specialElementHandlers\n    }, function (dispose) {\n      // dispose: object with X, Y of the last line add to the PDF\n      //          this allow the insertion of new lines after html\n      pdf.save('Test.pdf');\n    }, margins);\n  }\n\n  return /*#__PURE__*/React.createElement(Page, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"article\", {\n    id: \"invoice\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"New invoice\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn--info\",\n    onClick: downlaod,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, \"Download pdf\"));\n};\nInvoice.propTypes = {};\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Invoice);","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/invoice/Invoice.js"],"names":["React","PropTypes","connect","Page","Invoice","downlaod","demoFromHTML","pdf","jsPDF","source","$","specialElementHandlers","element","renderer","margins","top","bottom","left","width","fromHTML","elementHandlers","dispose","save","propTypes","mapStateToProps","state","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,QAAMC,QAAQ,GAAG,MAAM,CAAE,CAAzB;;AACA,WAASC,YAAT,GAAwB;AACpB,QAAIC,GAAG,GAAG,IAAIC,KAAJ,CAAU,GAAV,EAAe,IAAf,EAAqB,QAArB,CAAV,CADoB,CAEpB;AACA;;AACAC,IAAAA,MAAM,GAAGC,CAAC,CAAC,UAAD,CAAD,CAAc,CAAd,CAAT,CAJoB,CAMpB;AACA;AACA;AACA;;AACAC,IAAAA,sBAAsB,GAAG;AACrB;AACA,mBAAa,UAAUC,OAAV,EAAmBC,QAAnB,EAA6B;AACtC;AACA,eAAO,IAAP;AACH;AALoB,KAAzB;AAOAC,IAAAA,OAAO,GAAG;AACNC,MAAAA,GAAG,EAAE,EADC;AAENC,MAAAA,MAAM,EAAE,EAFF;AAGNC,MAAAA,IAAI,EAAE,EAHA;AAINC,MAAAA,KAAK,EAAE;AAJD,KAAV,CAjBoB,CAuBpB;AACA;;AACAX,IAAAA,GAAG,CAACY,QAAJ,CACIV,MADJ,EACY;AACRK,IAAAA,OAAO,CAACG,IAFZ,EAEkB;AACdH,IAAAA,OAAO,CAACC,GAHZ,EAII;AACI;AACAG,MAAAA,KAAK,EAAEJ,OAAO,CAACI,KAFnB;AAE0B;AACtBE,MAAAA,eAAe,EAAET;AAHrB,KAJJ,EAUI,UAAUU,OAAV,EAAmB;AACf;AACA;AACAd,MAAAA,GAAG,CAACe,IAAJ,CAAS,UAAT;AACH,KAdL,EAeIR,OAfJ;AAiBH;;AACD,sBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAS,IAAA,EAAE,EAAC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAEI;AAAQ,IAAA,SAAS,EAAC,eAAlB;AAAkC,IAAA,OAAO,EAAET,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,CADJ;AAQH,CArDM;AAuDPD,OAAO,CAACmB,SAAR,GAAoB,EAApB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,KAAY,EAAZ,CAAxB;;AAEA,MAAMC,kBAAkB,GAAG,EAA3B;AAEA,eAAexB,OAAO,CAACsB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CtB,OAA7C,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Page from '../../components/page/Page';\n\nexport const Invoice = () => {\n    const downlaod = () => {};\n    function demoFromHTML() {\n        var pdf = new jsPDF('p', 'pt', 'letter');\n        // source can be HTML-formatted string, or a reference\n        // to an actual DOM element from which the text will be scraped.\n        source = $('#content')[0];\n\n        // we support special element handlers. Register them with jQuery-style\n        // ID selector for either ID or node name. (\"#iAmID\", \"div\", \"span\" etc.)\n        // There is no support for any other type of selectors\n        // (class, of compound) at this time.\n        specialElementHandlers = {\n            // element with id of \"bypass\" - jQuery style selector\n            '#bypassme': function (element, renderer) {\n                // true = \"handled elsewhere, bypass text extraction\"\n                return true;\n            },\n        };\n        margins = {\n            top: 80,\n            bottom: 60,\n            left: 40,\n            width: 522,\n        };\n        // all coords and widths are in jsPDF instance's declared units\n        // 'inches' in this case\n        pdf.fromHTML(\n            source, // HTML string or DOM elem ref.\n            margins.left, // x coord\n            margins.top,\n            {\n                // y coord\n                width: margins.width, // max width of content on PDF\n                elementHandlers: specialElementHandlers,\n            },\n\n            function (dispose) {\n                // dispose: object with X, Y of the last line add to the PDF\n                //          this allow the insertion of new lines after html\n                pdf.save('Test.pdf');\n            },\n            margins\n        );\n    }\n    return (\n        <Page>\n            <article id='invoice'>New invoice</article>\n            <button className='btn btn--info' onClick={downlaod}>\n                Download pdf\n            </button>\n        </Page>\n    );\n};\n\nInvoice.propTypes = {};\n\nconst mapStateToProps = (state) => ({});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Invoice);\n"]},"metadata":{},"sourceType":"module"}