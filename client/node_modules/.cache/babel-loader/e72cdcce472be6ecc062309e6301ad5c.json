{"ast":null,"code":"\"use strict\";\n\nconst {\n  EOL\n} = require(\"os\");\n\nconst Blob = require(\"../generated/Blob\");\n\nfunction convertLineEndingsToNative(s) {\n  return s.replace(/\\r\\n|\\r|\\n/g, EOL);\n}\n\nexports.implementation = class BlobImpl {\n  constructor(args) {\n    const parts = args[0];\n    const properties = args[1];\n    const buffers = [];\n\n    if (parts !== undefined) {\n      for (const part of parts) {\n        let buffer;\n\n        if (part instanceof ArrayBuffer) {\n          buffer = Buffer.from(part);\n        } else if (ArrayBuffer.isView(part)) {\n          buffer = Buffer.from(part.buffer, part.byteOffset, part.byteLength);\n        } else if (Blob.isImpl(part)) {\n          buffer = part._buffer;\n        } else {\n          let s = part;\n\n          if (properties.endings === \"native\") {\n            s = convertLineEndingsToNative(part);\n          }\n\n          buffer = Buffer.from(s);\n        }\n\n        buffers.push(buffer);\n      }\n    }\n\n    this._buffer = Buffer.concat(buffers);\n    this.type = properties.type;\n\n    if (/[^\\u0020-\\u007E]/.test(this.type)) {\n      this.type = \"\";\n    } else {\n      this.type = this.type.toLowerCase();\n    }\n  }\n\n  get size() {\n    return this._buffer.length;\n  }\n\n  slice(start, end, contentType) {\n    const {\n      size\n    } = this;\n    let relativeStart;\n    let relativeEnd;\n    let relativeContentType;\n\n    if (start === undefined) {\n      relativeStart = 0;\n    } else if (start < 0) {\n      relativeStart = Math.max(size + start, 0);\n    } else {\n      relativeStart = Math.min(start, size);\n    }\n\n    if (end === undefined) {\n      relativeEnd = size;\n    } else if (end < 0) {\n      relativeEnd = Math.max(size + end, 0);\n    } else {\n      relativeEnd = Math.min(end, size);\n    }\n\n    if (contentType === undefined) {\n      relativeContentType = \"\";\n    } else {\n      // sanitization (lower case and invalid char check) is done in the\n      // constructor\n      relativeContentType = contentType;\n    }\n\n    const span = Math.max(relativeEnd - relativeStart, 0);\n    const buffer = this._buffer;\n    const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\n    const blob = Blob.createImpl([[], {\n      type: relativeContentType\n    }], {});\n    blob._buffer = slicedBuffer;\n    return blob;\n  }\n\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/file-api/Blob-impl.js"],"names":["EOL","require","Blob","convertLineEndingsToNative","s","replace","exports","implementation","BlobImpl","constructor","args","parts","properties","buffers","undefined","part","buffer","ArrayBuffer","Buffer","from","isView","byteOffset","byteLength","isImpl","_buffer","endings","push","concat","type","test","toLowerCase","size","length","slice","start","end","contentType","relativeStart","relativeEnd","relativeContentType","Math","max","min","span","slicedBuffer","blob","createImpl"],"mappings":"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","sourcesContent":["\"use strict\";\nconst { EOL } = require(\"os\");\nconst Blob = require(\"../generated/Blob\");\n\nfunction convertLineEndingsToNative(s) {\n  return s.replace(/\\r\\n|\\r|\\n/g, EOL);\n}\n\nexports.implementation = class BlobImpl {\n  constructor(args) {\n    const parts = args[0];\n    const properties = args[1];\n\n    const buffers = [];\n\n    if (parts !== undefined) {\n      for (const part of parts) {\n        let buffer;\n        if (part instanceof ArrayBuffer) {\n          buffer = Buffer.from(part);\n        } else if (ArrayBuffer.isView(part)) {\n          buffer = Buffer.from(part.buffer, part.byteOffset, part.byteLength);\n        } else if (Blob.isImpl(part)) {\n          buffer = part._buffer;\n        } else {\n          let s = part;\n          if (properties.endings === \"native\") {\n            s = convertLineEndingsToNative(part);\n          }\n          buffer = Buffer.from(s);\n        }\n        buffers.push(buffer);\n      }\n    }\n\n    this._buffer = Buffer.concat(buffers);\n\n    this.type = properties.type;\n    if (/[^\\u0020-\\u007E]/.test(this.type)) {\n      this.type = \"\";\n    } else {\n      this.type = this.type.toLowerCase();\n    }\n  }\n\n  get size() {\n    return this._buffer.length;\n  }\n\n  slice(start, end, contentType) {\n    const { size } = this;\n\n    let relativeStart;\n    let relativeEnd;\n    let relativeContentType;\n\n    if (start === undefined) {\n      relativeStart = 0;\n    } else if (start < 0) {\n      relativeStart = Math.max(size + start, 0);\n    } else {\n      relativeStart = Math.min(start, size);\n    }\n    if (end === undefined) {\n      relativeEnd = size;\n    } else if (end < 0) {\n      relativeEnd = Math.max(size + end, 0);\n    } else {\n      relativeEnd = Math.min(end, size);\n    }\n\n    if (contentType === undefined) {\n      relativeContentType = \"\";\n    } else {\n      // sanitization (lower case and invalid char check) is done in the\n      // constructor\n      relativeContentType = contentType;\n    }\n\n    const span = Math.max(relativeEnd - relativeStart, 0);\n\n    const buffer = this._buffer;\n    const slicedBuffer = buffer.slice(\n      relativeStart,\n      relativeStart + span\n    );\n\n    const blob = Blob.createImpl([[], { type: relativeContentType }], {});\n    blob._buffer = slicedBuffer;\n    return blob;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}