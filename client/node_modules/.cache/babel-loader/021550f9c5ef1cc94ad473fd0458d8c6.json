{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/form/forms/TaskForm.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getAllCompanies } from '../../../redux/actions/companies';\nimport FormInput from '../components/FormInput';\nimport FormErrorsDisplay from '../components/FormErrorsDisplay';\nimport { formErrorsStyling } from '../utils/formFuns';\nimport { validateStringToQty, validateStringToCurrency, validateStringToPercentage, strToNum } from '../utils/validations';\nimport { setCurrentTask } from '../../../redux/actions/session';\nexport const TaskForm = ({\n  currentCompany,\n  getAllCompanies,\n  currentTask,\n  setCurrentTask\n}) => {\n  const [formData, setFormData] = useState({});\n  useEffect(() => {\n    if (currentTask) {\n      setFormData({ ...currentTask,\n        errors: []\n      });\n    } else {\n      setFormData({\n        description: '',\n        qty: 'N/A',\n        rate: 'N/A',\n        tax: 'N/A',\n        errors: []\n      });\n    }\n  }, [currentTask]);\n\n  const handleAdd = async e => {\n    e.preventDefault();\n    let {\n      description,\n      qty,\n      rate,\n      tax\n    } = formData;\n    const strValues = ['free', 'n/a'];\n    const errors = [];\n    description = description.trim();\n\n    if (!description) {\n      const error = {\n        param: 'description',\n        msg: 'Please describe the task.'\n      };\n      errors.push(error);\n    } //validate qty input\n\n\n    qty = qty.trim();\n    let qtyValue = validateStringToQty(qty);\n\n    if (!strValues.includes(qty.toLocaleLowerCase()) && !qtyValue) {\n      const error = {\n        param: 'qty',\n        msg: 'Please enter Qty value in one of the following formats: 1,000.50, 1 , 3 items, FREE or N/A.'\n      };\n      errors.push(error);\n    } else {\n      if (qtyValue) qtyValue = strToNum(qtyValue);\n    } //validate rate input\n\n\n    rate = rate.trim();\n    const rateObj = validateStringToCurrency(rate);\n\n    if (!strValues.includes(rate.toLocaleLowerCase()) && !rateObj) {\n      const error = {\n        param: 'rate',\n        msg: 'Please enter Rate value in one of the following formats: 1,000 PLN, Â£ 10.50 , FREE or N/A.'\n      };\n      errors.push(error);\n    } else {\n      if (rateObj) rate = rateObj.currency + rateObj.numValue;\n    } //validate tax input\n\n\n    tax = tax.trim();\n    const taxValue = validateStringToPercentage(tax);\n\n    if (!strValues.includes(tax.toLocaleLowerCase()) && !taxValue) {\n      const error = {\n        param: 'tax',\n        msg: 'Please enter the Tax value in one of the following formats: 10%, 1-100 , FREE or N/A.'\n      };\n      errors.push(error);\n    } else {\n      if (taxValue) tax = taxValue + '%';\n    } //rate without qty\n\n\n    if (rateObj && strValues.includes(qty.toLocaleLowerCase())) {\n      const error = {\n        param: 'qty',\n        msg: 'Please provide quantity for entered rate.'\n      };\n      errors.push(error);\n    } //calculate gross and net amount\n\n\n    let amount;\n\n    if (rateObj && qtyValue) {\n      const amountGross = strToNum(rateObj.numValue) * qtyValue;\n      let amountTaxed = 0;\n      if (taxValue) amountTaxed = (amountGross * (strToNum(taxValue) / 100)).toFixed(2);\n      amountTaxed = strToNum(amountTaxed);\n      amount = {\n        currency: rateObj.currency,\n        amountGross,\n        amountTaxed,\n        amountNet: amountGross - amountTaxed\n      };\n    } else {\n      //N/A and FREE values\n      amount = rate.toUpperCase();\n    }\n\n    if (errors.length > 0) {\n      setFormData({ ...formData,\n        errors\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }; //create task\n\n      const task = {\n        description,\n        qty: qty || 'N/A',\n        rate: rate || 'N/A',\n        tax: tax || '0%',\n        amount\n      };\n      task._id = currentTask ? currentTask._id : uuidv4();\n      task.addToInvoice = currentTask ? currentTask.addToInvoice : true;\n      task.createdAt = currentTask ? currentTask.createdAt : new Date();\n      await axios.post(`/api/companies/task/${currentCompany}`, JSON.stringify(task), config);\n      getAllCompanies();\n      setCurrentTask(null); //reset state\n\n      setFormData({\n        description: ' ',\n        qty: 'N/A',\n        rate: 'N/A',\n        tax: 'N/A',\n        errors: []\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    formErrorsStyling(formData.errors);\n  }, [formData.errors]);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"task-form\",\n    onSubmit: handleAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 21\n    }\n  }, \"Add a new task to bill for.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 25\n    }\n  }, \" *Required\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-3-cls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"col-span-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    form: {\n      formData,\n      setFormData\n    },\n    name: \"description\",\n    size: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 29\n    }\n  }, \"Description*\"))), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    form: {\n      formData,\n      setFormData\n    },\n    name: \"qty\",\n    size: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 29\n    }\n  }, \"Qty* \"), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 29\n    }\n  }, \"(e.g. 1, 2.5hr, N/A, Free)\"))), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 21\n    }\n  }, ' ', /*#__PURE__*/React.createElement(FormInput, {\n    form: {\n      formData,\n      setFormData\n    },\n    name: \"rate\",\n    size: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 29\n    }\n  }, \"Rate* \"), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 29\n    }\n  }, \"(e.g. \\xA311, N/A, Free)\"))), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    form: {\n      formData,\n      setFormData\n    },\n    name: \"tax\",\n    size: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 29\n    }\n  }, \"Tax* \"), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 29\n    }\n  }, \"(e.g. 10%, 10, N/A, Free)\")))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn--info\",\n    onMouseDown: e => e.preventDefault(),\n    onClick: handleAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }, \"Add Item\")), formData.errors.length > 0 && /*#__PURE__*/React.createElement(FormErrorsDisplay, {\n    errors: formData.errors,\n    label: \"Add custom field form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 17\n    }\n  }));\n};\nTaskForm.propTypes = {\n  company: PropTypes.object,\n  getAllCompanies: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  currentCompany: state.session.currentCompany,\n  currentTask: state.session.currentTask\n});\n\nconst mapDispatchToProps = {\n  getAllCompanies,\n  setCurrentTask\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm);","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/form/forms/TaskForm.js"],"names":["React","useState","useEffect","axios","v4","uuidv4","PropTypes","connect","getAllCompanies","FormInput","FormErrorsDisplay","formErrorsStyling","validateStringToQty","validateStringToCurrency","validateStringToPercentage","strToNum","setCurrentTask","TaskForm","currentCompany","currentTask","formData","setFormData","errors","description","qty","rate","tax","handleAdd","e","preventDefault","strValues","trim","error","param","msg","push","qtyValue","includes","toLocaleLowerCase","rateObj","currency","numValue","taxValue","amount","amountGross","amountTaxed","toFixed","amountNet","toUpperCase","length","config","headers","task","_id","addToInvoice","createdAt","Date","post","JSON","stringify","err","console","log","propTypes","company","object","func","mapStateToProps","state","session","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getAllCompanies } from '../../../redux/actions/companies';\nimport FormInput from '../components/FormInput';\nimport FormErrorsDisplay from '../components/FormErrorsDisplay';\nimport { formErrorsStyling } from '../utils/formFuns';\nimport {\n    validateStringToQty,\n    validateStringToCurrency,\n    validateStringToPercentage,\n    strToNum,\n} from '../utils/validations';\nimport { setCurrentTask } from '../../../redux/actions/session';\n\nexport const TaskForm = ({\n    currentCompany,\n    getAllCompanies,\n    currentTask,\n    setCurrentTask,\n}) => {\n    const [formData, setFormData] = useState({});\n    useEffect(() => {\n        if (currentTask) {\n            setFormData({ ...currentTask, errors: [] });\n        } else {\n            setFormData({\n                description: '',\n                qty: 'N/A',\n                rate: 'N/A',\n                tax: 'N/A',\n                errors: [],\n            });\n        }\n    }, [currentTask]);\n    const handleAdd = async (e) => {\n        e.preventDefault();\n        let { description, qty, rate, tax } = formData;\n        const strValues = ['free', 'n/a'];\n        const errors = [];\n\n        description = description.trim();\n        if (!description) {\n            const error = {\n                param: 'description',\n                msg: 'Please describe the task.',\n            };\n            errors.push(error);\n        }\n        //validate qty input\n        qty = qty.trim();\n        let qtyValue = validateStringToQty(qty);\n        if (!strValues.includes(qty.toLocaleLowerCase()) && !qtyValue) {\n            const error = {\n                param: 'qty',\n                msg:\n                    'Please enter Qty value in one of the following formats: 1,000.50, 1 , 3 items, FREE or N/A.',\n            };\n            errors.push(error);\n        } else {\n            if (qtyValue) qtyValue = strToNum(qtyValue);\n        }\n        //validate rate input\n        rate = rate.trim();\n        const rateObj = validateStringToCurrency(rate);\n        if (!strValues.includes(rate.toLocaleLowerCase()) && !rateObj) {\n            const error = {\n                param: 'rate',\n                msg:\n                    'Please enter Rate value in one of the following formats: 1,000 PLN, Â£ 10.50 , FREE or N/A.',\n            };\n            errors.push(error);\n        } else {\n            if (rateObj) rate = rateObj.currency + rateObj.numValue;\n        }\n        //validate tax input\n        tax = tax.trim();\n        const taxValue = validateStringToPercentage(tax);\n        if (!strValues.includes(tax.toLocaleLowerCase()) && !taxValue) {\n            const error = {\n                param: 'tax',\n                msg:\n                    'Please enter the Tax value in one of the following formats: 10%, 1-100 , FREE or N/A.',\n            };\n            errors.push(error);\n        } else {\n            if (taxValue) tax = taxValue + '%';\n        }\n        //rate without qty\n        if (rateObj && strValues.includes(qty.toLocaleLowerCase())) {\n            const error = {\n                param: 'qty',\n                msg: 'Please provide quantity for entered rate.',\n            };\n            errors.push(error);\n        }\n        //calculate gross and net amount\n\n        let amount;\n        if (rateObj && qtyValue) {\n            const amountGross = strToNum(rateObj.numValue) * qtyValue;\n            let amountTaxed = 0;\n            if (taxValue)\n                amountTaxed = (\n                    amountGross *\n                    (strToNum(taxValue) / 100)\n                ).toFixed(2);\n            amountTaxed = strToNum(amountTaxed);\n\n            amount = {\n                currency: rateObj.currency,\n                amountGross,\n                amountTaxed,\n                amountNet: amountGross - amountTaxed,\n            };\n        } else {\n            //N/A and FREE values\n            amount = rate.toUpperCase();\n        }\n\n        if (errors.length > 0) {\n            setFormData({\n                ...formData,\n                errors,\n            });\n            return;\n        }\n\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            //create task\n            const task = {\n                description,\n                qty: qty || 'N/A',\n                rate: rate || 'N/A',\n                tax: tax || '0%',\n                amount,\n            };\n            task._id = currentTask ? currentTask._id : uuidv4();\n            task.addToInvoice = currentTask ? currentTask.addToInvoice : true;\n            task.createdAt = currentTask ? currentTask.createdAt : new Date();\n\n            await axios.post(\n                `/api/companies/task/${currentCompany}`,\n                JSON.stringify(task),\n                config\n            );\n            getAllCompanies();\n            setCurrentTask(null);\n            //reset state\n            setFormData({\n                description: ' ',\n                qty: 'N/A',\n                rate: 'N/A',\n                tax: 'N/A',\n                errors: [],\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        formErrorsStyling(formData.errors);\n    }, [formData.errors]);\n    return (\n        <form className='task-form' onSubmit={handleAdd}>\n            <fieldset>\n                <legend>\n                    <b>Add a new task to bill for.</b>\n                    <p>\n                        <small> *Required</small>\n                    </p>\n                </legend>\n                <div className='grid-3-cls'>\n                    <span className='col-span-3'>\n                        <FormInput\n                            form={{ formData, setFormData }}\n                            name='description'\n                            size='auto'\n                        >\n                            <b>Description*</b>\n                        </FormInput>\n                    </span>\n                    <span>\n                        <FormInput\n                            form={{ formData, setFormData }}\n                            name='qty'\n                            size='auto'\n                        >\n                            <b>Qty* </b>\n                            <small>(e.g. 1, 2.5hr, N/A, Free)</small>\n                        </FormInput>\n                    </span>\n                    <span>\n                        {' '}\n                        <FormInput\n                            form={{ formData, setFormData }}\n                            name='rate'\n                            size='auto'\n                        >\n                            <b>Rate* </b>\n                            <small>(e.g. Â£11, N/A, Free)</small>\n                        </FormInput>\n                    </span>\n                    <span>\n                        <FormInput\n                            form={{ formData, setFormData }}\n                            name='tax'\n                            size='auto'\n                        >\n                            <b>Tax* </b>\n                            <small>(e.g. 10%, 10, N/A, Free)</small>\n                        </FormInput>\n                    </span>\n                </div>\n                <button\n                    className='btn btn--info'\n                    onMouseDown={(e) => e.preventDefault()}\n                    onClick={handleAdd}\n                >\n                    Add Item\n                </button>\n            </fieldset>\n            {formData.errors.length > 0 && (\n                <FormErrorsDisplay\n                    errors={formData.errors}\n                    label='Add custom field form'\n                />\n            )}\n        </form>\n    );\n};\n\nTaskForm.propTypes = {\n    company: PropTypes.object,\n    getAllCompanies: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n    currentCompany: state.session.currentCompany,\n    currentTask: state.session.currentTask,\n});\n\nconst mapDispatchToProps = {\n    getAllCompanies,\n    setCurrentTask,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm);\n"]},"metadata":{},"sourceType":"module"}