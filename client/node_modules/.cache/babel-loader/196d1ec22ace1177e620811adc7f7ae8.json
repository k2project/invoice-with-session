{"ast":null,"code":"\"use strict\";\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst ElementImpl = require(\"./Element-impl\").implementation;\n\nconst MouseEvent = require(\"../generated/MouseEvent\");\n\nconst ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\n\nconst GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\n\nconst HTMLAndSVGElementSharedImpl = require(\"./HTMLAndSVGElementShared-impl\").implementation;\n\nconst {\n  isDisabled\n} = require(\"../helpers/form-controls\");\n\nclass HTMLElementImpl extends ElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this._initHTMLAndSVGElement();\n\n    this._initElementCSSInlineStyle();\n\n    this._initGlobalEvents();\n\n    this._settingCssText = false;\n    this._clickInProgress = false;\n  } // Add default event behavior (click link to navigate, click button to submit\n  // form, etc). We start by wrapping dispatchEvent so we can forward events to\n  // the element's default functions (only events that did not incur\n  // preventDefault).\n\n\n  dispatchEvent(event) {\n    if (event.type === \"click\") {\n      callEventBehaviorHook(event, \"_preClickActivationSteps\", this);\n    }\n\n    const outcome = super.dispatchEvent(event);\n\n    if (event.type === \"click\") {\n      if (event.defaultPrevented) {\n        callEventBehaviorHook(event, \"_canceledActivationSteps\");\n      } else {\n        callEventBehaviorHook(event, \"_activationBehavior\");\n      }\n    }\n\n    return outcome;\n  }\n\n  click() {\n    // https://html.spec.whatwg.org/multipage/interaction.html#dom-click\n    // https://html.spec.whatwg.org/multipage/interaction.html#run-synthetic-click-activation-steps\n    // Not completely spec compliant due to e.g. incomplete implementations of disabled for form controls, or no\n    // implementation at all of isTrusted.\n    if (this._clickInProgress) {\n      return;\n    }\n\n    this._clickInProgress = true;\n\n    if (isDisabled(this)) {\n      return;\n    }\n\n    const event = MouseEvent.createImpl([\"click\", {\n      bubbles: true,\n      cancelable: true,\n      view: this.ownerDocument.defaultView\n    }], {}); // Run synthetic click activation steps. According to the spec,\n    // this should not be calling dispatchEvent, but it matches browser behavior.\n    // See: https://www.w3.org/Bugs/Public/show_bug.cgi?id=12230\n    // See also: https://github.com/whatwg/html/issues/805\n\n    this.dispatchEvent(event);\n    this._clickInProgress = false;\n  }\n\n  get dir() {\n    let dirValue = this.getAttribute(\"dir\");\n\n    if (dirValue !== null) {\n      dirValue = dirValue.toLowerCase();\n\n      if ([\"ltr\", \"rtl\", \"auto\"].includes(dirValue)) {\n        return dirValue;\n      }\n    }\n\n    return \"\";\n  }\n\n  set dir(value) {\n    this.setAttribute(\"dir\", value);\n  }\n\n  _attrModified(name, value, oldValue) {\n    if (name === \"style\" && value !== oldValue && !this._settingCssText) {\n      this._settingCssText = true;\n      this._style.cssText = value;\n      this._settingCssText = false;\n    } else if (name.startsWith(\"on\")) {\n      this._globalEventChanged(name.substring(2));\n    }\n\n    super._attrModified.apply(this, arguments);\n  }\n\n  get offsetParent() {\n    return null;\n  }\n\n  get offsetTop() {\n    return 0;\n  }\n\n  get offsetLeft() {\n    return 0;\n  }\n\n  get offsetWidth() {\n    return 0;\n  }\n\n  get offsetHeight() {\n    return 0;\n  }\n\n}\n\nfunction callEventBehaviorHook(event, name, targetOverride) {\n  if (event) {\n    const target = targetOverride || event.target;\n\n    if (target && typeof target[name] === \"function\") {\n      target[name]();\n    }\n  }\n}\n\nmixin(HTMLElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(HTMLElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(HTMLElementImpl.prototype, HTMLAndSVGElementSharedImpl.prototype);\nmodule.exports = {\n  implementation: HTMLElementImpl\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js"],"names":["mixin","require","ElementImpl","implementation","MouseEvent","ElementCSSInlineStyleImpl","GlobalEventHandlersImpl","HTMLAndSVGElementSharedImpl","isDisabled","HTMLElementImpl","constructor","args","privateData","_initHTMLAndSVGElement","_initElementCSSInlineStyle","_initGlobalEvents","_settingCssText","_clickInProgress","dispatchEvent","event","type","callEventBehaviorHook","outcome","defaultPrevented","click","createImpl","bubbles","cancelable","view","ownerDocument","defaultView","dir","dirValue","getAttribute","toLowerCase","includes","value","setAttribute","_attrModified","name","oldValue","_style","cssText","startsWith","_globalEventChanged","substring","apply","arguments","offsetParent","offsetTop","offsetLeft","offsetWidth","offsetHeight","targetOverride","target","prototype","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst { mixin } = require(\"../../utils\");\nconst ElementImpl = require(\"./Element-impl\").implementation;\nconst MouseEvent = require(\"../generated/MouseEvent\");\nconst ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\nconst GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\nconst HTMLAndSVGElementSharedImpl = require(\"./HTMLAndSVGElementShared-impl\").implementation;\nconst { isDisabled } = require(\"../helpers/form-controls\");\n\nclass HTMLElementImpl extends ElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._initHTMLAndSVGElement();\n    this._initElementCSSInlineStyle();\n    this._initGlobalEvents();\n\n    this._settingCssText = false;\n    this._clickInProgress = false;\n  }\n\n  // Add default event behavior (click link to navigate, click button to submit\n  // form, etc). We start by wrapping dispatchEvent so we can forward events to\n  // the element's default functions (only events that did not incur\n  // preventDefault).\n  dispatchEvent(event) {\n    if (event.type === \"click\") {\n      callEventBehaviorHook(event, \"_preClickActivationSteps\", this);\n    }\n\n    const outcome = super.dispatchEvent(event);\n\n    if (event.type === \"click\") {\n      if (event.defaultPrevented) {\n        callEventBehaviorHook(event, \"_canceledActivationSteps\");\n      } else {\n        callEventBehaviorHook(event, \"_activationBehavior\");\n      }\n    }\n\n    return outcome;\n  }\n\n  click() {\n    // https://html.spec.whatwg.org/multipage/interaction.html#dom-click\n    // https://html.spec.whatwg.org/multipage/interaction.html#run-synthetic-click-activation-steps\n    // Not completely spec compliant due to e.g. incomplete implementations of disabled for form controls, or no\n    // implementation at all of isTrusted.\n\n    if (this._clickInProgress) {\n      return;\n    }\n\n    this._clickInProgress = true;\n\n    if (isDisabled(this)) {\n      return;\n    }\n\n    const event = MouseEvent.createImpl([\n      \"click\",\n      {\n        bubbles: true,\n        cancelable: true,\n        view: this.ownerDocument.defaultView\n      }\n    ], {});\n\n    // Run synthetic click activation steps. According to the spec,\n    // this should not be calling dispatchEvent, but it matches browser behavior.\n    // See: https://www.w3.org/Bugs/Public/show_bug.cgi?id=12230\n    // See also: https://github.com/whatwg/html/issues/805\n    this.dispatchEvent(event);\n\n\n    this._clickInProgress = false;\n  }\n\n  get dir() {\n    let dirValue = this.getAttribute(\"dir\");\n    if (dirValue !== null) {\n      dirValue = dirValue.toLowerCase();\n\n      if ([\"ltr\", \"rtl\", \"auto\"].includes(dirValue)) {\n        return dirValue;\n      }\n    }\n    return \"\";\n  }\n  set dir(value) {\n    this.setAttribute(\"dir\", value);\n  }\n\n  _attrModified(name, value, oldValue) {\n    if (name === \"style\" && value !== oldValue && !this._settingCssText) {\n      this._settingCssText = true;\n      this._style.cssText = value;\n      this._settingCssText = false;\n    } else if (name.startsWith(\"on\")) {\n      this._globalEventChanged(name.substring(2));\n    }\n\n    super._attrModified.apply(this, arguments);\n  }\n\n  get offsetParent() {\n    return null;\n  }\n\n  get offsetTop() {\n    return 0;\n  }\n\n  get offsetLeft() {\n    return 0;\n  }\n\n  get offsetWidth() {\n    return 0;\n  }\n\n  get offsetHeight() {\n    return 0;\n  }\n}\n\nfunction callEventBehaviorHook(event, name, targetOverride) {\n  if (event) {\n    const target = targetOverride || event.target;\n    if (target && typeof target[name] === \"function\") {\n      target[name]();\n    }\n  }\n}\n\nmixin(HTMLElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(HTMLElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(HTMLElementImpl.prototype, HTMLAndSVGElementSharedImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}