{"ast":null,"code":"function isEmail(email) {\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n}\n\nfunction isNumber(email) {\n  return /^\\d+$/.test(email);\n}\n\nexport const isRequired = (state, outputArr) => {\n  state.forEach(input => {\n    if (input.required && !input.value.trim()) {\n      const error = {\n        param: input._id,\n        msg: `${input.label} is required.`\n      };\n      outputArr.push(error);\n    }\n  });\n};\nexport const isValidated = (state, outputArr) => {\n  state.forEach(input => {\n    if (input.validate && input.value.trim()) {\n      const {\n        type,\n        msg\n      } = input.validate;\n      let error = null;\n\n      if (type === 'isEmail') {\n        error = isEmail(input.value) ? null : {\n          param: input._id,\n          msg\n        };\n      }\n\n      if (type === 'isNumber') {\n        error = isNumber(input.value) ? null : {\n          param: input._id,\n          msg\n        };\n      }\n\n      if (error) outputArr.push(error);\n    }\n  });\n};\nexport const getNumericalValueFromString = str => {\n  return str.replace(/[^0-9,.]/g, '');\n};\nexport const validateStringToPercentage = str => {\n  const regExpPercentage = /^([0-9]{1,2}(\\.[0-9]{1,2})?|100)\\s?%?$/;\n\n  if (regExpPercentage.test(str)) {\n    return getNumericalValueFromString(str);\n  }\n\n  return null;\n};\nexport const validateStringToCurrency = str => {\n  const regExpCurrency = /^[^0-9]*[0-9]{1,3}(,?[0-9]{3})*(\\.[0-9]{1,2})?[^0-9]*$/;\n\n  if (regExpCurrency.test(str)) {\n    const numValue = str.replace(/[^0-9,.]/g, '').trim();\n    const currency = str.replace(numValue, '').trim().toUpperCase().split(' ')[0];\n    return {\n      currency,\n      numValue: Number(numValue)\n    };\n  }\n\n  return null;\n};\nexport const validateStringToQty = str => {\n  const regExpQty = /^[0-9]{1,3}(,?[0-9]{3})*(\\.[0-9]{1,2})?[^0-9]*$/;\n  return regExpQty.test(str);\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/form/utils/validations.js"],"names":["isEmail","email","test","isNumber","isRequired","state","outputArr","forEach","input","required","value","trim","error","param","_id","msg","label","push","isValidated","validate","type","getNumericalValueFromString","str","replace","validateStringToPercentage","regExpPercentage","validateStringToCurrency","regExpCurrency","numValue","currency","toUpperCase","split","Number","validateStringToQty","regExpQty"],"mappings":"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","sourcesContent":["function isEmail(email) {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n}\nfunction isNumber(email) {\n    return /^\\d+$/.test(email);\n}\n\nexport const isRequired = (state, outputArr) => {\n    state.forEach((input) => {\n        if (input.required && !input.value.trim()) {\n            const error = {\n                param: input._id,\n                msg: `${input.label} is required.`,\n            };\n            outputArr.push(error);\n        }\n    });\n};\nexport const isValidated = (state, outputArr) => {\n    state.forEach((input) => {\n        if (input.validate && input.value.trim()) {\n            const { type, msg } = input.validate;\n            let error = null;\n            if (type === 'isEmail') {\n                error = isEmail(input.value)\n                    ? null\n                    : {\n                          param: input._id,\n                          msg,\n                      };\n            }\n            if (type === 'isNumber') {\n                error = isNumber(input.value)\n                    ? null\n                    : {\n                          param: input._id,\n                          msg,\n                      };\n            }\n\n            if (error) outputArr.push(error);\n        }\n    });\n};\n\nexport const getNumericalValueFromString = (str) => {\n    return str.replace(/[^0-9,.]/g, '');\n};\n\nexport const validateStringToPercentage = (str) => {\n    const regExpPercentage = /^([0-9]{1,2}(\\.[0-9]{1,2})?|100)\\s?%?$/;\n    if (regExpPercentage.test(str)) {\n        return getNumericalValueFromString(str);\n    }\n    return null;\n};\nexport const validateStringToCurrency = (str) => {\n    const regExpCurrency = /^[^0-9]*[0-9]{1,3}(,?[0-9]{3})*(\\.[0-9]{1,2})?[^0-9]*$/;\n    if (regExpCurrency.test(str)) {\n        const numValue = str.replace(/[^0-9,.]/g, '').trim();\n        const currency = str\n            .replace(numValue, '')\n            .trim()\n            .toUpperCase()\n            .split(' ')[0];\n        return {\n            currency,\n            numValue: Number(numValue),\n        };\n    }\n    return null;\n};\n\nexport const validateStringToQty = (str) => {\n    const regExpQty = /^[0-9]{1,3}(,?[0-9]{3})*(\\.[0-9]{1,2})?[^0-9]*$/;\n    return regExpQty.test(str);\n};\n"]},"metadata":{},"sourceType":"module"}