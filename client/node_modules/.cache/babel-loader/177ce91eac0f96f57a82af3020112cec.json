{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport { updateCompanyArr } from '../../../redux/actions/companies';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { dialogBox } from '../../../components/alerts/alertsFuns';\nimport { getInputValueByLabel } from '../../../components/form/utils/customFormQueries';\nimport { date_YYYY_MM, date_DD_MM_YYYY } from '../../../components/calendar/dates';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass NewInvoice extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      invoice: null\n    };\n    this.handleChanges = this.handleChanges.bind(this);\n    this.clearInitState = this.clearInitState.bind(this);\n    this.updateInitStateToReduxStateOnSubmit = this.updateInitStateToReduxStateOnSubmit.bind(this);\n  }\n\n  handleChanges() {\n    //BECAUSE TASKS CAN BE AMENDED UPDATED IN FORM HENCE NEED TO CHECK INIT STATE AGAINST COMPANY.TASKS NOT INVOICE.TASKS!!!\n    console.log(JSON.stringify(this.state.invoice) === JSON.stringify(this.props.invoice)); // console.log(this.state.invoice.tasks);\n\n    this.props.invoice.tasks = this.props.company.tasks.filter(t => t.addToInvoice);\n    console.log(this.state.invoice, this.props.invoice);\n\n    if (JSON.stringify(this.state.invoice) !== JSON.stringify(this.props.invoice)) {\n      const msg = `You have some unsaved changes. What would you like to do?`;\n      const cancelBtnText = 'Discharge changes';\n      const confirmBtnText = 'Return to the form!';\n\n      const confirmCb = () => {};\n\n      const cancelCb = async () => {};\n\n      dialogBox({\n        msg,\n        cancelBtnText,\n        confirmBtnText,\n        confirmCb,\n        cancelCb\n      });\n    } else {\n      //remove any tasks added on update\n      const tasksWithoutInvocieTasks = this.props.company.tasks.filter(el => !this.state.invoice.tasks.includes(el));\n      console.log(tasksWithoutInvocieTasks);\n      this.props.updateCompanyArr('tasks', tasksWithoutInvocieTasks, this.props.company._id);\n    }\n  }\n\n  updateInitStateToReduxStateOnSubmit() {// this.props.setUpdates(this.props.company.details);\n  }\n\n  clearInitState() {//on submit clear app updates\n    // this.props.setUpdates(null);\n  }\n\n  componentDidMount() {\n    let invoiceInitState;\n    const searchArr = window.location.search.split('&');\n\n    if (searchArr[1]) {\n      //updating an existing invoice\n      //?updating=...\n      //downlaoding an existing invoice\n      //?download=...\n      const invoice_ID = searchArr[1].slice(9);\n      const invoiceToLoad = this.props.company.invoices.find(invoice => invoice._id === invoice_ID);\n\n      if (invoiceToLoad) {\n        //invoiceInitState from the invoices arr\n        invoiceInitState = invoiceToLoad; //add invoice tasks to existing tasks of the current company\n\n        const tasksArrIncInvoiceTasks = [...invoiceToLoad.tasks, ...this.props.company.tasks];\n        this.props.updateCompanyArr('tasks', tasksArrIncInvoiceTasks, this.props.company._id);\n      }\n    } else {\n      //a new invoice\n      //create invoice name\n      let company_abbr = getInputValueByLabel(this.props.company.details, 'Name').split(' ');\n\n      if (company_abbr.length > 1) {\n        company_abbr = company_abbr.map(el => el[0].toUpperCase()).join('');\n      } else {\n        company_abbr = company_abbr[0].slice(0, 3).toUpperCase();\n      }\n\n      let invoices_num = '1';\n      if (this.props.company.invoices) invoices_num = String(this.props.company.invoices.length + 1);\n\n      while (invoices_num.length < 5) {\n        invoices_num = '0' + invoices_num;\n      }\n\n      let saved_as = company_abbr + '-';\n      saved_as += date_YYYY_MM(new Date()) + '-';\n      saved_as += invoices_num; //generate due date in 14 days\n\n      const TWO_WEEKS = 1.21e9;\n      let due_date = date_DD_MM_YYYY(new Date().getTime() + TWO_WEEKS); //a new invoice\n\n      invoiceInitState = {\n        _id: uuidv4(),\n        created_at: new Date(),\n        saved_as,\n        issue_date: date_DD_MM_YYYY(new Date()),\n        due_date,\n        bg_color: localStorage.invoice_bg || 'blue',\n        text_color: localStorage.invoice_txt || 'white',\n        profile: JSON.parse(JSON.stringify(this.props.profile.details)),\n        company: JSON.parse(JSON.stringify(this.props.company.details)),\n        tasks: [],\n        discount: 0,\n        tax: 0,\n        fees: 0,\n        notes: 'Thank you for your business.'\n      };\n    } //set init state for comparison on component unmounting\n\n\n    this.setState({\n      invoice: JSON.parse(JSON.stringify(invoiceInitState))\n    }); //set redux state\n\n    this.props.setInvoiceInitState(invoiceInitState); // window.addEventListener('beforeunload', this.props.clearInitState);\n  }\n\n  componentWillUnmount() {\n    //auth err and logout won't trigger fun\n    if (this.props.authenticated) this.handleChanges(); // window.removeEventListener('beforeunload', this.props.clearInitState);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"company-invoice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }, \"Create a new invoice.\"), this.state.invoice && /*#__PURE__*/React.createElement(InvoiceDoc, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 40\n      }\n    }), this.state.invoice && /*#__PURE__*/React.createElement(NewInvoiceSubmit, {\n      invoiceInitState: this.state.invoice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nNewInvoice.propTypes = {\n  authenticated: PropTypes.bool,\n  profile: PropTypes.object,\n  company: PropTypes.object,\n  invoice: PropTypes.object,\n  updateCompanyArr: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  authenticated: state.session.authenticated,\n  profile: state.profile,\n  company: state.companies.find(c => c._id === state.session.currentCompany),\n  invoice: state.invoice\n});\n\nconst mapDispatchToProps = {\n  setInvoiceInitState,\n  updateCompanyArr\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(NewInvoice));","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js"],"names":["React","Component","PropTypes","withRouter","connect","setInvoiceInitState","updateCompanyArr","InvoiceDoc","NewInvoiceSubmit","dialogBox","getInputValueByLabel","date_YYYY_MM","date_DD_MM_YYYY","v4","uuidv4","NewInvoice","constructor","props","state","invoice","handleChanges","bind","clearInitState","updateInitStateToReduxStateOnSubmit","console","log","JSON","stringify","tasks","company","filter","t","addToInvoice","msg","cancelBtnText","confirmBtnText","confirmCb","cancelCb","tasksWithoutInvocieTasks","el","includes","_id","componentDidMount","invoiceInitState","searchArr","window","location","search","split","invoice_ID","slice","invoiceToLoad","invoices","find","tasksArrIncInvoiceTasks","company_abbr","details","length","map","toUpperCase","join","invoices_num","String","saved_as","Date","TWO_WEEKS","due_date","getTime","created_at","issue_date","bg_color","localStorage","invoice_bg","text_color","invoice_txt","profile","parse","discount","tax","fees","notes","setState","componentWillUnmount","authenticated","render","propTypes","bool","object","func","mapStateToProps","session","companies","c","currentCompany","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport { updateCompanyArr } from '../../../redux/actions/companies';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { dialogBox } from '../../../components/alerts/alertsFuns';\nimport { getInputValueByLabel } from '../../../components/form/utils/customFormQueries';\nimport {\n    date_YYYY_MM,\n    date_DD_MM_YYYY,\n} from '../../../components/calendar/dates';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass NewInvoice extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            invoice: null,\n        };\n        this.handleChanges = this.handleChanges.bind(this);\n        this.clearInitState = this.clearInitState.bind(this);\n        this.updateInitStateToReduxStateOnSubmit = this.updateInitStateToReduxStateOnSubmit.bind(\n            this\n        );\n    }\n    handleChanges() {\n        //BECAUSE TASKS CAN BE AMENDED UPDATED IN FORM HENCE NEED TO CHECK INIT STATE AGAINST COMPANY.TASKS NOT INVOICE.TASKS!!!\n        console.log(\n            JSON.stringify(this.state.invoice) ===\n                JSON.stringify(this.props.invoice)\n        );\n        // console.log(this.state.invoice.tasks);\n        this.props.invoice.tasks = this.props.company.tasks.filter(\n            (t) => t.addToInvoice\n        );\n        console.log(this.state.invoice, this.props.invoice);\n        if (\n            JSON.stringify(this.state.invoice) !==\n            JSON.stringify(this.props.invoice)\n        ) {\n            const msg = `You have some unsaved changes. What would you like to do?`;\n            const cancelBtnText = 'Discharge changes';\n            const confirmBtnText = 'Return to the form!';\n            const confirmCb = () => {};\n            const cancelCb = async () => {};\n            dialogBox({\n                msg,\n                cancelBtnText,\n                confirmBtnText,\n                confirmCb,\n                cancelCb,\n            });\n        } else {\n            //remove any tasks added on update\n            const tasksWithoutInvocieTasks = this.props.company.tasks.filter(\n                (el) => !this.state.invoice.tasks.includes(el)\n            );\n            console.log(tasksWithoutInvocieTasks);\n            this.props.updateCompanyArr(\n                'tasks',\n                tasksWithoutInvocieTasks,\n                this.props.company._id\n            );\n        }\n    }\n    updateInitStateToReduxStateOnSubmit() {\n        // this.props.setUpdates(this.props.company.details);\n    }\n    clearInitState() {\n        //on submit clear app updates\n        // this.props.setUpdates(null);\n    }\n    componentDidMount() {\n        let invoiceInitState;\n        const searchArr = window.location.search.split('&');\n        if (searchArr[1]) {\n            //updating an existing invoice\n            //?updating=...\n            //downlaoding an existing invoice\n            //?download=...\n            const invoice_ID = searchArr[1].slice(9);\n            const invoiceToLoad = this.props.company.invoices.find(\n                (invoice) => invoice._id === invoice_ID\n            );\n            if (invoiceToLoad) {\n                //invoiceInitState from the invoices arr\n                invoiceInitState = invoiceToLoad;\n                //add invoice tasks to existing tasks of the current company\n                const tasksArrIncInvoiceTasks = [\n                    ...invoiceToLoad.tasks,\n                    ...this.props.company.tasks,\n                ];\n                this.props.updateCompanyArr(\n                    'tasks',\n                    tasksArrIncInvoiceTasks,\n                    this.props.company._id\n                );\n            }\n        } else {\n            //a new invoice\n            //create invoice name\n            let company_abbr = getInputValueByLabel(\n                this.props.company.details,\n                'Name'\n            ).split(' ');\n            if (company_abbr.length > 1) {\n                company_abbr = company_abbr\n                    .map((el) => el[0].toUpperCase())\n                    .join('');\n            } else {\n                company_abbr = company_abbr[0].slice(0, 3).toUpperCase();\n            }\n            let invoices_num = '1';\n            if (this.props.company.invoices)\n                invoices_num = String(this.props.company.invoices.length + 1);\n            while (invoices_num.length < 5) {\n                invoices_num = '0' + invoices_num;\n            }\n            let saved_as = company_abbr + '-';\n            saved_as += date_YYYY_MM(new Date()) + '-';\n            saved_as += invoices_num;\n            //generate due date in 14 days\n            const TWO_WEEKS = 1.21e9;\n            let due_date = date_DD_MM_YYYY(new Date().getTime() + TWO_WEEKS);\n            //a new invoice\n            invoiceInitState = {\n                _id: uuidv4(),\n                created_at: new Date(),\n                saved_as,\n                issue_date: date_DD_MM_YYYY(new Date()),\n                due_date,\n                bg_color: localStorage.invoice_bg || 'blue',\n                text_color: localStorage.invoice_txt || 'white',\n                profile: JSON.parse(JSON.stringify(this.props.profile.details)),\n                company: JSON.parse(JSON.stringify(this.props.company.details)),\n                tasks: [],\n                discount: 0,\n                tax: 0,\n                fees: 0,\n                notes: 'Thank you for your business.',\n            };\n        }\n\n        //set init state for comparison on component unmounting\n        this.setState({\n            invoice: JSON.parse(JSON.stringify(invoiceInitState)),\n        });\n\n        //set redux state\n        this.props.setInvoiceInitState(invoiceInitState);\n\n        // window.addEventListener('beforeunload', this.props.clearInitState);\n    }\n    componentWillUnmount() {\n        //auth err and logout won't trigger fun\n        if (this.props.authenticated) this.handleChanges();\n        // window.removeEventListener('beforeunload', this.props.clearInitState);\n    }\n    render() {\n        return (\n            <section className='company-invoice'>\n                <h2 className='sr-only'>Create a new invoice.</h2>\n                {this.state.invoice && <InvoiceDoc />}\n                {this.state.invoice && (\n                    <NewInvoiceSubmit invoiceInitState={this.state.invoice} />\n                )}\n            </section>\n        );\n    }\n}\n\nNewInvoice.propTypes = {\n    authenticated: PropTypes.bool,\n    profile: PropTypes.object,\n    company: PropTypes.object,\n    invoice: PropTypes.object,\n    updateCompanyArr: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n    authenticated: state.session.authenticated,\n    profile: state.profile,\n    company: state.companies.find(\n        (c) => c._id === state.session.currentCompany\n    ),\n    invoice: state.invoice,\n});\n\nconst mapDispatchToProps = {\n    setInvoiceInitState,\n    updateCompanyArr,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(NewInvoice));\n"]},"metadata":{},"sourceType":"module"}