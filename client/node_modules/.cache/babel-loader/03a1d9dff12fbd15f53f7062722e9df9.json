{"ast":null,"code":"\"use strict\";\n\nconst CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst DOMException = require(\"domexception\");\n\nconst NODE_TYPE = require(\"../node-type\");\n\nclass TextImpl extends CharacterDataImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this.nodeType = NODE_TYPE.TEXT_NODE;\n  }\n\n  splitText(offset) {\n    offset >>>= 0;\n    const {\n      length\n    } = this;\n\n    if (offset > length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    const count = length - offset;\n    const newData = this.substringData(offset, count);\n\n    const newNode = this._ownerDocument.createTextNode(newData);\n\n    const parent = domSymbolTree.parent(this);\n\n    if (parent !== null) {\n      parent.insertBefore(newNode, this.nextSibling);\n    }\n\n    this.replaceData(offset, count, \"\");\n    return newNode; // TODO: range stuff\n  }\n\n  get wholeText() {\n    let wholeText = this.textContent;\n    let next;\n    let current = this;\n\n    while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText = next.textContent + wholeText;\n      current = next;\n    }\n\n    current = this;\n\n    while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText += next.textContent;\n      current = next;\n    }\n\n    return wholeText;\n  }\n\n}\n\nmodule.exports = {\n  implementation: TextImpl\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/Text-impl.js"],"names":["CharacterDataImpl","require","implementation","domSymbolTree","DOMException","NODE_TYPE","TextImpl","constructor","args","privateData","nodeType","TEXT_NODE","splitText","offset","length","count","newData","substringData","newNode","_ownerDocument","createTextNode","parent","insertBefore","nextSibling","replaceData","wholeText","textContent","next","current","previousSibling","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,sBAAD,CAAP,CAAgCC,cAA1D;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBF,OAAO,CAAC,+BAAD,CAAjC;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,cAAD,CAA5B;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,cAAD,CAAzB;;AAEA,MAAMK,QAAN,SAAuBN,iBAAvB,CAAyC;AACvCO,EAAAA,WAAW,CAACC,IAAD,EAAOC,WAAP,EAAoB;AAC7B,UAAMD,IAAN,EAAYC,WAAZ;AAEA,SAAKC,QAAL,GAAgBL,SAAS,CAACM,SAA1B;AACD;;AAEDC,EAAAA,SAAS,CAACC,MAAD,EAAS;AAChBA,IAAAA,MAAM,MAAM,CAAZ;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAa,IAAnB;;AAEA,QAAID,MAAM,GAAGC,MAAb,EAAqB;AACnB,YAAM,IAAIV,YAAJ,CAAiB,wCAAjB,EAA2D,gBAA3D,CAAN;AACD;;AAED,UAAMW,KAAK,GAAGD,MAAM,GAAGD,MAAvB;AACA,UAAMG,OAAO,GAAG,KAAKC,aAAL,CAAmBJ,MAAnB,EAA2BE,KAA3B,CAAhB;;AAEA,UAAMG,OAAO,GAAG,KAAKC,cAAL,CAAoBC,cAApB,CAAmCJ,OAAnC,CAAhB;;AAEA,UAAMK,MAAM,GAAGlB,aAAa,CAACkB,MAAd,CAAqB,IAArB,CAAf;;AAEA,QAAIA,MAAM,KAAK,IAAf,EAAqB;AACnBA,MAAAA,MAAM,CAACC,YAAP,CAAoBJ,OAApB,EAA6B,KAAKK,WAAlC;AACD;;AAED,SAAKC,WAAL,CAAiBX,MAAjB,EAAyBE,KAAzB,EAAgC,EAAhC;AAEA,WAAOG,OAAP,CAtBgB,CAwBhB;AACD;;AAED,MAAIO,SAAJ,GAAgB;AACd,QAAIA,SAAS,GAAG,KAAKC,WAArB;AACA,QAAIC,IAAJ;AACA,QAAIC,OAAO,GAAG,IAAd;;AACA,WAAO,CAACD,IAAI,GAAGxB,aAAa,CAAC0B,eAAd,CAA8BD,OAA9B,CAAR,KAAmDD,IAAI,CAACjB,QAAL,KAAkBL,SAAS,CAACM,SAAtF,EAAiG;AAC/Fc,MAAAA,SAAS,GAAGE,IAAI,CAACD,WAAL,GAAmBD,SAA/B;AACAG,MAAAA,OAAO,GAAGD,IAAV;AACD;;AACDC,IAAAA,OAAO,GAAG,IAAV;;AACA,WAAO,CAACD,IAAI,GAAGxB,aAAa,CAACoB,WAAd,CAA0BK,OAA1B,CAAR,KAA+CD,IAAI,CAACjB,QAAL,KAAkBL,SAAS,CAACM,SAAlF,EAA6F;AAC3Fc,MAAAA,SAAS,IAAIE,IAAI,CAACD,WAAlB;AACAE,MAAAA,OAAO,GAAGD,IAAV;AACD;;AACD,WAAOF,SAAP;AACD;;AAhDsC;;AAmDzCK,MAAM,CAACC,OAAP,GAAiB;AACf7B,EAAAA,cAAc,EAAEI;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\n\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst DOMException = require(\"domexception\");\nconst NODE_TYPE = require(\"../node-type\");\n\nclass TextImpl extends CharacterDataImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this.nodeType = NODE_TYPE.TEXT_NODE;\n  }\n\n  splitText(offset) {\n    offset >>>= 0;\n\n    const { length } = this;\n\n    if (offset > length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    const count = length - offset;\n    const newData = this.substringData(offset, count);\n\n    const newNode = this._ownerDocument.createTextNode(newData);\n\n    const parent = domSymbolTree.parent(this);\n\n    if (parent !== null) {\n      parent.insertBefore(newNode, this.nextSibling);\n    }\n\n    this.replaceData(offset, count, \"\");\n\n    return newNode;\n\n    // TODO: range stuff\n  }\n\n  get wholeText() {\n    let wholeText = this.textContent;\n    let next;\n    let current = this;\n    while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText = next.textContent + wholeText;\n      current = next;\n    }\n    current = this;\n    while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText += next.textContent;\n      current = next;\n    }\n    return wholeText;\n  }\n}\n\nmodule.exports = {\n  implementation: TextImpl\n};\n"]},"metadata":{},"sourceType":"script"}