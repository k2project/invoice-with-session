{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { alertUnsavedChanges } from '../../../components/form/utils/handleUnsavedChanges';\n\nclass NewInvoice extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      invoice: {}\n    };\n    this.handleChanges = this.handleChanges.bind(this);\n    this.clearInitState = this.clearInitState.bind(this);\n    this.updateInitStateToReduxStateOnSubmit = this.updateInitStateToReduxStateOnSubmit.bind(this);\n  }\n\n  handleChanges() {\n    alertUnsavedChanges(this.state.invoice, //initial state\n    this.props.invoice, //redux updated state\n    `/dashboard/companies/${this.props.company._id}?tab=invoices`, // this.props.setUpdates,\n    this.props.history);\n  }\n\n  updateInitStateToReduxStateOnSubmit() {// this.props.setUpdates(this.props.company.details);\n  }\n\n  clearInitState() {//on submit clear app updates\n    // this.props.setUpdates(null);\n  }\n\n  componentDidMount() {\n    const invoice = {\n      no: null,\n      color: null,\n      profile: [],\n      company: [],\n      tasks: [],\n      notes: null\n    };\n    this.setState({\n      invoice\n    }); // this.props.setUpdates(\n    //     JSON.parse(JSON.stringify(this.props.company.details))\n    // );\n    // window.addEventListener('beforeunload', this.props.clearInitState);\n  }\n\n  componentWillUnmount() {\n    //auth err and logout won't trigger fun\n    if (this.props.authenticated) this.handleChanges(); // window.removeEventListener('beforeunload', this.props.clearInitState);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"company-invoice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, \"Create a new invoice.\"), /*#__PURE__*/React.createElement(InvoiceDoc, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(NewInvoiceSubmit, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nNewInvoice.propTypes = {\n  authenticated: PropTypes.bool,\n  profile: PropTypes.object,\n  company: PropTypes.object,\n  invoice: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  authenticated: state.session.authenticated,\n  profile: state.profile,\n  company: state.companies.find(c => c._id === state.session.currentCompany),\n  invoice: state.invoice\n});\n\nconst mapDispatchToProps = {\n  setInvoiceInitState\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(NewInvoice));","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js"],"names":["React","Component","PropTypes","withRouter","connect","setInvoiceInitState","InvoiceDoc","NewInvoiceSubmit","alertUnsavedChanges","NewInvoice","constructor","props","state","invoice","handleChanges","bind","clearInitState","updateInitStateToReduxStateOnSubmit","company","_id","history","componentDidMount","no","color","profile","tasks","notes","setState","componentWillUnmount","authenticated","render","propTypes","bool","object","mapStateToProps","session","companies","find","c","currentCompany","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { alertUnsavedChanges } from '../../../components/form/utils/handleUnsavedChanges';\n\nclass NewInvoice extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            invoice: {},\n        };\n        this.handleChanges = this.handleChanges.bind(this);\n        this.clearInitState = this.clearInitState.bind(this);\n        this.updateInitStateToReduxStateOnSubmit = this.updateInitStateToReduxStateOnSubmit.bind(\n            this\n        );\n    }\n    handleChanges() {\n        alertUnsavedChanges(\n            this.state.invoice, //initial state\n            this.props.invoice, //redux updated state\n            `/dashboard/companies/${this.props.company._id}?tab=invoices`,\n            // this.props.setUpdates,\n            this.props.history\n        );\n    }\n    updateInitStateToReduxStateOnSubmit() {\n        // this.props.setUpdates(this.props.company.details);\n    }\n    clearInitState() {\n        //on submit clear app updates\n        // this.props.setUpdates(null);\n    }\n    componentDidMount() {\n        const invoice = {\n            no: null,\n            color: null,\n            profile: [],\n            company: [],\n            tasks: [],\n            notes: null,\n        };\n        this.setState({ invoice });\n        // this.props.setUpdates(\n        //     JSON.parse(JSON.stringify(this.props.company.details))\n        // );\n        // window.addEventListener('beforeunload', this.props.clearInitState);\n    }\n    componentWillUnmount() {\n        //auth err and logout won't trigger fun\n        if (this.props.authenticated) this.handleChanges();\n        // window.removeEventListener('beforeunload', this.props.clearInitState);\n    }\n    render() {\n        return (\n            <section className='company-invoice'>\n                <h2 className='sr-only'>Create a new invoice.</h2>\n                <InvoiceDoc />\n                <NewInvoiceSubmit />\n            </section>\n        );\n    }\n}\n\nNewInvoice.propTypes = {\n    authenticated: PropTypes.bool,\n    profile: PropTypes.object,\n    company: PropTypes.object,\n    invoice: PropTypes.object,\n};\n\nconst mapStateToProps = (state) => ({\n    authenticated: state.session.authenticated,\n    profile: state.profile,\n    company: state.companies.find(\n        (c) => c._id === state.session.currentCompany\n    ),\n    invoice: state.invoice,\n});\n\nconst mapDispatchToProps = {\n    setInvoiceInitState,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(NewInvoice));\n"]},"metadata":{},"sourceType":"module"}