{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception\");\n\nconst OrderedSet = require(\"../helpers/ordered-set.js\");\n\nconst {\n  asciiLowercase\n} = require(\"../helpers/strings.js\");\n\nconst idlUtils = require(\"../generated/utils.js\");\n\nconst {\n  getAttributeValue,\n  setAttributeValue,\n  hasAttributeByName\n} = require(\"../attributes.js\");\n\nfunction validateTokens(...tokens) {\n  for (const token of tokens) {\n    if (token === \"\") {\n      throw new DOMException(\"The token provided must not be empty.\", \"SyntaxError\");\n    }\n  }\n\n  for (const token of tokens) {\n    if (/[\\t\\n\\f\\r ]/.test(token)) {\n      const whitespaceMsg = \"The token provided contains HTML space characters, which are not valid in tokens.\";\n      throw new DOMException(whitespaceMsg, \"InvalidCharacterError\");\n    }\n  }\n} // https://dom.spec.whatwg.org/#domtokenlist\n\n\nclass DOMTokenListImpl {\n  constructor(constructorArgs, privateData) {\n    // _syncWithElement() must always be called before any _tokenSet access.\n    this._tokenSet = new OrderedSet();\n    this._element = privateData.element;\n    this._attributeLocalName = privateData.attributeLocalName;\n    this._supportedTokens = privateData.supportedTokens; // Needs synchronization with element if token set is to be accessed.\n\n    this._dirty = true;\n  }\n\n  attrModified() {\n    this._dirty = true;\n  }\n\n  _syncWithElement() {\n    if (!this._dirty) {\n      return;\n    }\n\n    const val = getAttributeValue(this._element, this._attributeLocalName);\n\n    if (val === null) {\n      this._tokenSet.empty();\n    } else {\n      this._tokenSet = OrderedSet.parse(val);\n    }\n\n    this._dirty = false;\n  }\n\n  _validationSteps(token) {\n    if (!this._supportedTokens) {\n      throw new TypeError(`${this._attributeLocalName} attribute has no supported tokens`);\n    }\n\n    const lowerToken = asciiLowercase(token);\n    return this._supportedTokens.has(lowerToken);\n  }\n\n  _updateSteps() {\n    if (!hasAttributeByName(this._element, this._attributeLocalName) && this._tokenSet.isEmpty()) {\n      return;\n    }\n\n    setAttributeValue(this._element, this._attributeLocalName, this._tokenSet.serialize());\n  }\n\n  _serializeSteps() {\n    return getAttributeValue(this._element, this._attributeLocalName);\n  } // Used by other parts of jsdom\n\n\n  get tokenSet() {\n    this._syncWithElement();\n\n    return this._tokenSet;\n  }\n\n  get length() {\n    this._syncWithElement();\n\n    return this._tokenSet.size;\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    this._syncWithElement();\n\n    return this._tokenSet.keys();\n  }\n\n  item(index) {\n    this._syncWithElement();\n\n    if (index >= this._tokenSet.size) {\n      return null;\n    }\n\n    return this._tokenSet.get(index);\n  }\n\n  contains(token) {\n    this._syncWithElement();\n\n    return this._tokenSet.contains(token);\n  }\n\n  add(...tokens) {\n    for (const token of tokens) {\n      validateTokens(token);\n    }\n\n    this._syncWithElement();\n\n    for (const token of tokens) {\n      this._tokenSet.append(token);\n    }\n\n    this._updateSteps();\n  }\n\n  remove(...tokens) {\n    for (const token of tokens) {\n      validateTokens(token);\n    }\n\n    this._syncWithElement();\n\n    this._tokenSet.remove(...tokens);\n\n    this._updateSteps();\n  }\n\n  toggle(token, force = undefined) {\n    validateTokens(token);\n\n    this._syncWithElement();\n\n    if (this._tokenSet.contains(token)) {\n      if (force === undefined || force === false) {\n        this._tokenSet.remove(token);\n\n        this._updateSteps();\n\n        return false;\n      }\n\n      return true;\n    }\n\n    if (force === undefined || force === true) {\n      this._tokenSet.append(token);\n\n      this._updateSteps();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  replace(token, newToken) {\n    validateTokens(token, newToken);\n\n    this._syncWithElement();\n\n    if (!this._tokenSet.contains(token)) {\n      return false;\n    }\n\n    this._tokenSet.replace(token, newToken);\n\n    this._updateSteps();\n\n    return true;\n  }\n\n  supports(token) {\n    return this._validationSteps(token);\n  }\n\n  get value() {\n    return this._serializeSteps();\n  }\n\n  set value(V) {\n    setAttributeValue(this._element, this._attributeLocalName, V);\n  }\n\n}\n\nexports.implementation = DOMTokenListImpl;","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/DOMTokenList-impl.js"],"names":["DOMException","require","OrderedSet","asciiLowercase","idlUtils","getAttributeValue","setAttributeValue","hasAttributeByName","validateTokens","tokens","token","test","whitespaceMsg","DOMTokenListImpl","constructor","constructorArgs","privateData","_tokenSet","_element","element","_attributeLocalName","attributeLocalName","_supportedTokens","supportedTokens","_dirty","attrModified","_syncWithElement","val","empty","parse","_validationSteps","TypeError","lowerToken","has","_updateSteps","isEmpty","serialize","_serializeSteps","tokenSet","length","size","supportedPropertyIndices","keys","item","index","get","contains","add","append","remove","toggle","force","undefined","replace","newToken","supports","value","V","exports","implementation"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception\");\nconst OrderedSet = require(\"../helpers/ordered-set.js\");\nconst { asciiLowercase } = require(\"../helpers/strings.js\");\nconst idlUtils = require(\"../generated/utils.js\");\n\nconst { getAttributeValue, setAttributeValue, hasAttributeByName } = require(\"../attributes.js\");\n\nfunction validateTokens(...tokens) {\n  for (const token of tokens) {\n    if (token === \"\") {\n      throw new DOMException(\"The token provided must not be empty.\", \"SyntaxError\");\n    }\n  }\n  for (const token of tokens) {\n    if (/[\\t\\n\\f\\r ]/.test(token)) {\n      const whitespaceMsg = \"The token provided contains HTML space characters, which are not valid in tokens.\";\n      throw new DOMException(whitespaceMsg, \"InvalidCharacterError\");\n    }\n  }\n}\n\n// https://dom.spec.whatwg.org/#domtokenlist\nclass DOMTokenListImpl {\n  constructor(constructorArgs, privateData) {\n    // _syncWithElement() must always be called before any _tokenSet access.\n    this._tokenSet = new OrderedSet();\n    this._element = privateData.element;\n    this._attributeLocalName = privateData.attributeLocalName;\n    this._supportedTokens = privateData.supportedTokens;\n\n    // Needs synchronization with element if token set is to be accessed.\n    this._dirty = true;\n  }\n\n  attrModified() {\n    this._dirty = true;\n  }\n\n  _syncWithElement() {\n    if (!this._dirty) {\n      return;\n    }\n\n    const val = getAttributeValue(this._element, this._attributeLocalName);\n    if (val === null) {\n      this._tokenSet.empty();\n    } else {\n      this._tokenSet = OrderedSet.parse(val);\n    }\n\n    this._dirty = false;\n  }\n\n  _validationSteps(token) {\n    if (!this._supportedTokens) {\n      throw new TypeError(`${this._attributeLocalName} attribute has no supported tokens`);\n    }\n    const lowerToken = asciiLowercase(token);\n    return this._supportedTokens.has(lowerToken);\n  }\n\n  _updateSteps() {\n    if (!hasAttributeByName(this._element, this._attributeLocalName) && this._tokenSet.isEmpty()) {\n      return;\n    }\n    setAttributeValue(this._element, this._attributeLocalName, this._tokenSet.serialize());\n  }\n\n  _serializeSteps() {\n    return getAttributeValue(this._element, this._attributeLocalName);\n  }\n\n  // Used by other parts of jsdom\n  get tokenSet() {\n    this._syncWithElement();\n    return this._tokenSet;\n  }\n\n  get length() {\n    this._syncWithElement();\n    return this._tokenSet.size;\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    this._syncWithElement();\n    return this._tokenSet.keys();\n  }\n\n  item(index) {\n    this._syncWithElement();\n    if (index >= this._tokenSet.size) {\n      return null;\n    }\n    return this._tokenSet.get(index);\n  }\n\n  contains(token) {\n    this._syncWithElement();\n    return this._tokenSet.contains(token);\n  }\n\n  add(...tokens) {\n    for (const token of tokens) {\n      validateTokens(token);\n    }\n    this._syncWithElement();\n    for (const token of tokens) {\n      this._tokenSet.append(token);\n    }\n    this._updateSteps();\n  }\n\n  remove(...tokens) {\n    for (const token of tokens) {\n      validateTokens(token);\n    }\n    this._syncWithElement();\n    this._tokenSet.remove(...tokens);\n    this._updateSteps();\n  }\n\n  toggle(token, force = undefined) {\n    validateTokens(token);\n    this._syncWithElement();\n    if (this._tokenSet.contains(token)) {\n      if (force === undefined || force === false) {\n        this._tokenSet.remove(token);\n        this._updateSteps();\n        return false;\n      }\n      return true;\n    }\n    if (force === undefined || force === true) {\n      this._tokenSet.append(token);\n      this._updateSteps();\n      return true;\n    }\n    return false;\n  }\n\n  replace(token, newToken) {\n    validateTokens(token, newToken);\n    this._syncWithElement();\n    if (!this._tokenSet.contains(token)) {\n      return false;\n    }\n    this._tokenSet.replace(token, newToken);\n    this._updateSteps();\n    return true;\n  }\n\n  supports(token) {\n    return this._validationSteps(token);\n  }\n\n  get value() {\n    return this._serializeSteps();\n  }\n\n  set value(V) {\n    setAttributeValue(this._element, this._attributeLocalName, V);\n  }\n}\n\nexports.implementation = DOMTokenListImpl;\n"]},"metadata":{},"sourceType":"script"}