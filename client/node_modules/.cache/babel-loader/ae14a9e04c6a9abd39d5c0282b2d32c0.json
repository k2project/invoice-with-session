{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  isConnected,\n  descendantsByHTMLLocalNames\n} = require(\"../helpers/traversal\");\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\n\nconst notImplemented = require(\"../../browser/not-implemented\");\n\nconst {\n  reflectURLAttribute\n} = require(\"../../utils\");\n\nconst Event = require(\"../generated/Event\"); // http://www.whatwg.org/specs/web-apps/current-work/#category-listed\n\n\nconst listedElements = new Set([\"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"select\", \"textarea\"]); // https://html.spec.whatwg.org/multipage/forms.html#category-submit\n\nconst submittableElements = new Set([\"button\", \"input\", \"object\", \"select\", \"textarea\"]);\nconst encTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nconst methods = new Set([\"get\", \"post\", \"dialog\"]);\nconst constraintValidationPositiveResult = Symbol(\"positive\");\nconst constraintValidationNegativeResult = Symbol(\"negative\");\n\nclass HTMLFormElementImpl extends HTMLElementImpl {\n  _descendantAdded(parent, child) {\n    const form = this;\n\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(form);\n      }\n    }\n\n    super._descendantAdded.apply(this, arguments);\n  }\n\n  _descendantRemoved(parent, child) {\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(null);\n      }\n    }\n\n    super._descendantRemoved.apply(this, arguments);\n  }\n\n  get elements() {\n    return HTMLCollection.createImpl([], {\n      element: this,\n      query: () => descendantsByHTMLLocalNames(this, listedElements)\n    });\n  }\n\n  get length() {\n    return this.elements.length;\n  }\n\n  _doSubmit() {\n    if (!isConnected(this)) {\n      return;\n    }\n\n    const ev = this._ownerDocument.createEvent(\"HTMLEvents\");\n\n    ev.initEvent(\"submit\", true, true);\n\n    if (this.dispatchEvent(ev)) {\n      this.submit();\n    }\n  }\n\n  submit() {\n    notImplemented(\"HTMLFormElement.prototype.submit\", this._ownerDocument._defaultView);\n  }\n\n  reset() {\n    for (const el of this.elements) {\n      if (typeof el._formReset === \"function\") {\n        el._formReset();\n      }\n    }\n  }\n\n  get method() {\n    let method = this.getAttribute(\"method\");\n\n    if (method) {\n      method = method.toLowerCase();\n    }\n\n    if (methods.has(method)) {\n      return method;\n    }\n\n    return \"get\";\n  }\n\n  set method(V) {\n    this.setAttribute(\"method\", V);\n  }\n\n  get enctype() {\n    let type = this.getAttribute(\"enctype\");\n\n    if (type) {\n      type = type.toLowerCase();\n    }\n\n    if (encTypes.has(type)) {\n      return type;\n    }\n\n    return \"application/x-www-form-urlencoded\";\n  }\n\n  set enctype(V) {\n    this.setAttribute(\"enctype\", V);\n  }\n\n  get action() {\n    const attributeValue = this.getAttribute(\"action\");\n\n    if (attributeValue === null || attributeValue === \"\") {\n      return this._ownerDocument.URL;\n    }\n\n    return reflectURLAttribute(this, \"action\");\n  }\n\n  set action(V) {\n    this.setAttribute(\"action\", V);\n  } // If the checkValidity() method is invoked, the user agent must statically validate the\n  // constraints of the form element, and return true if the constraint validation returned\n  // a positive result, and false if it returned a negative result.\n\n\n  checkValidity() {\n    return this._staticallyValidateConstraints().result === constraintValidationPositiveResult;\n  } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#interactively-validate-the-constraints\n\n\n  reportValidity() {\n    return this.checkValidity();\n  } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#statically-validate-the-constraints\n\n\n  _staticallyValidateConstraints() {\n    const controls = [];\n\n    for (const el of domSymbolTree.treeIterator(this)) {\n      if (el.form === this && submittableElements.has(el.nodeName.toLowerCase())) {\n        controls.push(el);\n      }\n    }\n\n    const invalidControls = [];\n\n    for (const control of controls) {\n      if (control._isCandidateForConstraintValidation() && !control._satisfiesConstraints()) {\n        invalidControls.push(control);\n      }\n    }\n\n    if (invalidControls.length === 0) {\n      return {\n        result: constraintValidationPositiveResult\n      };\n    }\n\n    const unhandledInvalidControls = [];\n\n    for (const invalidControl of invalidControls) {\n      const notCancelled = invalidControl.dispatchEvent(Event.createImpl([\"invalid\", {\n        cancelable: true\n      }]));\n\n      if (notCancelled) {\n        unhandledInvalidControls.push(invalidControl);\n      }\n    }\n\n    return {\n      result: constraintValidationNegativeResult,\n      unhandledInvalidControls\n    };\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLFormElementImpl\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFormElement-impl.js"],"names":["HTMLElementImpl","require","implementation","isConnected","descendantsByHTMLLocalNames","domSymbolTree","HTMLCollection","notImplemented","reflectURLAttribute","Event","listedElements","Set","submittableElements","encTypes","methods","constraintValidationPositiveResult","Symbol","constraintValidationNegativeResult","HTMLFormElementImpl","_descendantAdded","parent","child","form","el","treeIterator","_changedFormOwner","apply","arguments","_descendantRemoved","elements","createImpl","element","query","length","_doSubmit","ev","_ownerDocument","createEvent","initEvent","dispatchEvent","submit","_defaultView","reset","_formReset","method","getAttribute","toLowerCase","has","V","setAttribute","enctype","type","action","attributeValue","URL","checkValidity","_staticallyValidateConstraints","result","reportValidity","controls","nodeName","push","invalidControls","control","_isCandidateForConstraintValidation","_satisfiesConstraints","unhandledInvalidControls","invalidControl","notCancelled","cancelable","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { isConnected, descendantsByHTMLLocalNames } = require(\"../helpers/traversal\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\nconst notImplemented = require(\"../../browser/not-implemented\");\nconst { reflectURLAttribute } = require(\"../../utils\");\nconst Event = require(\"../generated/Event\");\n\n// http://www.whatwg.org/specs/web-apps/current-work/#category-listed\nconst listedElements = new Set([\"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"select\", \"textarea\"]);\n\n// https://html.spec.whatwg.org/multipage/forms.html#category-submit\nconst submittableElements = new Set([\"button\", \"input\", \"object\", \"select\", \"textarea\"]);\n\nconst encTypes = new Set([\n  \"application/x-www-form-urlencoded\",\n  \"multipart/form-data\",\n  \"text/plain\"\n]);\n\nconst methods = new Set([\n  \"get\",\n  \"post\",\n  \"dialog\"\n]);\n\nconst constraintValidationPositiveResult = Symbol(\"positive\");\nconst constraintValidationNegativeResult = Symbol(\"negative\");\n\nclass HTMLFormElementImpl extends HTMLElementImpl {\n  _descendantAdded(parent, child) {\n    const form = this;\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(form);\n      }\n    }\n\n    super._descendantAdded.apply(this, arguments);\n  }\n\n  _descendantRemoved(parent, child) {\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(null);\n      }\n    }\n\n    super._descendantRemoved.apply(this, arguments);\n  }\n\n  get elements() {\n    return HTMLCollection.createImpl([], {\n      element: this,\n      query: () => descendantsByHTMLLocalNames(this, listedElements)\n    });\n  }\n\n  get length() {\n    return this.elements.length;\n  }\n\n  _doSubmit() {\n    if (!isConnected(this)) {\n      return;\n    }\n    const ev = this._ownerDocument.createEvent(\"HTMLEvents\");\n    ev.initEvent(\"submit\", true, true);\n    if (this.dispatchEvent(ev)) {\n      this.submit();\n    }\n  }\n\n  submit() {\n    notImplemented(\"HTMLFormElement.prototype.submit\", this._ownerDocument._defaultView);\n  }\n\n  reset() {\n    for (const el of this.elements) {\n      if (typeof el._formReset === \"function\") {\n        el._formReset();\n      }\n    }\n  }\n\n  get method() {\n    let method = this.getAttribute(\"method\");\n    if (method) {\n      method = method.toLowerCase();\n    }\n\n    if (methods.has(method)) {\n      return method;\n    }\n    return \"get\";\n  }\n\n  set method(V) {\n    this.setAttribute(\"method\", V);\n  }\n\n  get enctype() {\n    let type = this.getAttribute(\"enctype\");\n    if (type) {\n      type = type.toLowerCase();\n    }\n\n    if (encTypes.has(type)) {\n      return type;\n    }\n    return \"application/x-www-form-urlencoded\";\n  }\n\n  set enctype(V) {\n    this.setAttribute(\"enctype\", V);\n  }\n\n  get action() {\n    const attributeValue = this.getAttribute(\"action\");\n    if (attributeValue === null || attributeValue === \"\") {\n      return this._ownerDocument.URL;\n    }\n\n    return reflectURLAttribute(this, \"action\");\n  }\n\n  set action(V) {\n    this.setAttribute(\"action\", V);\n  }\n\n  // If the checkValidity() method is invoked, the user agent must statically validate the\n  // constraints of the form element, and return true if the constraint validation returned\n  // a positive result, and false if it returned a negative result.\n  checkValidity() {\n    return this._staticallyValidateConstraints().result === constraintValidationPositiveResult;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#interactively-validate-the-constraints\n  reportValidity() {\n    return this.checkValidity();\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#statically-validate-the-constraints\n  _staticallyValidateConstraints() {\n    const controls = [];\n    for (const el of domSymbolTree.treeIterator(this)) {\n      if (el.form === this && submittableElements.has(el.nodeName.toLowerCase())) {\n        controls.push(el);\n      }\n    }\n\n    const invalidControls = [];\n\n    for (const control of controls) {\n      if (control._isCandidateForConstraintValidation() && !control._satisfiesConstraints()) {\n        invalidControls.push(control);\n      }\n    }\n\n    if (invalidControls.length === 0) {\n      return { result: constraintValidationPositiveResult };\n    }\n\n    const unhandledInvalidControls = [];\n    for (const invalidControl of invalidControls) {\n      const notCancelled = invalidControl.dispatchEvent(Event.createImpl([\"invalid\", { cancelable: true }]));\n      if (notCancelled) {\n        unhandledInvalidControls.push(invalidControl);\n      }\n    }\n\n    return { result: constraintValidationNegativeResult, unhandledInvalidControls };\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLFormElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}