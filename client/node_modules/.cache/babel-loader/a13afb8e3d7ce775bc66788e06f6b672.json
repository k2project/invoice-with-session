{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/form/forms/CustomBuiltForm.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport '../Form.scss';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport FormErrorsDisplay from '../components/FormErrorsDisplay';\nimport { isRequired, isValidated } from '../utils/validations';\nimport { customInputOnChange, formErrorsStyling } from '../utils/formFuns';\nimport AddCustomFields from './AddCustomFields';\nimport RemoveCustomFields from './RemoveCustomFields';\nimport { setAlert } from '../../../redux/actions/messages';\n\nconst CustomBuiltForm = ({\n  data: {\n    details,\n    http,\n    url,\n    cb,\n    msg,\n    reset\n  },\n  setAlert,\n  history\n}) => {\n  //declare Form's State\n  const [formState, setFormState] = useState(details);\n  const [errors, setErrors] = useState([]);\n\n  const addCustomToFieldsFormState = field => {\n    const position = field.position;\n    delete field.position;\n    formState.splice(position, 0, field);\n    setFormState([...formState]);\n  };\n\n  const removeCustomFieldsFromFormState = field => {\n    const index = formState.indexOf(field);\n    formState.splice(index, 1);\n    setFormState([...formState]);\n  }; //handle input change\n\n\n  const updateInput = (e, id) => {\n    customInputOnChange(e, id, formState, setFormState, errors, setErrors);\n  };\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    const errArr = [];\n    isRequired(formState, errArr);\n    isValidated(formState, errArr);\n\n    if (errArr.length > 0) {\n      setErrors(errArr);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const body = JSON.stringify(formState);\n      const res = await axios.post(http, body, config);\n      await cb();\n      setAlert(msg, 'success', null, false); //reset data\n\n      if (reset) setFormState(formState.map(i => i.value = '')); //redirect\n\n      history.push(`${url}${res.data.id ? res.data.id : ''}`);\n    } catch (err) {\n      // if (err.response) {\n      //     const { status, statusText } = err.response;\n      //     setAlert(`${status} ${statusText}`, 'danger', null, false);\n      // }\n      if (err.response.data) {\n        setErrors([...errors, ...err.response.data.errors]);\n      }\n    }\n  };\n\n  useEffect(() => {\n    formErrorsStyling(errors);\n  }, [errors]);\n  const orderedFields = formState.filter(field => field.order);\n  const customFields = formState.filter(field => field.custom);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    className: \"form form__submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 25\n    }\n  }, \"Use this form to create or update the details of this page.\"), \"* Regired fields.\"), formState.map((input, i) => {\n    const {\n      _id,\n      label,\n      inputType,\n      value,\n      required\n    } = input;\n    if (inputType === 'text') return /*#__PURE__*/React.createElement(Fragment, {\n      key: _id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: _id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 37\n      }\n    }, i + 1, \". \", label, required ? '*' : null), /*#__PURE__*/React.createElement(\"input\", {\n      id: _id,\n      type: inputType,\n      value: value,\n      onChange: e => updateInput(e, _id),\n      className: 'form__input ci--on-change',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 37\n      }\n    }));\n    if (inputType === 'textarea') return /*#__PURE__*/React.createElement(Fragment, {\n      key: _id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: _id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 37\n      }\n    }, i + 1, \". \", label, required ? '*' : null), /*#__PURE__*/React.createElement(\"textarea\", {\n      id: _id,\n      value: value,\n      onChange: e => updateInput(e, _id),\n      className: \"ci--on-change\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 37\n      }\n    }));\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn--info\",\n    onMouseDown: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }, \"Submit\")), errors.length > 0 && /*#__PURE__*/React.createElement(FormErrorsDisplay, {\n    errors: errors,\n    label: \"Page main form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AddCustomFields, {\n    addCustomToFieldsFormState: addCustomToFieldsFormState,\n    maxPosition: formState.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }), customFields.length > 0 && /*#__PURE__*/React.createElement(RemoveCustomFields, {\n    customFields: customFields,\n    removeCustomFieldsFromFormState: removeCustomFieldsFromFormState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 21\n    }\n  })));\n};\n\nconst mapDispatchToProps = {\n  setAlert\n};\nexport default connect(null, mapDispatchToProps)(withRouter(CustomBuiltForm));","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/form/forms/CustomBuiltForm.js"],"names":["React","useState","useEffect","Fragment","axios","connect","withRouter","FormErrorsDisplay","isRequired","isValidated","customInputOnChange","formErrorsStyling","AddCustomFields","RemoveCustomFields","setAlert","CustomBuiltForm","data","details","http","url","cb","msg","reset","history","formState","setFormState","errors","setErrors","addCustomToFieldsFormState","field","position","splice","removeCustomFieldsFromFormState","index","indexOf","updateInput","e","id","onSubmit","preventDefault","errArr","length","config","headers","body","JSON","stringify","res","post","map","i","value","push","err","response","orderedFields","filter","order","customFields","custom","input","_id","label","inputType","required","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport '../Form.scss';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport FormErrorsDisplay from '../components/FormErrorsDisplay';\nimport { isRequired, isValidated } from '../utils/validations';\nimport { customInputOnChange, formErrorsStyling } from '../utils/formFuns';\nimport AddCustomFields from './AddCustomFields';\nimport RemoveCustomFields from './RemoveCustomFields';\nimport { setAlert } from '../../../redux/actions/messages';\n\nconst CustomBuiltForm = ({\n    data: { details, http, url, cb, msg, reset },\n    setAlert,\n    history,\n}) => {\n    //declare Form's State\n    const [formState, setFormState] = useState(details);\n    const [errors, setErrors] = useState([]);\n\n    const addCustomToFieldsFormState = (field) => {\n        const position = field.position;\n        delete field.position;\n        formState.splice(position, 0, field);\n        setFormState([...formState]);\n    };\n    const removeCustomFieldsFromFormState = (field) => {\n        const index = formState.indexOf(field);\n        formState.splice(index, 1);\n        setFormState([...formState]);\n    };\n\n    //handle input change\n    const updateInput = (e, id) => {\n        customInputOnChange(e, id, formState, setFormState, errors, setErrors);\n    };\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        const errArr = [];\n        isRequired(formState, errArr);\n        isValidated(formState, errArr);\n        if (errArr.length > 0) {\n            setErrors(errArr);\n            return;\n        }\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            const body = JSON.stringify(formState);\n            const res = await axios.post(http, body, config);\n            await cb();\n            setAlert(msg, 'success', null, false);\n            //reset data\n            if (reset) setFormState(formState.map((i) => (i.value = '')));\n            //redirect\n            history.push(`${url}${res.data.id ? res.data.id : ''}`);\n        } catch (err) {\n            // if (err.response) {\n            //     const { status, statusText } = err.response;\n            //     setAlert(`${status} ${statusText}`, 'danger', null, false);\n            // }\n\n            if (err.response.data) {\n                setErrors([...errors, ...err.response.data.errors]);\n            }\n        }\n    };\n\n    useEffect(() => {\n        formErrorsStyling(errors);\n    }, [errors]);\n    const orderedFields = formState.filter((field) => field.order);\n    const customFields = formState.filter((field) => field.custom);\n\n    return (\n        <form onSubmit={onSubmit} className='form form__submit'>\n            <div>\n                <fieldset>\n                    <legend>\n                        <span className='sr-only'>\n                            Use this form to create or update the details of\n                            this page.\n                        </span>\n                        * Regired fields.\n                    </legend>\n                    {formState.map((input, i) => {\n                        const {\n                            _id,\n                            label,\n                            inputType,\n                            value,\n                            required,\n                        } = input;\n                        if (inputType === 'text')\n                            return (\n                                <Fragment key={_id}>\n                                    <label htmlFor={_id}>\n                                        {i + 1}. {label}\n                                        {required ? '*' : null}\n                                    </label>\n                                    <input\n                                        id={_id}\n                                        type={inputType}\n                                        value={value}\n                                        onChange={(e) => updateInput(e, _id)}\n                                        className={'form__input ci--on-change'}\n                                    />\n                                </Fragment>\n                            );\n                        if (inputType === 'textarea')\n                            return (\n                                <Fragment key={_id}>\n                                    <label htmlFor={_id}>\n                                        {i + 1}. {label}\n                                        {required ? '*' : null}\n                                    </label>\n                                    <textarea\n                                        id={_id}\n                                        value={value}\n                                        onChange={(e) => updateInput(e, _id)}\n                                        className='ci--on-change'\n                                    />\n                                </Fragment>\n                            );\n                    })}\n                    <button\n                        className='btn btn--info'\n                        onMouseDown={(e) => e.preventDefault()}\n                    >\n                        Submit\n                    </button>\n                </fieldset>\n                {errors.length > 0 && (\n                    <FormErrorsDisplay errors={errors} label='Page main form' />\n                )}\n            </div>\n            <div>\n                <AddCustomFields\n                    addCustomToFieldsFormState={addCustomToFieldsFormState}\n                    maxPosition={formState.length}\n                />\n                {customFields.length > 0 && (\n                    <RemoveCustomFields\n                        customFields={customFields}\n                        removeCustomFieldsFromFormState={\n                            removeCustomFieldsFromFormState\n                        }\n                    />\n                )}\n            </div>\n        </form>\n    );\n};\n\nconst mapDispatchToProps = {\n    setAlert,\n};\nexport default connect(null, mapDispatchToProps)(withRouter(CustomBuiltForm));\n"]},"metadata":{},"sourceType":"module"}