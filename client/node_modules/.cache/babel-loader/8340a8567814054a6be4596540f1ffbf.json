{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport { updateCompanyArr } from '../../../redux/actions/companies';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { alertUnsavedChanges } from '../../../components/form/utils/handleUnsavedChanges';\nimport { getInputValueByLabel } from '../../../components/form/utils/customFormQueries';\nimport { date_YYYY_MM, date_DD_MM_YYYY } from '../../../components/calendar/dates';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass NewInvoice extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      invoice: null\n    };\n    this.handleChanges = this.handleChanges.bind(this);\n    this.resestInvoiceState = this.resestInvoiceState.bind(this);\n  }\n\n  resestInvoiceState() {//on submit clear app updates\n    // this.props.setUpdates(null);\n  }\n\n  componentDidMount() {\n    //set current tabs for handling unsaved changes redirection\n    this.setState({ ...this.state,\n      tabs: window.location.search\n    });\n    let invoiceInitState;\n\n    if (this.props.session.newInvoiceLoaded) {\n      //set all tasks to be excluded from invoice on load of a new invoice\n      const noTasksIncluded = this.props.company.tasks.map(t => t.addToInvoice = false);\n      updateCompanyArr('tasks', noTasksIncluded, this.props.company._id); //invoice num #\n\n      let company_abbr = getInputValueByLabel(this.props.company.details, 'Name').split(' ');\n\n      if (company_abbr.length > 1 && company_abbr[1]) {\n        company_abbr = company_abbr.map(el => el[0].toUpperCase()).join('');\n      } else {\n        company_abbr = company_abbr[0].slice(0, 3).toUpperCase();\n      }\n\n      let invoices_num = '1';\n      if (this.props.company.invoices) invoices_num = String(this.props.company.invoices.length + 1);\n\n      while (invoices_num.length < 5) {\n        invoices_num = '0' + invoices_num;\n      }\n\n      let saved_as = company_abbr + '-';\n      saved_as += date_YYYY_MM(new Date()) + '-';\n      saved_as += invoices_num; //generate due date in 14 days\n\n      const TWO_WEEKS = 1.21e9;\n      let due_date = date_DD_MM_YYYY(new Date().getTime() + TWO_WEEKS); //a new invoice\n\n      invoiceInitState = {\n        _id: uuidv4(),\n        created_at: new Date(),\n        saved_as,\n        issue_date: date_DD_MM_YYYY(new Date()),\n        due_date,\n        bg_color: localStorage.invoice_bg || 'blue',\n        text_color: localStorage.invoice_txt || 'white',\n        profile: JSON.parse(JSON.stringify(this.props.profile.details)),\n        company: JSON.parse(JSON.stringify(this.props.company.details)),\n        tasks: [],\n        discount: 0,\n        tax: 0,\n        fees: 0,\n        notes: 'Thank you for your business.',\n        currency: ''\n      }; //set init state for comparison on component unmounting\n\n      this.setState({\n        invoice: JSON.parse(JSON.stringify(invoiceInitState))\n      }); //set redux state\n\n      this.props.setInvoiceInitState(invoiceInitState);\n    }\n\n    const searchArr = window.location.search.split('&');\n\n    if (searchArr[1]) {\n      //updating an existing invoice\n      //?updating=...\n      //downlaoding an existing invoice\n      //?download=...\n      const invoice_ID = searchArr[1].slice(9);\n      const invoiceToLoad = this.props.company.invoices.find(invoice => invoice._id === invoice_ID);\n\n      if (invoiceToLoad) {\n        //invoiceInitState from the invoices arr\n        invoiceInitState = invoiceToLoad; //add invoice tasks to existing tasks of the current company\n\n        const tasksArrIncInvoiceTasks = [...invoiceToLoad.tasks, ...this.props.company.tasks];\n        this.props.updateCompanyArr('tasks', tasksArrIncInvoiceTasks, this.props.company._id);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    //auth err and logout won't trigger fun\n    if (this.props.session.authenticated) this.handleChanges();\n  }\n\n  handleChanges() {\n    //TASKS CAN BE AMENDED/UPDATED IN FORM  WITH EFECT ON DB HENCE NEED TO CHECK INIT STATE AGAINST COMPANY.TASKS NOT INVOICE.TASKS!!!\n    console.log(JSON.stringify(this.state.invoice) === JSON.stringify(this.props.invoice));\n    this.props.invoice.tasks = this.props.company.tasks.filter(t => t.addToInvoice);\n    console.log(this.state.invoice, this.props.invoice);\n    alertUnsavedChanges(this.state.invoice, this.props.invoice, `/dashboard/companies/${this.props.company._id}${this.state.tabs}`, null, this.props.history);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"company-invoice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, \"Create a new invoice.\"), /*#__PURE__*/React.createElement(InvoiceDoc, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(NewInvoiceSubmit, {\n      invoiceInitState: this.state.invoice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nNewInvoice.propTypes = {\n  session: PropTypes.object,\n  profile: PropTypes.object,\n  company: PropTypes.object,\n  invoice: PropTypes.object,\n  updateCompanyArr: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  session: state.session,\n  profile: state.profile,\n  company: state.companies.find(c => c._id === state.session.currentCompany),\n  invoice: state.invoice\n});\n\nconst mapDispatchToProps = {\n  setInvoiceInitState,\n  updateCompanyArr\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(NewInvoice));","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js"],"names":["React","Component","PropTypes","withRouter","connect","setInvoiceInitState","updateCompanyArr","InvoiceDoc","NewInvoiceSubmit","alertUnsavedChanges","getInputValueByLabel","date_YYYY_MM","date_DD_MM_YYYY","v4","uuidv4","NewInvoice","constructor","props","state","invoice","handleChanges","bind","resestInvoiceState","componentDidMount","setState","tabs","window","location","search","invoiceInitState","session","newInvoiceLoaded","noTasksIncluded","company","tasks","map","t","addToInvoice","_id","company_abbr","details","split","length","el","toUpperCase","join","slice","invoices_num","invoices","String","saved_as","Date","TWO_WEEKS","due_date","getTime","created_at","issue_date","bg_color","localStorage","invoice_bg","text_color","invoice_txt","profile","JSON","parse","stringify","discount","tax","fees","notes","currency","searchArr","invoice_ID","invoiceToLoad","find","tasksArrIncInvoiceTasks","componentWillUnmount","authenticated","console","log","filter","history","render","propTypes","object","func","mapStateToProps","companies","c","currentCompany","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport { updateCompanyArr } from '../../../redux/actions/companies';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { alertUnsavedChanges } from '../../../components/form/utils/handleUnsavedChanges';\nimport { getInputValueByLabel } from '../../../components/form/utils/customFormQueries';\nimport {\n    date_YYYY_MM,\n    date_DD_MM_YYYY,\n} from '../../../components/calendar/dates';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass NewInvoice extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            invoice: null,\n        };\n        this.handleChanges = this.handleChanges.bind(this);\n        this.resestInvoiceState = this.resestInvoiceState.bind(this);\n    }\n\n    resestInvoiceState() {\n        //on submit clear app updates\n        // this.props.setUpdates(null);\n    }\n    componentDidMount() {\n        //set current tabs for handling unsaved changes redirection\n        this.setState({ ...this.state, tabs: window.location.search });\n        let invoiceInitState;\n        if (this.props.session.newInvoiceLoaded) {\n            //set all tasks to be excluded from invoice on load of a new invoice\n            const noTasksIncluded = this.props.company.tasks.map(\n                (t) => (t.addToInvoice = false)\n            );\n            updateCompanyArr('tasks', noTasksIncluded, this.props.company._id);\n            //invoice num #\n            let company_abbr = getInputValueByLabel(\n                this.props.company.details,\n                'Name'\n            ).split(' ');\n            if (company_abbr.length > 1 && company_abbr[1]) {\n                company_abbr = company_abbr\n                    .map((el) => el[0].toUpperCase())\n                    .join('');\n            } else {\n                company_abbr = company_abbr[0].slice(0, 3).toUpperCase();\n            }\n            let invoices_num = '1';\n            if (this.props.company.invoices)\n                invoices_num = String(this.props.company.invoices.length + 1);\n            while (invoices_num.length < 5) {\n                invoices_num = '0' + invoices_num;\n            }\n            let saved_as = company_abbr + '-';\n            saved_as += date_YYYY_MM(new Date()) + '-';\n            saved_as += invoices_num;\n            //generate due date in 14 days\n            const TWO_WEEKS = 1.21e9;\n            let due_date = date_DD_MM_YYYY(new Date().getTime() + TWO_WEEKS);\n            //a new invoice\n            invoiceInitState = {\n                _id: uuidv4(),\n                created_at: new Date(),\n                saved_as,\n                issue_date: date_DD_MM_YYYY(new Date()),\n                due_date,\n                bg_color: localStorage.invoice_bg || 'blue',\n                text_color: localStorage.invoice_txt || 'white',\n                profile: JSON.parse(JSON.stringify(this.props.profile.details)),\n                company: JSON.parse(JSON.stringify(this.props.company.details)),\n                tasks: [],\n                discount: 0,\n                tax: 0,\n                fees: 0,\n                notes: 'Thank you for your business.',\n                currency: '',\n            };\n            //set init state for comparison on component unmounting\n            this.setState({\n                invoice: JSON.parse(JSON.stringify(invoiceInitState)),\n            });\n\n            //set redux state\n            this.props.setInvoiceInitState(invoiceInitState);\n        }\n\n        const searchArr = window.location.search.split('&');\n        if (searchArr[1]) {\n            //updating an existing invoice\n            //?updating=...\n            //downlaoding an existing invoice\n            //?download=...\n            const invoice_ID = searchArr[1].slice(9);\n            const invoiceToLoad = this.props.company.invoices.find(\n                (invoice) => invoice._id === invoice_ID\n            );\n            if (invoiceToLoad) {\n                //invoiceInitState from the invoices arr\n                invoiceInitState = invoiceToLoad;\n                //add invoice tasks to existing tasks of the current company\n                const tasksArrIncInvoiceTasks = [\n                    ...invoiceToLoad.tasks,\n                    ...this.props.company.tasks,\n                ];\n                this.props.updateCompanyArr(\n                    'tasks',\n                    tasksArrIncInvoiceTasks,\n                    this.props.company._id\n                );\n            }\n        }\n    }\n    componentWillUnmount() {\n        //auth err and logout won't trigger fun\n        if (this.props.session.authenticated) this.handleChanges();\n    }\n    handleChanges() {\n        //TASKS CAN BE AMENDED/UPDATED IN FORM  WITH EFECT ON DB HENCE NEED TO CHECK INIT STATE AGAINST COMPANY.TASKS NOT INVOICE.TASKS!!!\n        console.log(\n            JSON.stringify(this.state.invoice) ===\n                JSON.stringify(this.props.invoice)\n        );\n        this.props.invoice.tasks = this.props.company.tasks.filter(\n            (t) => t.addToInvoice\n        );\n        console.log(this.state.invoice, this.props.invoice);\n\n        alertUnsavedChanges(\n            this.state.invoice,\n            this.props.invoice,\n            `/dashboard/companies/${this.props.company._id}${this.state.tabs}`,\n            null,\n            this.props.history\n        );\n    }\n    render() {\n        return (\n            <section className='company-invoice'>\n                <h2 className='sr-only'>Create a new invoice.</h2>\n                <InvoiceDoc />\n                <NewInvoiceSubmit invoiceInitState={this.state.invoice} />\n            </section>\n        );\n    }\n}\n\nNewInvoice.propTypes = {\n    session: PropTypes.object,\n    profile: PropTypes.object,\n    company: PropTypes.object,\n    invoice: PropTypes.object,\n    updateCompanyArr: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n    session: state.session,\n    profile: state.profile,\n    company: state.companies.find(\n        (c) => c._id === state.session.currentCompany\n    ),\n    invoice: state.invoice,\n});\n\nconst mapDispatchToProps = {\n    setInvoiceInitState,\n    updateCompanyArr,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(NewInvoice));\n"]},"metadata":{},"sourceType":"module"}