{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nconst ValidityState = require(\"../generated/ValidityState\");\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst DOMException = require(\"domexception\");\n\nconst {\n  closest\n} = require(\"../helpers/traversal\");\n\nconst {\n  normalizeToCRLF,\n  getLabelsForLabelable\n} = require(\"../helpers/form-controls\");\n\nconst {\n  childTextContent\n} = require(\"../helpers/text\");\n\nclass HTMLTextAreaElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._rawValue = \"\";\n    this._dirtyValue = false;\n    this._customValidityErrorMessage = \"\";\n    this._labels = null;\n  }\n\n  _formReset() {\n    this._rawValue = childTextContent(this);\n    this._dirtyValue = false;\n  }\n\n  _getAPIValue() {\n    return this._rawValue.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n  }\n\n  _getValue() {\n    // Hard-wrapping omitted, for now.\n    return normalizeToCRLF(this._rawValue);\n  }\n\n  _childTextContentChangeSteps() {\n    if (this._dirtyValue === false) {\n      this._rawValue = childTextContent(this);\n    }\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return closest(this, \"form\");\n  }\n\n  get defaultValue() {\n    return childTextContent(this);\n  }\n\n  set defaultValue(val) {\n    this.textContent = val;\n  }\n\n  get value() {\n    return this._getAPIValue();\n  }\n\n  set value(val) {\n    this._rawValue = val;\n    this._dirtyValue = true;\n    this._selectionStart = 0;\n    this._selectionEnd = 0;\n    this._selectionDirection = \"none\";\n  }\n\n  get textLength() {\n    return this.value.length; // code unit length (16 bit)\n  }\n\n  get type() {\n    return \"textarea\";\n  }\n\n  _dispatchSelectEvent() {\n    const event = this._ownerDocument.createEvent(\"HTMLEvents\");\n\n    event.initEvent(\"select\", true, true);\n    this.dispatchEvent(event);\n  }\n\n  _getValueLength() {\n    return typeof this.value === \"string\" ? this.value.length : 0;\n  }\n\n  select() {\n    this._selectionStart = 0;\n    this._selectionEnd = this._getValueLength();\n    this._selectionDirection = \"none\";\n\n    this._dispatchSelectEvent();\n  }\n\n  get selectionStart() {\n    return this._selectionStart;\n  }\n\n  set selectionStart(start) {\n    this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n  }\n\n  get selectionEnd() {\n    return this._selectionEnd;\n  }\n\n  set selectionEnd(end) {\n    this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n  }\n\n  get selectionDirection() {\n    return this._selectionDirection;\n  }\n\n  set selectionDirection(dir) {\n    this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n  }\n\n  setSelectionRange(start, end, dir) {\n    this._selectionEnd = Math.min(end, this._getValueLength());\n    this._selectionStart = Math.min(start, this._selectionEnd);\n    this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n\n    this._dispatchSelectEvent();\n  }\n\n  setRangeText(repl, start, end, selectionMode = \"preserve\") {\n    if (arguments.length < 2) {\n      start = this._selectionStart;\n      end = this._selectionEnd;\n    } else if (start > end) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    start = Math.min(start, this._getValueLength());\n    end = Math.min(end, this._getValueLength());\n    const val = this.value;\n    let selStart = this._selectionStart;\n    let selEnd = this._selectionEnd;\n    this.value = val.slice(0, start) + repl + val.slice(end);\n    const newEnd = start + this.value.length;\n\n    if (selectionMode === \"select\") {\n      this.setSelectionRange(start, newEnd);\n    } else if (selectionMode === \"start\") {\n      this.setSelectionRange(start, start);\n    } else if (selectionMode === \"end\") {\n      this.setSelectionRange(newEnd, newEnd);\n    } else {\n      // preserve\n      const delta = repl.length - (end - start);\n\n      if (selStart > end) {\n        selStart += delta;\n      } else if (selStart > start) {\n        selStart = start;\n      }\n\n      if (selEnd > end) {\n        selEnd += delta;\n      } else if (selEnd > start) {\n        selEnd = newEnd;\n      }\n\n      this.setSelectionRange(selStart, selEnd);\n    }\n  }\n\n  get cols() {\n    if (!this.hasAttribute(\"cols\")) {\n      return 20;\n    }\n\n    return parseInt(this.getAttribute(\"cols\"));\n  }\n\n  set cols(value) {\n    if (value <= 0) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    this.setAttribute(\"cols\", String(value));\n  }\n\n  get rows() {\n    if (!this.hasAttribute(\"rows\")) {\n      return 2;\n    }\n\n    return parseInt(this.getAttribute(\"rows\"));\n  }\n\n  set rows(value) {\n    if (value <= 0) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    this.setAttribute(\"rows\", String(value));\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttribute(\"readonly\");\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#attr-textarea-required\n\n\n  get validity() {\n    if (!this._validity) {\n      this._validity = ValidityState.createImpl(this, {\n        valueMissing: () => this.hasAttribute(\"required\") && this.value === \"\"\n      });\n    }\n\n    return this._validity;\n  }\n\n}\n\nmixin(HTMLTextAreaElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLTextAreaElementImpl\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTextAreaElement-impl.js"],"names":["HTMLElementImpl","require","implementation","DefaultConstraintValidationImpl","ValidityState","mixin","DOMException","closest","normalizeToCRLF","getLabelsForLabelable","childTextContent","HTMLTextAreaElementImpl","constructor","args","privateData","_rawValue","_dirtyValue","_customValidityErrorMessage","_labels","_formReset","_getAPIValue","replace","_getValue","_childTextContentChangeSteps","labels","form","defaultValue","val","textContent","value","_selectionStart","_selectionEnd","_selectionDirection","textLength","length","type","_dispatchSelectEvent","event","_ownerDocument","createEvent","initEvent","dispatchEvent","_getValueLength","select","selectionStart","start","setSelectionRange","Math","max","selectionEnd","end","selectionDirection","dir","min","setRangeText","repl","selectionMode","arguments","selStart","selEnd","slice","newEnd","delta","cols","hasAttribute","parseInt","getAttribute","setAttribute","String","rows","_barredFromConstraintValidationSpecialization","validity","_validity","createImpl","valueMissing","prototype","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst DefaultConstraintValidationImpl =\n  require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst ValidityState = require(\"../generated/ValidityState\");\nconst { mixin } = require(\"../../utils\");\n\nconst DOMException = require(\"domexception\");\nconst { closest } = require(\"../helpers/traversal\");\nconst { normalizeToCRLF, getLabelsForLabelable } = require(\"../helpers/form-controls\");\nconst { childTextContent } = require(\"../helpers/text\");\n\nclass HTMLTextAreaElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this._rawValue = \"\";\n    this._dirtyValue = false;\n\n    this._customValidityErrorMessage = \"\";\n\n    this._labels = null;\n  }\n\n  _formReset() {\n    this._rawValue = childTextContent(this);\n    this._dirtyValue = false;\n  }\n\n  _getAPIValue() {\n    return this._rawValue.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n  }\n\n  _getValue() {\n    // Hard-wrapping omitted, for now.\n    return normalizeToCRLF(this._rawValue);\n  }\n\n  _childTextContentChangeSteps() {\n    if (this._dirtyValue === false) {\n      this._rawValue = childTextContent(this);\n    }\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return closest(this, \"form\");\n  }\n\n  get defaultValue() {\n    return childTextContent(this);\n  }\n\n  set defaultValue(val) {\n    this.textContent = val;\n  }\n\n  get value() {\n    return this._getAPIValue();\n  }\n\n  set value(val) {\n    this._rawValue = val;\n    this._dirtyValue = true;\n\n    this._selectionStart = 0;\n    this._selectionEnd = 0;\n    this._selectionDirection = \"none\";\n  }\n\n  get textLength() {\n    return this.value.length; // code unit length (16 bit)\n  }\n\n  get type() {\n    return \"textarea\";\n  }\n\n  _dispatchSelectEvent() {\n    const event = this._ownerDocument.createEvent(\"HTMLEvents\");\n    event.initEvent(\"select\", true, true);\n    this.dispatchEvent(event);\n  }\n\n  _getValueLength() {\n    return typeof this.value === \"string\" ? this.value.length : 0;\n  }\n\n  select() {\n    this._selectionStart = 0;\n    this._selectionEnd = this._getValueLength();\n    this._selectionDirection = \"none\";\n    this._dispatchSelectEvent();\n  }\n\n  get selectionStart() {\n    return this._selectionStart;\n  }\n\n  set selectionStart(start) {\n    this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n  }\n\n  get selectionEnd() {\n    return this._selectionEnd;\n  }\n\n  set selectionEnd(end) {\n    this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n  }\n\n  get selectionDirection() {\n    return this._selectionDirection;\n  }\n\n  set selectionDirection(dir) {\n    this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n  }\n\n  setSelectionRange(start, end, dir) {\n    this._selectionEnd = Math.min(end, this._getValueLength());\n    this._selectionStart = Math.min(start, this._selectionEnd);\n    this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n    this._dispatchSelectEvent();\n  }\n\n  setRangeText(repl, start, end, selectionMode = \"preserve\") {\n    if (arguments.length < 2) {\n      start = this._selectionStart;\n      end = this._selectionEnd;\n    } else if (start > end) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    start = Math.min(start, this._getValueLength());\n    end = Math.min(end, this._getValueLength());\n\n    const val = this.value;\n    let selStart = this._selectionStart;\n    let selEnd = this._selectionEnd;\n\n    this.value = val.slice(0, start) + repl + val.slice(end);\n\n    const newEnd = start + this.value.length;\n\n    if (selectionMode === \"select\") {\n      this.setSelectionRange(start, newEnd);\n    } else if (selectionMode === \"start\") {\n      this.setSelectionRange(start, start);\n    } else if (selectionMode === \"end\") {\n      this.setSelectionRange(newEnd, newEnd);\n    } else { // preserve\n      const delta = repl.length - (end - start);\n\n      if (selStart > end) {\n        selStart += delta;\n      } else if (selStart > start) {\n        selStart = start;\n      }\n\n      if (selEnd > end) {\n        selEnd += delta;\n      } else if (selEnd > start) {\n        selEnd = newEnd;\n      }\n\n      this.setSelectionRange(selStart, selEnd);\n    }\n  }\n\n  get cols() {\n    if (!this.hasAttribute(\"cols\")) {\n      return 20;\n    }\n    return parseInt(this.getAttribute(\"cols\"));\n  }\n\n  set cols(value) {\n    if (value <= 0) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n    this.setAttribute(\"cols\", String(value));\n  }\n\n  get rows() {\n    if (!this.hasAttribute(\"rows\")) {\n      return 2;\n    }\n    return parseInt(this.getAttribute(\"rows\"));\n  }\n\n  set rows(value) {\n    if (value <= 0) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n    this.setAttribute(\"rows\", String(value));\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttribute(\"readonly\");\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#attr-textarea-required\n  get validity() {\n    if (!this._validity) {\n      this._validity = ValidityState.createImpl(this, {\n        valueMissing: () => this.hasAttribute(\"required\") && this.value === \"\"\n      });\n    }\n    return this._validity;\n  }\n}\n\nmixin(HTMLTextAreaElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLTextAreaElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}