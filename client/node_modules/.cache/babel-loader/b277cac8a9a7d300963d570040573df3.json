{"ast":null,"code":"\"use strict\";\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  SVG_NS\n} = require(\"../helpers/namespaces\");\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst SVGAnimatedString = require(\"../generated/SVGAnimatedString\");\n\nconst ElementImpl = require(\"./Element-impl\").implementation;\n\nconst ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\n\nconst GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\n\nconst HTMLAndSVGElementSharedImpl = require(\"./HTMLAndSVGElementShared-impl\").implementation;\n\nclass SVGElementImpl extends ElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this._initHTMLAndSVGElement();\n\n    this._initElementCSSInlineStyle();\n\n    this._initGlobalEvents();\n  }\n\n  get className() {\n    return SVGAnimatedString.createImpl([], {\n      element: this,\n      attribute: \"class\"\n    });\n  }\n\n  get ownerSVGElement() {\n    let e = domSymbolTree.parent(this);\n\n    while (e && e.namespaceURI === SVG_NS) {\n      if (e.localName === \"svg\") {\n        return e;\n      }\n\n      e = domSymbolTree.parent(e);\n    }\n\n    return null;\n  }\n\n  get viewportElement() {\n    // TODO: <symbol>/<use> may make this different from ownerSVGElement.\n    return this.ownerSVGElement;\n  }\n\n}\n\nSVGElementImpl.attributeRegistry = new Map();\nmixin(SVGElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(SVGElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(SVGElementImpl.prototype, HTMLAndSVGElementSharedImpl.prototype);\nexports.implementation = SVGElementImpl;","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/SVGElement-impl.js"],"names":["domSymbolTree","require","SVG_NS","mixin","SVGAnimatedString","ElementImpl","implementation","ElementCSSInlineStyleImpl","GlobalEventHandlersImpl","HTMLAndSVGElementSharedImpl","SVGElementImpl","constructor","args","privateData","_initHTMLAndSVGElement","_initElementCSSInlineStyle","_initGlobalEvents","className","createImpl","element","attribute","ownerSVGElement","e","parent","namespaceURI","localName","viewportElement","attributeRegistry","Map","prototype","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAoBC,OAAO,CAAC,+BAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,uBAAD,CAA1B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAYF,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,gCAAD,CAAjC;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,gBAAD,CAAP,CAA0BK,cAA9C;;AACA,MAAMC,yBAAyB,GAAGN,OAAO,CAAC,8BAAD,CAAP,CAAwCK,cAA1E;;AACA,MAAME,uBAAuB,GAAGP,OAAO,CAAC,4BAAD,CAAP,CAAsCK,cAAtE;;AACA,MAAMG,2BAA2B,GAAGR,OAAO,CAAC,gCAAD,CAAP,CAA0CK,cAA9E;;AAEA,MAAMI,cAAN,SAA6BL,WAA7B,CAAyC;AACvCM,EAAAA,WAAW,CAACC,IAAD,EAAOC,WAAP,EAAoB;AAC7B,UAAMD,IAAN,EAAYC,WAAZ;;AACA,SAAKC,sBAAL;;AACA,SAAKC,0BAAL;;AACA,SAAKC,iBAAL;AACD;;AAED,MAAIC,SAAJ,GAAgB;AACd,WAAOb,iBAAiB,CAACc,UAAlB,CAA6B,EAA7B,EAAiC;AACtCC,MAAAA,OAAO,EAAE,IAD6B;AAEtCC,MAAAA,SAAS,EAAE;AAF2B,KAAjC,CAAP;AAID;;AAED,MAAIC,eAAJ,GAAsB;AACpB,QAAIC,CAAC,GAAGtB,aAAa,CAACuB,MAAd,CAAqB,IAArB,CAAR;;AACA,WAAOD,CAAC,IAAIA,CAAC,CAACE,YAAF,KAAmBtB,MAA/B,EAAuC;AACrC,UAAIoB,CAAC,CAACG,SAAF,KAAgB,KAApB,EAA2B;AACzB,eAAOH,CAAP;AACD;;AACDA,MAAAA,CAAC,GAAGtB,aAAa,CAACuB,MAAd,CAAqBD,CAArB,CAAJ;AACD;;AAED,WAAO,IAAP;AACD;;AAED,MAAII,eAAJ,GAAsB;AACpB;AACA,WAAO,KAAKL,eAAZ;AACD;;AA9BsC;;AAiCzCX,cAAc,CAACiB,iBAAf,GAAmC,IAAIC,GAAJ,EAAnC;AAEAzB,KAAK,CAACO,cAAc,CAACmB,SAAhB,EAA2BtB,yBAAyB,CAACsB,SAArD,CAAL;AACA1B,KAAK,CAACO,cAAc,CAACmB,SAAhB,EAA2BrB,uBAAuB,CAACqB,SAAnD,CAAL;AACA1B,KAAK,CAACO,cAAc,CAACmB,SAAhB,EAA2BpB,2BAA2B,CAACoB,SAAvD,CAAL;AAEAC,OAAO,CAACxB,cAAR,GAAyBI,cAAzB","sourcesContent":["\"use strict\";\n\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { SVG_NS } = require(\"../helpers/namespaces\");\nconst { mixin } = require(\"../../utils\");\nconst SVGAnimatedString = require(\"../generated/SVGAnimatedString\");\nconst ElementImpl = require(\"./Element-impl\").implementation;\nconst ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\nconst GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\nconst HTMLAndSVGElementSharedImpl = require(\"./HTMLAndSVGElementShared-impl\").implementation;\n\nclass SVGElementImpl extends ElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._initHTMLAndSVGElement();\n    this._initElementCSSInlineStyle();\n    this._initGlobalEvents();\n  }\n\n  get className() {\n    return SVGAnimatedString.createImpl([], {\n      element: this,\n      attribute: \"class\"\n    });\n  }\n\n  get ownerSVGElement() {\n    let e = domSymbolTree.parent(this);\n    while (e && e.namespaceURI === SVG_NS) {\n      if (e.localName === \"svg\") {\n        return e;\n      }\n      e = domSymbolTree.parent(e);\n    }\n\n    return null;\n  }\n\n  get viewportElement() {\n    // TODO: <symbol>/<use> may make this different from ownerSVGElement.\n    return this.ownerSVGElement;\n  }\n}\n\nSVGElementImpl.attributeRegistry = new Map();\n\nmixin(SVGElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(SVGElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(SVGElementImpl.prototype, HTMLAndSVGElementSharedImpl.prototype);\n\nexports.implementation = SVGElementImpl;\n"]},"metadata":{},"sourceType":"script"}