{"ast":null,"code":"\"use strict\";\n\nconst {\n  reflectURLAttribute\n} = require(\"../../utils\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst {\n  fetchStylesheet\n} = require(\"../helpers/stylesheets\");\n\nconst {\n  parseURLToResultingURLRecord\n} = require(\"../helpers/document-base-url\");\n\nconst whatwgURL = require(\"whatwg-url\"); // Important reading: \"appropriate times to obtain the resource\" in\n// https://html.spec.whatwg.org/multipage/semantics.html#link-type-stylesheet\n\n\nclass HTMLLinkElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this.sheet = null;\n  }\n\n  _attach() {\n    super._attach();\n\n    if (isExternalResourceLink(this)) {\n      obtainTheResource(this);\n    }\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (name === \"href\" && this._attached && isExternalResourceLink(this)) {\n      obtainTheResource(this);\n    }\n  }\n\n  get _accept() {\n    return \"text/css,*/*;q=0.1\";\n  }\n\n  get href() {\n    return reflectURLAttribute(this, \"href\");\n  }\n\n  set href(value) {\n    this.setAttribute(\"href\", value);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLLinkElementImpl\n};\n\nfunction obtainTheResource(el) {\n  const href = el.getAttribute(\"href\");\n\n  if (href === null || href === \"\") {\n    return;\n  }\n\n  const url = parseURLToResultingURLRecord(href, el._ownerDocument);\n\n  if (url === null) {\n    return;\n  }\n\n  const serialized = whatwgURL.serializeURL(url);\n  fetchStylesheet(el, serialized);\n}\n\nfunction isExternalResourceLink(el) {\n  // for our purposes, only stylesheets can be external resource links\n  const wrapper = idlUtils.wrapperForImpl(el);\n\n  if (!/(?:[ \\t\\n\\r\\f]|^)stylesheet(?:[ \\t\\n\\r\\f]|$)/i.test(wrapper.rel)) {\n    // rel is a space-separated list of tokens, and the original rel types\n    // are case-insensitive.\n    return false;\n  }\n\n  return Boolean(el.href);\n}","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLLinkElement-impl.js"],"names":["reflectURLAttribute","require","HTMLElementImpl","implementation","idlUtils","fetchStylesheet","parseURLToResultingURLRecord","whatwgURL","HTMLLinkElementImpl","constructor","args","privateData","sheet","_attach","isExternalResourceLink","obtainTheResource","_attrModified","name","value","oldValue","_attached","_accept","href","setAttribute","module","exports","el","getAttribute","url","_ownerDocument","serialized","serializeURL","wrapper","wrapperForImpl","test","rel","Boolean"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAA0BC,OAAO,CAAC,aAAD,CAAvC;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,oBAAD,CAAP,CAA8BE,cAAtD;;AACA,MAAMC,QAAQ,GAAGH,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAsBJ,OAAO,CAAC,wBAAD,CAAnC;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAmCL,OAAO,CAAC,8BAAD,CAAhD;;AACA,MAAMM,SAAS,GAAGN,OAAO,CAAC,YAAD,CAAzB,C,CAEA;AACA;;;AAEA,MAAMO,mBAAN,SAAkCN,eAAlC,CAAkD;AAChDO,EAAAA,WAAW,CAACC,IAAD,EAAOC,WAAP,EAAoB;AAC7B,UAAMD,IAAN,EAAYC,WAAZ;AAEA,SAAKC,KAAL,GAAa,IAAb;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,UAAMA,OAAN;;AAEA,QAAIC,sBAAsB,CAAC,IAAD,CAA1B,EAAkC;AAChCC,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD;AACF;;AAEDC,EAAAA,aAAa,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,EAAwB;AACnC,UAAMH,aAAN,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,QAAjC;;AAEA,QAAIF,IAAI,KAAK,MAAT,IAAmB,KAAKG,SAAxB,IAAqCN,sBAAsB,CAAC,IAAD,CAA/D,EAAuE;AACrEC,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD;AACF;;AAED,MAAIM,OAAJ,GAAc;AACZ,WAAO,oBAAP;AACD;;AAED,MAAIC,IAAJ,GAAW;AACT,WAAOtB,mBAAmB,CAAC,IAAD,EAAO,MAAP,CAA1B;AACD;;AAED,MAAIsB,IAAJ,CAASJ,KAAT,EAAgB;AACd,SAAKK,YAAL,CAAkB,MAAlB,EAA0BL,KAA1B;AACD;;AAjC+C;;AAoClDM,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA,cAAc,EAAEK;AADD,CAAjB;;AAIA,SAASO,iBAAT,CAA2BW,EAA3B,EAA+B;AAC7B,QAAMJ,IAAI,GAAGI,EAAE,CAACC,YAAH,CAAgB,MAAhB,CAAb;;AAEA,MAAIL,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,EAA9B,EAAkC;AAChC;AACD;;AAED,QAAMM,GAAG,GAAGtB,4BAA4B,CAACgB,IAAD,EAAOI,EAAE,CAACG,cAAV,CAAxC;;AACA,MAAID,GAAG,KAAK,IAAZ,EAAkB;AAChB;AACD;;AAED,QAAME,UAAU,GAAGvB,SAAS,CAACwB,YAAV,CAAuBH,GAAvB,CAAnB;AAEAvB,EAAAA,eAAe,CAACqB,EAAD,EAAKI,UAAL,CAAf;AACD;;AAED,SAAShB,sBAAT,CAAgCY,EAAhC,EAAoC;AAClC;AACA,QAAMM,OAAO,GAAG5B,QAAQ,CAAC6B,cAAT,CAAwBP,EAAxB,CAAhB;;AACA,MAAI,CAAC,gDAAgDQ,IAAhD,CAAqDF,OAAO,CAACG,GAA7D,CAAL,EAAwE;AACtE;AACA;AACA,WAAO,KAAP;AACD;;AAED,SAAOC,OAAO,CAACV,EAAE,CAACJ,IAAJ,CAAd;AACD","sourcesContent":["\"use strict\";\nconst { reflectURLAttribute } = require(\"../../utils\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst idlUtils = require(\"../generated/utils\");\nconst { fetchStylesheet } = require(\"../helpers/stylesheets\");\nconst { parseURLToResultingURLRecord } = require(\"../helpers/document-base-url\");\nconst whatwgURL = require(\"whatwg-url\");\n\n// Important reading: \"appropriate times to obtain the resource\" in\n// https://html.spec.whatwg.org/multipage/semantics.html#link-type-stylesheet\n\nclass HTMLLinkElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this.sheet = null;\n  }\n\n  _attach() {\n    super._attach();\n\n    if (isExternalResourceLink(this)) {\n      obtainTheResource(this);\n    }\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (name === \"href\" && this._attached && isExternalResourceLink(this)) {\n      obtainTheResource(this);\n    }\n  }\n\n  get _accept() {\n    return \"text/css,*/*;q=0.1\";\n  }\n\n  get href() {\n    return reflectURLAttribute(this, \"href\");\n  }\n\n  set href(value) {\n    this.setAttribute(\"href\", value);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLLinkElementImpl\n};\n\nfunction obtainTheResource(el) {\n  const href = el.getAttribute(\"href\");\n\n  if (href === null || href === \"\") {\n    return;\n  }\n\n  const url = parseURLToResultingURLRecord(href, el._ownerDocument);\n  if (url === null) {\n    return;\n  }\n\n  const serialized = whatwgURL.serializeURL(url);\n\n  fetchStylesheet(el, serialized);\n}\n\nfunction isExternalResourceLink(el) {\n  // for our purposes, only stylesheets can be external resource links\n  const wrapper = idlUtils.wrapperForImpl(el);\n  if (!/(?:[ \\t\\n\\r\\f]|^)stylesheet(?:[ \\t\\n\\r\\f]|$)/i.test(wrapper.rel)) {\n    // rel is a space-separated list of tokens, and the original rel types\n    // are case-insensitive.\n    return false;\n  }\n\n  return Boolean(el.href);\n}\n"]},"metadata":{},"sourceType":"script"}