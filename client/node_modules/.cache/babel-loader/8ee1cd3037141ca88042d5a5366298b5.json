{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/invoice/Invoice.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Page from '../../components/page/Page';\nimport html2canvas from 'html2canvas';\nimport jsPdf from 'jspdf';\n\nfunction Invoice() {\n  const printPDF = () => {\n    const domElement = document.getElementById('root2');\n    html2canvas(domElement, {\n      onclone: document => {\n        document.getElementById('print').style.visibility = 'hidden';\n      }\n    }).then(canvas => {\n      const imgData = canvas.toDataURL('image/png');\n      const pdf = new jsPdf();\n      pdf.addImage(imgData, 'JPEG', 0, 0);\n      pdf.save(`${new Date().toISOString()}.pdf`);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Page, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  }, \"Generate PDF\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }, \"Create a screenshot from the page, and put it in a PDF file.\"), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"print\",\n    onClick: printPDF,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, \"PRINT\"), /*#__PURE__*/React.createElement(\"article\", {\n    id: \"root2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    style: {\n      backgroundColor: 'crimson',\n      padding: '40px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, \"invoice\")), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn--info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, \"Download pdf\")));\n} // export const Invoice = () => {\n//     const downlaod = () => {\n//         const domElement = document.getElementById('invoiceToPDF');\n//         html2canvas(domElement, {\n//             onclone: (document) => {\n//                 // document.getElementById('print').style.visibility = 'hidden';\n//             },\n//         }).then((canvas) => {\n//             const imgData = canvas.toDataURL('image/png');\n//             const pdf = new jsPdf();\n//             pdf.addImage(imgData, 'JPEG', 10, 10);\n//             pdf.save(`${new Date().toISOString()}.pdf`);\n//         });\n// const printArea = document.getElementById('invoiceToPDF');\n// let canvas = await html2canvas(printArea);\n// let imgData = canvas.toDataURL('image/png'); // optional\n// console.log('Report Image URL: ' + imgData);\n// var doc = new jsPdf('p', 'mm', [297, 210]); //210mm wide and 297mm high\n// doc.addImage(imgData, 'PNG', 0, 0, 200, 200);\n// doc.save('sample.pdf');\n// html2canvas(printArea).then((canvas) => {\n//     var imgData = canvas.toDataURL('image/png');\n//     console.log('Report Image URL: ' + imgData);\n//     var doc = new jsPDF('p', 'mm', [297, 210]); //210mm wide and 297mm high\n//     doc.addImage(imgData, 'PNG', 0, 0);\n//     doc.save('sample.pdf');\n//     // const dataURL = canvas.toDataURL('image/png');\n//     // const pdf = new jsPDF('p', 'mm', [297, 210]);\n//     // pdf.addImage(dataURL, 'PNG', 20, 20, 180, 160);\n//     // pdf.save('saved.pdf');\n// });\n// html2canvas(document.body).then(function (canvas) {\n//     var img = canvas.toDataURL('image/png');\n//     var doc = new jsPDF();\n//     doc.addImage(img, 'JPEG', 10, 10);\n//     // doc.save('test.pdf');\n//     doc.output('dataurlnewwindow');\n// });\n// var doc = new jsPDF();\n// var elementHandler = {\n//     '#ignorePDF': function (element, renderer) {\n//         return true;\n//     },\n// };\n// var source = document.getElementById('invoice');\n// doc.addHTML(source, function () {\n//     // pdf.save('Test.pdf');\n//     doc.output('dataurlnewwindow');\n// });\n//     };\n//     return (\n//         <Page>\n//             <article id='invoiceToPDF'>\n//                 <header style={{ backgroundColor: 'crimson', padding: '40px' }}>\n//                     invoice\n//                 </header>\n//             </article>\n//             <button className='btn btn--info' onClick={downlaod}>\n//                 Download pdf\n//             </button>\n//         </Page>\n//     );\n// };\n\n\nInvoice.propTypes = {};\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Invoice);","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/invoice/Invoice.js"],"names":["React","PropTypes","connect","Page","html2canvas","jsPdf","Invoice","printPDF","domElement","document","getElementById","onclone","style","visibility","then","canvas","imgData","toDataURL","pdf","addImage","save","Date","toISOString","backgroundColor","padding","propTypes","mapStateToProps","state","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,OAAT,GAAmB;AACf,QAAMC,QAAQ,GAAG,MAAM;AACnB,UAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAnB;AACAN,IAAAA,WAAW,CAACI,UAAD,EAAa;AACpBG,MAAAA,OAAO,EAAGF,QAAD,IAAc;AACnBA,QAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCE,KAAjC,CAAuCC,UAAvC,GAAoD,QAApD;AACH;AAHmB,KAAb,CAAX,CAIGC,IAJH,CAISC,MAAD,IAAY;AAChB,YAAMC,OAAO,GAAGD,MAAM,CAACE,SAAP,CAAiB,WAAjB,CAAhB;AACA,YAAMC,GAAG,GAAG,IAAIb,KAAJ,EAAZ;AACAa,MAAAA,GAAG,CAACC,QAAJ,CAAaH,OAAb,EAAsB,MAAtB,EAA8B,CAA9B,EAAiC,CAAjC;AACAE,MAAAA,GAAG,CAACE,IAAJ,CAAU,GAAE,IAAIC,IAAJ,GAAWC,WAAX,EAAyB,MAArC;AACH,KATD;AAUH,GAZD;;AAcA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAFJ,eAKI;AAAQ,IAAA,EAAE,EAAC,OAAX;AAAmB,IAAA,OAAO,EAAEf,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALJ,eAQI;AAAS,IAAA,EAAE,EAAC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACI,IAAA,KAAK,EAAE;AAAEgB,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,OAAO,EAAE;AAAvC,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,CARJ,eAeI;AAAQ,IAAA,SAAS,EAAC,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAfJ,CADJ,CADJ;AAqBH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAlB,OAAO,CAACmB,SAAR,GAAoB,EAApB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,KAAY,EAAZ,CAAxB;;AAEA,MAAMC,kBAAkB,GAAG,EAA3B;AAEA,eAAe1B,OAAO,CAACwB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CtB,OAA7C,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Page from '../../components/page/Page';\nimport html2canvas from 'html2canvas';\nimport jsPdf from 'jspdf';\n\nfunction Invoice() {\n    const printPDF = () => {\n        const domElement = document.getElementById('root2');\n        html2canvas(domElement, {\n            onclone: (document) => {\n                document.getElementById('print').style.visibility = 'hidden';\n            },\n        }).then((canvas) => {\n            const imgData = canvas.toDataURL('image/png');\n            const pdf = new jsPdf();\n            pdf.addImage(imgData, 'JPEG', 0, 0);\n            pdf.save(`${new Date().toISOString()}.pdf`);\n        });\n    };\n\n    return (\n        <div className='App'>\n            <Page>\n                <h1>Generate PDF</h1>\n                <p>\n                    Create a screenshot from the page, and put it in a PDF file.\n                </p>\n                <button id='print' onClick={printPDF}>\n                    PRINT\n                </button>\n                <article id='root2'>\n                    <header\n                        style={{ backgroundColor: 'crimson', padding: '40px' }}\n                    >\n                        invoice\n                    </header>\n                </article>\n                <button className='btn btn--info'>Download pdf</button>\n            </Page>\n        </div>\n    );\n}\n\n// export const Invoice = () => {\n//     const downlaod = () => {\n//         const domElement = document.getElementById('invoiceToPDF');\n//         html2canvas(domElement, {\n//             onclone: (document) => {\n//                 // document.getElementById('print').style.visibility = 'hidden';\n//             },\n//         }).then((canvas) => {\n//             const imgData = canvas.toDataURL('image/png');\n//             const pdf = new jsPdf();\n//             pdf.addImage(imgData, 'JPEG', 10, 10);\n//             pdf.save(`${new Date().toISOString()}.pdf`);\n//         });\n// const printArea = document.getElementById('invoiceToPDF');\n\n// let canvas = await html2canvas(printArea);\n// let imgData = canvas.toDataURL('image/png'); // optional\n// console.log('Report Image URL: ' + imgData);\n// var doc = new jsPdf('p', 'mm', [297, 210]); //210mm wide and 297mm high\n\n// doc.addImage(imgData, 'PNG', 0, 0, 200, 200);\n// doc.save('sample.pdf');\n\n// html2canvas(printArea).then((canvas) => {\n//     var imgData = canvas.toDataURL('image/png');\n//     console.log('Report Image URL: ' + imgData);\n//     var doc = new jsPDF('p', 'mm', [297, 210]); //210mm wide and 297mm high\n\n//     doc.addImage(imgData, 'PNG', 0, 0);\n//     doc.save('sample.pdf');\n//     // const dataURL = canvas.toDataURL('image/png');\n//     // const pdf = new jsPDF('p', 'mm', [297, 210]);\n\n//     // pdf.addImage(dataURL, 'PNG', 20, 20, 180, 160);\n\n//     // pdf.save('saved.pdf');\n// });\n// html2canvas(document.body).then(function (canvas) {\n//     var img = canvas.toDataURL('image/png');\n//     var doc = new jsPDF();\n//     doc.addImage(img, 'JPEG', 10, 10);\n//     // doc.save('test.pdf');\n//     doc.output('dataurlnewwindow');\n// });\n// var doc = new jsPDF();\n// var elementHandler = {\n//     '#ignorePDF': function (element, renderer) {\n//         return true;\n//     },\n// };\n// var source = document.getElementById('invoice');\n// doc.addHTML(source, function () {\n//     // pdf.save('Test.pdf');\n//     doc.output('dataurlnewwindow');\n// });\n//     };\n\n//     return (\n//         <Page>\n//             <article id='invoiceToPDF'>\n//                 <header style={{ backgroundColor: 'crimson', padding: '40px' }}>\n//                     invoice\n//                 </header>\n//             </article>\n//             <button className='btn btn--info' onClick={downlaod}>\n//                 Download pdf\n//             </button>\n//         </Page>\n//     );\n// };\n\nInvoice.propTypes = {};\n\nconst mapStateToProps = (state) => ({});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Invoice);\n"]},"metadata":{},"sourceType":"module"}