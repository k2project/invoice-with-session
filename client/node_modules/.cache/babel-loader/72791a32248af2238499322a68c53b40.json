{"ast":null,"code":"function isEmail(email) {\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n}\n\nfunction isNumber(email) {\n  return /^\\d+$/.test(email);\n}\n\nexport const isRequired = (state, outputArr) => {\n  state.forEach(input => {\n    if (input.required && !input.value.trim()) {\n      const error = {\n        param: input._id,\n        msg: `${input.label} is required.`\n      };\n      outputArr.push(error);\n    }\n  });\n};\nexport const isValidated = (state, outputArr) => {\n  state.forEach(input => {\n    if (input.validate && input.value.trim()) {\n      const {\n        type,\n        msg\n      } = input.validate;\n      let error = null;\n\n      if (type === 'isEmail') {\n        error = isEmail(input.value) ? null : {\n          param: input._id,\n          msg\n        };\n      }\n\n      if (type === 'isNumber') {\n        error = isNumber(input.value) ? null : {\n          param: input._id,\n          msg\n        };\n      }\n\n      if (error) outputArr.push(error);\n    }\n  });\n};\nexport const strWithCommasToNum = str => {\n  return parseFloat(str.replace(/,/g, ''));\n};\nexport const getNumericalValueFromString = str => {\n  // return str.replace(/[^0-9,.]/g, '');\n  return Number(str.replace(/[^0-9.]/g, ''));\n};\nexport const validateTaxInputValueToNum = str => {\n  const regExpPercentage = /^([0-9]{1,2}(\\.[0-9]{1,2})?|100)\\s?%?$/;\n\n  if (regExpPercentage.test(str)) {\n    str = str.replace(/%/g, '').trim();\n    return getNumericalValueFromString(str);\n  }\n\n  return null;\n};\nexport const validateRateInputToObj = str => {\n  const regExpCurrency = /^([0-9]{1,2}(\\.[0-9]{1,2})?|100)\\s?%?$/;\n\n  if (regExpCurrency.test(str)) {\n    let num = str.replace(/[^0-9,.]/g, '').trim();\n    const currency = str.replace(num, '').trim().toUpperCase().split(' ')[0];\n    let numValue = strWithCommasToNum(num);\n    return {\n      currency,\n      numValue\n    };\n  }\n\n  return null;\n};\nexport const validateQtyInputToNum = str => {\n  const regExpQty = /^[0-9]{1,3}(,?[0-9]{3})*(\\.[0-9]{1,2})?[^0-9]*$/;\n\n  if (regExpQty.test(str)) {\n    return getNumericalValueFromString(str);\n  }\n\n  return null;\n};\nexport const toNumberWithCommas = num => {\n  num = (+num).toFixed(2);\n  let n = String(num),\n      p = n.indexOf('.');\n  return n.replace(/\\d(?=(?:\\d{3})+(?:\\.|$))/g, (m, i) => p < 0 || i < p ? `${m},` : m);\n}; //format $1,000.99 or 'N/A' or 'FREE'\n\nexport const amountDisplayWithComas = amount => {\n  // 'N/A' and 'FREE'\n  if (typeof amount === 'string') return amount; //numerical value with commas and two digits after dot\n\n  return amount.currency + toNumberWithCommas(amount.amountNet);\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/form/utils/validations.js"],"names":["isEmail","email","test","isNumber","isRequired","state","outputArr","forEach","input","required","value","trim","error","param","_id","msg","label","push","isValidated","validate","type","strWithCommasToNum","str","parseFloat","replace","getNumericalValueFromString","Number","validateTaxInputValueToNum","regExpPercentage","validateRateInputToObj","regExpCurrency","num","currency","toUpperCase","split","numValue","validateQtyInputToNum","regExpQty","toNumberWithCommas","toFixed","n","String","p","indexOf","m","i","amountDisplayWithComas","amount","amountNet"],"mappings":"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","sourcesContent":["function isEmail(email) {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n}\nfunction isNumber(email) {\n    return /^\\d+$/.test(email);\n}\n\nexport const isRequired = (state, outputArr) => {\n    state.forEach((input) => {\n        if (input.required && !input.value.trim()) {\n            const error = {\n                param: input._id,\n                msg: `${input.label} is required.`,\n            };\n            outputArr.push(error);\n        }\n    });\n};\nexport const isValidated = (state, outputArr) => {\n    state.forEach((input) => {\n        if (input.validate && input.value.trim()) {\n            const { type, msg } = input.validate;\n            let error = null;\n            if (type === 'isEmail') {\n                error = isEmail(input.value)\n                    ? null\n                    : {\n                          param: input._id,\n                          msg,\n                      };\n            }\n            if (type === 'isNumber') {\n                error = isNumber(input.value)\n                    ? null\n                    : {\n                          param: input._id,\n                          msg,\n                      };\n            }\n\n            if (error) outputArr.push(error);\n        }\n    });\n};\n\nexport const strWithCommasToNum = (str) => {\n    return parseFloat(str.replace(/,/g, ''));\n};\nexport const getNumericalValueFromString = (str) => {\n    // return str.replace(/[^0-9,.]/g, '');\n    return Number(str.replace(/[^0-9.]/g, ''));\n};\n\nexport const validateTaxInputValueToNum = (str) => {\n    const regExpPercentage = /^([0-9]{1,2}(\\.[0-9]{1,2})?|100)\\s?%?$/;\n    if (regExpPercentage.test(str)) {\n        str = str.replace(/%/g, '').trim();\n        return getNumericalValueFromString(str);\n    }\n    return null;\n};\nexport const validateRateInputToObj = (str) => {\n    const regExpCurrency = /^([0-9]{1,2}(\\.[0-9]{1,2})?|100)\\s?%?$/;\n    if (regExpCurrency.test(str)) {\n        let num = str.replace(/[^0-9,.]/g, '').trim();\n        const currency = str\n            .replace(num, '')\n            .trim()\n            .toUpperCase()\n            .split(' ')[0];\n\n        let numValue = strWithCommasToNum(num);\n        return {\n            currency,\n            numValue,\n        };\n    }\n    return null;\n};\n\nexport const validateQtyInputToNum = (str) => {\n    const regExpQty = /^[0-9]{1,3}(,?[0-9]{3})*(\\.[0-9]{1,2})?[^0-9]*$/;\n    if (regExpQty.test(str)) {\n        return getNumericalValueFromString(str);\n    }\n    return null;\n};\nexport const toNumberWithCommas = (num) => {\n    num = (+num).toFixed(2);\n    let n = String(num),\n        p = n.indexOf('.');\n    return n.replace(/\\d(?=(?:\\d{3})+(?:\\.|$))/g, (m, i) =>\n        p < 0 || i < p ? `${m},` : m\n    );\n};\n//format $1,000.99 or 'N/A' or 'FREE'\nexport const amountDisplayWithComas = (amount) => {\n    // 'N/A' and 'FREE'\n    if (typeof amount === 'string') return amount;\n    //numerical value with commas and two digits after dot\n    return amount.currency + toNumberWithCommas(amount.amountNet);\n};\n"]},"metadata":{},"sourceType":"module"}