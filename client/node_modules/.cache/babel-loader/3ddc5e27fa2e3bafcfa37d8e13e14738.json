{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport { updateCompanyArr } from '../../../redux/actions/companies';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { dialogBox } from '../../../components/alerts/alertsFuns';\nimport { getInputValueByLabel } from '../../../components/form/utils/customFormQueries';\nimport { date_YYYY_MM, date_DD_MM_YYYY } from '../../../components/calendar/dates';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass NewInvoice extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      invoice: null\n    };\n    this.handleChanges = this.handleChanges.bind(this);\n    this.clearInitState = this.clearInitState.bind(this);\n    this.updateInitStateToReduxStateOnSubmit = this.updateInitStateToReduxStateOnSubmit.bind(this);\n  }\n\n  handleChanges() {\n    //BECAUSE TASKS CAN BE AMENDED UPDATED IN FORM HENCE NEED TO CHECK INIT STATE AGAINST COMPANY.TASKS NOT INVOICE.TASKS!!!\n    console.log(this.state.invoice); // this.props.invoice.tasks = this.props.company.tasks;\n\n    console.log(this.props.invoice);\n\n    if (JSON.stringify(this.state.invoice) !== JSON.stringify(this.props.invoice)) {\n      const msg = `You have some unsaved changes. What would you like to do?`;\n      const cancelBtnText = 'Discharge changes';\n      const confirmBtnText = 'Return to the form!';\n\n      const confirmCb = () => {};\n\n      const cancelCb = async () => {};\n\n      dialogBox({\n        msg,\n        cancelBtnText,\n        confirmBtnText,\n        confirmCb,\n        cancelCb\n      });\n    } else {}\n  }\n\n  updateInitStateToReduxStateOnSubmit() {// this.props.setUpdates(this.props.company.details);\n  }\n\n  clearInitState() {//on submit clear app updates\n    // this.props.setUpdates(null);\n  }\n\n  componentDidMount() {\n    let invoiceInitState;\n    const searchArr = window.location.search.split('&');\n\n    if (searchArr[1]) {\n      //updating an existing invoice\n      //?updating=...\n      //downlaoding an existing invoice\n      //?download=...\n      const invoice_ID = searchArr[1].slice(9);\n      const invoiceToLoad = this.props.company.invoices.find(invoice => invoice._id === invoice_ID); //invoiceInitState from the invoices arr\n\n      invoiceInitState = invoiceToLoad; //add invoice tasks to existing tasks of the current company\n\n      const arrOfTasks = [...invoiceToLoad.tasks, ...this.props.company.tasks];\n      this.props.updateCompanyArr('tasks', arrOfTasks, this.props.company._id);\n    } else {\n      //create invoice name\n      let company_abbr = getInputValueByLabel(this.props.company.details, 'Name').split(' ');\n\n      if (company_abbr.length > 1) {\n        company_abbr = company_abbr.map(el => el[0].toUpperCase()).join('');\n      } else {\n        company_abbr = company_abbr[0].slice(0, 3).toUpperCase();\n      }\n\n      let invoices_num = '1';\n      if (this.props.company.invoices) invoices_num = String(this.props.company.invoices.length + 1);\n\n      while (invoices_num.length < 5) {\n        invoices_num = '0' + invoices_num;\n      }\n\n      let saved_as = company_abbr + '-';\n      saved_as += date_YYYY_MM(new Date()) + '-';\n      saved_as += invoices_num; //generate due date in 14 days\n\n      const TWO_WEEKS = 1.21e9;\n      let due_date = date_DD_MM_YYYY(new Date().getTime() + TWO_WEEKS); //a new invoice\n\n      invoiceInitState = {\n        _id: uuidv4(),\n        created_at: new Date(),\n        saved_as,\n        issue_date: date_DD_MM_YYYY(new Date()),\n        due_date,\n        bg_color: localStorage.invoice_bg || 'blue',\n        text_color: localStorage.invoice_txt || 'white',\n        profile: JSON.parse(JSON.stringify(this.props.profile.details)),\n        company: JSON.parse(JSON.stringify(this.props.company.details)),\n        tasks: this.props.company.tasks,\n        discount: 0,\n        tax: 0,\n        fees: 0,\n        notes: 'Thank you for your business.'\n      };\n    } //set init state for comparison on component unmounting\n\n\n    this.setState({\n      invoice: JSON.parse(JSON.stringify(invoiceInitState))\n    }); //set redux state\n\n    this.props.setInvoiceInitState(invoiceInitState); // window.addEventListener('beforeunload', this.props.clearInitState);\n  }\n\n  componentWillUnmount() {\n    //auth err and logout won't trigger fun\n    if (this.props.authenticated) this.handleChanges(); // window.removeEventListener('beforeunload', this.props.clearInitState);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"company-invoice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }, \"Create a new invoice.\"), this.state.invoice && /*#__PURE__*/React.createElement(InvoiceDoc, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 40\n      }\n    }), this.state.invoice && /*#__PURE__*/React.createElement(NewInvoiceSubmit, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 40\n      }\n    }));\n  }\n\n}\n\nNewInvoice.propTypes = {\n  authenticated: PropTypes.bool,\n  profile: PropTypes.object,\n  company: PropTypes.object,\n  invoice: PropTypes.object,\n  updateCompanyArr: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  authenticated: state.session.authenticated,\n  profile: state.profile,\n  company: state.companies.find(c => c._id === state.session.currentCompany),\n  invoice: state.invoice\n});\n\nconst mapDispatchToProps = {\n  setInvoiceInitState,\n  updateCompanyArr\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(NewInvoice));","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js"],"names":["React","Component","PropTypes","withRouter","connect","setInvoiceInitState","updateCompanyArr","InvoiceDoc","NewInvoiceSubmit","dialogBox","getInputValueByLabel","date_YYYY_MM","date_DD_MM_YYYY","v4","uuidv4","NewInvoice","constructor","props","state","invoice","handleChanges","bind","clearInitState","updateInitStateToReduxStateOnSubmit","console","log","JSON","stringify","msg","cancelBtnText","confirmBtnText","confirmCb","cancelCb","componentDidMount","invoiceInitState","searchArr","window","location","search","split","invoice_ID","slice","invoiceToLoad","company","invoices","find","_id","arrOfTasks","tasks","company_abbr","details","length","map","el","toUpperCase","join","invoices_num","String","saved_as","Date","TWO_WEEKS","due_date","getTime","created_at","issue_date","bg_color","localStorage","invoice_bg","text_color","invoice_txt","profile","parse","discount","tax","fees","notes","setState","componentWillUnmount","authenticated","render","propTypes","bool","object","func","mapStateToProps","session","companies","c","currentCompany","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport { updateCompanyArr } from '../../../redux/actions/companies';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { dialogBox } from '../../../components/alerts/alertsFuns';\nimport { getInputValueByLabel } from '../../../components/form/utils/customFormQueries';\nimport {\n    date_YYYY_MM,\n    date_DD_MM_YYYY,\n} from '../../../components/calendar/dates';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass NewInvoice extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            invoice: null,\n        };\n        this.handleChanges = this.handleChanges.bind(this);\n        this.clearInitState = this.clearInitState.bind(this);\n        this.updateInitStateToReduxStateOnSubmit = this.updateInitStateToReduxStateOnSubmit.bind(\n            this\n        );\n    }\n    handleChanges() {\n        //BECAUSE TASKS CAN BE AMENDED UPDATED IN FORM HENCE NEED TO CHECK INIT STATE AGAINST COMPANY.TASKS NOT INVOICE.TASKS!!!\n        console.log(this.state.invoice);\n        // this.props.invoice.tasks = this.props.company.tasks;\n        console.log(this.props.invoice);\n        if (\n            JSON.stringify(this.state.invoice) !==\n            JSON.stringify(this.props.invoice)\n        ) {\n            const msg = `You have some unsaved changes. What would you like to do?`;\n            const cancelBtnText = 'Discharge changes';\n            const confirmBtnText = 'Return to the form!';\n            const confirmCb = () => {};\n            const cancelCb = async () => {};\n            dialogBox({\n                msg,\n                cancelBtnText,\n                confirmBtnText,\n                confirmCb,\n                cancelCb,\n            });\n        } else {\n        }\n    }\n    updateInitStateToReduxStateOnSubmit() {\n        // this.props.setUpdates(this.props.company.details);\n    }\n    clearInitState() {\n        //on submit clear app updates\n        // this.props.setUpdates(null);\n    }\n    componentDidMount() {\n        let invoiceInitState;\n        const searchArr = window.location.search.split('&');\n        if (searchArr[1]) {\n            //updating an existing invoice\n            //?updating=...\n            //downlaoding an existing invoice\n            //?download=...\n            const invoice_ID = searchArr[1].slice(9);\n            const invoiceToLoad = this.props.company.invoices.find(\n                (invoice) => invoice._id === invoice_ID\n            );\n            //invoiceInitState from the invoices arr\n            invoiceInitState = invoiceToLoad;\n            //add invoice tasks to existing tasks of the current company\n            const arrOfTasks = [\n                ...invoiceToLoad.tasks,\n                ...this.props.company.tasks,\n            ];\n            this.props.updateCompanyArr(\n                'tasks',\n                arrOfTasks,\n                this.props.company._id\n            );\n        } else {\n            //create invoice name\n            let company_abbr = getInputValueByLabel(\n                this.props.company.details,\n                'Name'\n            ).split(' ');\n            if (company_abbr.length > 1) {\n                company_abbr = company_abbr\n                    .map((el) => el[0].toUpperCase())\n                    .join('');\n            } else {\n                company_abbr = company_abbr[0].slice(0, 3).toUpperCase();\n            }\n            let invoices_num = '1';\n            if (this.props.company.invoices)\n                invoices_num = String(this.props.company.invoices.length + 1);\n            while (invoices_num.length < 5) {\n                invoices_num = '0' + invoices_num;\n            }\n            let saved_as = company_abbr + '-';\n            saved_as += date_YYYY_MM(new Date()) + '-';\n            saved_as += invoices_num;\n            //generate due date in 14 days\n            const TWO_WEEKS = 1.21e9;\n            let due_date = date_DD_MM_YYYY(new Date().getTime() + TWO_WEEKS);\n            //a new invoice\n            invoiceInitState = {\n                _id: uuidv4(),\n                created_at: new Date(),\n                saved_as,\n                issue_date: date_DD_MM_YYYY(new Date()),\n                due_date,\n                bg_color: localStorage.invoice_bg || 'blue',\n                text_color: localStorage.invoice_txt || 'white',\n                profile: JSON.parse(JSON.stringify(this.props.profile.details)),\n                company: JSON.parse(JSON.stringify(this.props.company.details)),\n                tasks: this.props.company.tasks,\n                discount: 0,\n                tax: 0,\n                fees: 0,\n                notes: 'Thank you for your business.',\n            };\n        }\n\n        //set init state for comparison on component unmounting\n        this.setState({\n            invoice: JSON.parse(JSON.stringify(invoiceInitState)),\n        });\n\n        //set redux state\n        this.props.setInvoiceInitState(invoiceInitState);\n\n        // window.addEventListener('beforeunload', this.props.clearInitState);\n    }\n    componentWillUnmount() {\n        //auth err and logout won't trigger fun\n        if (this.props.authenticated) this.handleChanges();\n        // window.removeEventListener('beforeunload', this.props.clearInitState);\n    }\n    render() {\n        return (\n            <section className='company-invoice'>\n                <h2 className='sr-only'>Create a new invoice.</h2>\n                {this.state.invoice && <InvoiceDoc />}\n                {this.state.invoice && <NewInvoiceSubmit />}\n            </section>\n        );\n    }\n}\n\nNewInvoice.propTypes = {\n    authenticated: PropTypes.bool,\n    profile: PropTypes.object,\n    company: PropTypes.object,\n    invoice: PropTypes.object,\n    updateCompanyArr: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n    authenticated: state.session.authenticated,\n    profile: state.profile,\n    company: state.companies.find(\n        (c) => c._id === state.session.currentCompany\n    ),\n    invoice: state.invoice,\n});\n\nconst mapDispatchToProps = {\n    setInvoiceInitState,\n    updateCompanyArr,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(NewInvoice));\n"]},"metadata":{},"sourceType":"module"}