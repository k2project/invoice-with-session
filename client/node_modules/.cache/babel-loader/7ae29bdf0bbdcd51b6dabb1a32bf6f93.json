{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoiceSubmit.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { getAllCompanies } from '../../../redux/actions/companies';\nimport FormInput from '../../../components/form/components/FormInput';\nimport { setAlert } from '../../../redux/actions/messages';\nexport const NewInvoiceSubmit = ({\n  company,\n  invoice,\n  getAllCompanies,\n  setAlert,\n  history\n}) => {\n  const [to_download, set_to_download] = useState(false);\n  useEffect(() => {\n    const searchArr = window.location.search.split('&');\n\n    if (searchArr[1]) {\n      //downlaoding an existing invoice\n      //?download=...\n      const download = searchArr[1].slice(0, 8);\n      if (download) set_to_download(true);\n      if (to_download) downloadInvoice();\n    }\n  }, [to_download]);\n\n  const downloadInvoice = () => {\n    const invoice = document.getElementById('invoice').innerHTML;\n    const pdf = window.open();\n    pdf.document.write('<html><head>');\n    pdf.document.write(`<link rel=\"stylesheet\" type=\"text/css\" href=\"${window.location.origin}/invoice.css\"/>`);\n    pdf.document.write(` <link\n            href=\"https://fonts.googleapis.com/css?family=Audiowide|Inter:400,600&display=swap\"\n            rel=\"stylesheet\"\n        />`);\n    pdf.document.write('</head><body>');\n    pdf.document.write(invoice);\n    pdf.document.write('</body></link>');\n    pdf.document.close();\n    setTimeout(function () {\n      pdf.print();\n    }, 100);\n  };\n\n  const [saveAs, setSaveAs] = useState(false);\n\n  const show_form = async () => {\n    await setSaveAs(true);\n    document.querySelector('.form__save-as input').focus();\n  };\n\n  const [formData, setFormData] = useState({\n    saveAs: invoice.saved_as,\n    errors: []\n  });\n\n  const saveInvoice = async e => {\n    e.preventDefault();\n    console.log(invoice); //save invoice state\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const tasksIncludedInInvoice = company.tasks.filter(t => t.addToInvoice);\n      if (tasksIncludedInInvoice.length === 0) return setAlert('There is no items in the invoice to be saved. Please add a new item.', 'danger', null, false, 10000);\n      invoice.tasks = tasksIncludedInInvoice;\n      const tasks = company.tasks.filter(t => !t.addToInvoice);\n      await axios.post(`/api/companies/invoice/${company._id}`, JSON.stringify({\n        invoice,\n        tasks\n      }), config);\n      getAllCompanies();\n      setSaveAs(false);\n      history.push(`/dashboard/companies/${company._id}?tab=invoices`);\n    } catch (err) {\n      console.log('Invoice saving err:', err);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, \"Save or download invoice form.\"), saveAs && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form__save-as\",\n    onSubmit: saveInvoice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    form: {\n      formData,\n      setFormData\n    },\n    name: \"saveAs\",\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }, \"Save as: \")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn--info btn--sibling\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }, ' ', \"Save\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn\",\n    onClick: () => setSaveAs(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, ' ', \"Cancel\")), !saveAs && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn--sibling\",\n    onClick: show_form,\n    id: \"save-as\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, \"Save As\"), !saveAs && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn--info\",\n    onClick: downloadInvoice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, \"Download*\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, \"*\", ' ', /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, \"You can either print or save the invoice in pdf format.\", ' ', /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 21\n    }\n  }), \"We recommend using Chrome browser for the best experience. On clicking this button follow your browsers specification on how to handle the process.\")));\n};\nNewInvoiceSubmit.propTypes = {\n  company: PropTypes.object,\n  invoice: PropTypes.object,\n  getAllCompanies: PropTypes.func,\n  setAlert: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  company: state.companies.find(c => c._id === state.session.currentCompany),\n  invoice: state.invoice\n});\n\nconst mapDispatchToProps = {\n  getAllCompanies,\n  setAlert\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(NewInvoiceSubmit));","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoiceSubmit.js"],"names":["React","useState","useEffect","PropTypes","withRouter","axios","connect","getAllCompanies","FormInput","setAlert","NewInvoiceSubmit","company","invoice","history","to_download","set_to_download","searchArr","window","location","search","split","download","slice","downloadInvoice","document","getElementById","innerHTML","pdf","open","write","origin","close","setTimeout","print","saveAs","setSaveAs","show_form","querySelector","focus","formData","setFormData","saved_as","errors","saveInvoice","e","preventDefault","console","log","config","headers","tasksIncludedInInvoice","tasks","filter","t","addToInvoice","length","post","_id","JSON","stringify","push","err","propTypes","object","func","mapStateToProps","state","companies","find","c","session","currentCompany","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { getAllCompanies } from '../../../redux/actions/companies';\nimport FormInput from '../../../components/form/components/FormInput';\nimport { setAlert } from '../../../redux/actions/messages';\n\nexport const NewInvoiceSubmit = ({\n    company,\n    invoice,\n    getAllCompanies,\n    setAlert,\n    history,\n}) => {\n    const [to_download, set_to_download] = useState(false);\n    useEffect(() => {\n        const searchArr = window.location.search.split('&');\n        if (searchArr[1]) {\n            //downlaoding an existing invoice\n            //?download=...\n            const download = searchArr[1].slice(0, 8);\n            if (download) set_to_download(true);\n            if (to_download) downloadInvoice();\n        }\n    }, [to_download]);\n    const downloadInvoice = () => {\n        const invoice = document.getElementById('invoice').innerHTML;\n        const pdf = window.open();\n        pdf.document.write('<html><head>');\n        pdf.document.write(\n            `<link rel=\"stylesheet\" type=\"text/css\" href=\"${window.location.origin}/invoice.css\"/>`\n        );\n        pdf.document.write(\n            ` <link\n            href=\"https://fonts.googleapis.com/css?family=Audiowide|Inter:400,600&display=swap\"\n            rel=\"stylesheet\"\n        />`\n        );\n        pdf.document.write('</head><body>');\n        pdf.document.write(invoice);\n        pdf.document.write('</body></link>');\n        pdf.document.close();\n        setTimeout(function () {\n            pdf.print();\n        }, 100);\n    };\n    const [saveAs, setSaveAs] = useState(false);\n    const show_form = async () => {\n        await setSaveAs(true);\n        document.querySelector('.form__save-as input').focus();\n    };\n    const [formData, setFormData] = useState({\n        saveAs: invoice.saved_as,\n        errors: [],\n    });\n    const saveInvoice = async (e) => {\n        e.preventDefault();\n        console.log(invoice);\n        //save invoice state\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n\n            const tasksIncludedInInvoice = company.tasks.filter(\n                (t) => t.addToInvoice\n            );\n            if (tasksIncludedInInvoice.length === 0)\n                return setAlert(\n                    'There is no items in the invoice to be saved. Please add a new item.',\n                    'danger',\n                    null,\n                    false,\n                    10000\n                );\n            invoice.tasks = tasksIncludedInInvoice;\n            const tasks = company.tasks.filter((t) => !t.addToInvoice);\n            await axios.post(\n                `/api/companies/invoice/${company._id}`,\n                JSON.stringify({ invoice, tasks }),\n                config\n            );\n            getAllCompanies();\n            setSaveAs(false);\n            history.push(`/dashboard/companies/${company._id}?tab=invoices`);\n        } catch (err) {\n            console.log('Invoice saving err:', err);\n        }\n    };\n\n    return (\n        <section>\n            <h3 className='sr-only'>Save or download invoice form.</h3>\n            {saveAs && (\n                <form className='form__save-as' onSubmit={saveInvoice}>\n                    <FormInput\n                        form={{ formData, setFormData }}\n                        name='saveAs'\n                        size='sm'\n                    >\n                        <b>Save as: </b>\n                    </FormInput>\n                    <button\n                        type='submit'\n                        className='btn btn--info btn--sibling'\n                    >\n                        {' '}\n                        Save\n                    </button>\n                    <button\n                        type='button'\n                        className='btn'\n                        onClick={() => setSaveAs(false)}\n                    >\n                        {' '}\n                        Cancel\n                    </button>\n                </form>\n            )}\n\n            {!saveAs && (\n                <button\n                    type='button'\n                    className='btn btn--sibling'\n                    onClick={show_form}\n                    id='save-as'\n                >\n                    Save As\n                </button>\n            )}\n            {!saveAs && (\n                <button\n                    type='button'\n                    className='btn btn--info'\n                    onClick={downloadInvoice}\n                >\n                    Download*\n                </button>\n            )}\n            <p>\n                *{' '}\n                <small>\n                    You can either print or save the invoice in pdf format.{' '}\n                    <br />\n                    We recommend using Chrome browser for the best experience.\n                    On clicking this button follow your browsers specification\n                    on how to handle the process.\n                </small>\n            </p>\n        </section>\n    );\n};\n\nNewInvoiceSubmit.propTypes = {\n    company: PropTypes.object,\n    invoice: PropTypes.object,\n    getAllCompanies: PropTypes.func,\n    setAlert: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n    company: state.companies.find(\n        (c) => c._id === state.session.currentCompany\n    ),\n    invoice: state.invoice,\n});\n\nconst mapDispatchToProps = {\n    getAllCompanies,\n    setAlert,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(NewInvoiceSubmit));\n"]},"metadata":{},"sourceType":"module"}