{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/CompanyUpdate.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport CustomBuiltForm from '../../components/form/forms/CustomBuiltForm';\nimport { connect } from 'react-redux';\nimport { getAllCompanies } from '../../redux/actions/companies';\nimport { setUpdates } from '../../redux/actions/updates';\nimport { alertUnsavedChanges } from '../../components/form/utils/handleUnsavedChanges';\n\nclass CompanyUpdate extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChanges = this.handleChanges.bind(this);\n    this.clearInitState = this.clearInitState.bind(this);\n    this.updateInitStateToReduxStateOnSubmit = this.updateInitStateToReduxStateOnSubmit.bind(this);\n  }\n\n  handleChanges() {\n    alertUnsavedChanges(this.props.initialState, //initial state\n    this.props.company.details, //redux updated state\n    `/dashboard/companies/${this.props.company._id}?tab=update`, this.props.setUpdates, this.props.history);\n  }\n\n  updateInitStateToReduxStateOnSubmit() {\n    this.props.setUpdates(this.props.company.details);\n  }\n\n  clearInitState() {\n    //on submit clear app updates\n    this.props.setUpdates(null);\n  }\n\n  componentDidMount() {\n    if (this.props.initialState === null) this.props.setUpdates(JSON.parse(JSON.stringify(this.props.company.details)));\n    window.addEventListener('beforeunload', this.props.clearInitState);\n  }\n\n  componentWillUnmount() {\n    //auth err and logout won't trigger fun\n    if (this.props.authenticated) this.handleChanges();\n    window.removeEventListener('beforeunload', this.props.clearInitState);\n  }\n\n  render() {\n    const formData = {\n      inputs: this.props.company.details,\n      http: `/api/companies/details/${this.props.company._id}`,\n      url: '/dashboard/companies/',\n      cb: this.props.getAllCompanies,\n      updateInitStateToReduxStateOnSubmit: this.updateInitStateToReduxStateOnSubmit,\n      //stops firing alertUnsavedChanges on submit\n      msg: 'Company has been updated successfully.'\n    };\n    return /*#__PURE__*/React.createElement(CustomBuiltForm, {\n      data: formData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nCompanyUpdate.propTypes = {\n  authenticated: PropTypes.bool,\n  company: PropTypes.object.isRequired,\n  getAllCompanies: PropTypes.func,\n  setAlert: PropTypes.func,\n  setUpdates: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  authenticated: state.session.authenticated,\n  initialState: state.updates.initialState,\n  company: state.companies.find(c => c._id === state.session.currentCompany)\n});\n\nconst mapDispatchToProps = {\n  getAllCompanies,\n  setUpdates\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(CompanyUpdate));","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/CompanyUpdate.js"],"names":["React","Component","withRouter","PropTypes","CustomBuiltForm","connect","getAllCompanies","setUpdates","alertUnsavedChanges","CompanyUpdate","constructor","props","handleChanges","bind","clearInitState","updateInitStateToReduxStateOnSubmit","initialState","company","details","_id","history","componentDidMount","JSON","parse","stringify","window","addEventListener","componentWillUnmount","authenticated","removeEventListener","render","formData","inputs","http","url","cb","msg","propTypes","bool","object","isRequired","func","setAlert","mapStateToProps","state","session","updates","companies","find","c","currentCompany","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,eAAP,MAA4B,6CAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,+BAAhC;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,mBAAT,QAAoC,kDAApC;;AAEA,MAAMC,aAAN,SAA4BR,SAA5B,CAAsC;AAClCS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKE,mCAAL,GAA2C,KAAKA,mCAAL,CAAyCF,IAAzC,CACvC,IADuC,CAA3C;AAGH;;AACDD,EAAAA,aAAa,GAAG;AACZJ,IAAAA,mBAAmB,CACf,KAAKG,KAAL,CAAWK,YADI,EACU;AACzB,SAAKL,KAAL,CAAWM,OAAX,CAAmBC,OAFJ,EAEa;AAC3B,4BAAuB,KAAKP,KAAL,CAAWM,OAAX,CAAmBE,GAAI,aAHhC,EAIf,KAAKR,KAAL,CAAWJ,UAJI,EAKf,KAAKI,KAAL,CAAWS,OALI,CAAnB;AAOH;;AACDL,EAAAA,mCAAmC,GAAG;AAClC,SAAKJ,KAAL,CAAWJ,UAAX,CAAsB,KAAKI,KAAL,CAAWM,OAAX,CAAmBC,OAAzC;AACH;;AACDJ,EAAAA,cAAc,GAAG;AACb;AACA,SAAKH,KAAL,CAAWJ,UAAX,CAAsB,IAAtB;AACH;;AACDc,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKV,KAAL,CAAWK,YAAX,KAA4B,IAAhC,EACI,KAAKL,KAAL,CAAWJ,UAAX,CACIe,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKb,KAAL,CAAWM,OAAX,CAAmBC,OAAlC,CAAX,CADJ;AAGJO,IAAAA,MAAM,CAACC,gBAAP,CAAwB,cAAxB,EAAwC,KAAKf,KAAL,CAAWG,cAAnD;AACH;;AACDa,EAAAA,oBAAoB,GAAG;AACnB;AACA,QAAI,KAAKhB,KAAL,CAAWiB,aAAf,EAA8B,KAAKhB,aAAL;AAC9Ba,IAAAA,MAAM,CAACI,mBAAP,CAA2B,cAA3B,EAA2C,KAAKlB,KAAL,CAAWG,cAAtD;AACH;;AACDgB,EAAAA,MAAM,GAAG;AACL,UAAMC,QAAQ,GAAG;AACbC,MAAAA,MAAM,EAAE,KAAKrB,KAAL,CAAWM,OAAX,CAAmBC,OADd;AAEbe,MAAAA,IAAI,EAAG,0BAAyB,KAAKtB,KAAL,CAAWM,OAAX,CAAmBE,GAAI,EAF1C;AAGbe,MAAAA,GAAG,EAAE,uBAHQ;AAIbC,MAAAA,EAAE,EAAE,KAAKxB,KAAL,CAAWL,eAJF;AAKbS,MAAAA,mCAAmC,EAAE,KAChCA,mCANQ;AAM6B;AAC1CqB,MAAAA,GAAG,EAAE;AAPQ,KAAjB;AASA,wBAAO,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEL,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAhDiC;;AAkDtCtB,aAAa,CAAC4B,SAAd,GAA0B;AACtBT,EAAAA,aAAa,EAAEzB,SAAS,CAACmC,IADH;AAEtBrB,EAAAA,OAAO,EAAEd,SAAS,CAACoC,MAAV,CAAiBC,UAFJ;AAGtBlC,EAAAA,eAAe,EAAEH,SAAS,CAACsC,IAHL;AAItBC,EAAAA,QAAQ,EAAEvC,SAAS,CAACsC,IAJE;AAKtBlC,EAAAA,UAAU,EAAEJ,SAAS,CAACsC;AALA,CAA1B;;AAOA,MAAME,eAAe,GAAIC,KAAD,KAAY;AAChChB,EAAAA,aAAa,EAAEgB,KAAK,CAACC,OAAN,CAAcjB,aADG;AAEhCZ,EAAAA,YAAY,EAAE4B,KAAK,CAACE,OAAN,CAAc9B,YAFI;AAGhCC,EAAAA,OAAO,EAAE2B,KAAK,CAACG,SAAN,CAAgBC,IAAhB,CACJC,CAAD,IAAOA,CAAC,CAAC9B,GAAF,KAAUyB,KAAK,CAACC,OAAN,CAAcK,cAD1B;AAHuB,CAAZ,CAAxB;;AAQA,MAAMC,kBAAkB,GAAG;AACvB7C,EAAAA,eADuB;AAEvBC,EAAAA;AAFuB,CAA3B;AAKA,eAAeF,OAAO,CAClBsC,eADkB,EAElBQ,kBAFkB,CAAP,CAGbjD,UAAU,CAACO,aAAD,CAHG,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport CustomBuiltForm from '../../components/form/forms/CustomBuiltForm';\nimport { connect } from 'react-redux';\nimport { getAllCompanies } from '../../redux/actions/companies';\nimport { setUpdates } from '../../redux/actions/updates';\nimport { alertUnsavedChanges } from '../../components/form/utils/handleUnsavedChanges';\n\nclass CompanyUpdate extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChanges = this.handleChanges.bind(this);\n        this.clearInitState = this.clearInitState.bind(this);\n        this.updateInitStateToReduxStateOnSubmit = this.updateInitStateToReduxStateOnSubmit.bind(\n            this\n        );\n    }\n    handleChanges() {\n        alertUnsavedChanges(\n            this.props.initialState, //initial state\n            this.props.company.details, //redux updated state\n            `/dashboard/companies/${this.props.company._id}?tab=update`,\n            this.props.setUpdates,\n            this.props.history\n        );\n    }\n    updateInitStateToReduxStateOnSubmit() {\n        this.props.setUpdates(this.props.company.details);\n    }\n    clearInitState() {\n        //on submit clear app updates\n        this.props.setUpdates(null);\n    }\n    componentDidMount() {\n        if (this.props.initialState === null)\n            this.props.setUpdates(\n                JSON.parse(JSON.stringify(this.props.company.details))\n            );\n        window.addEventListener('beforeunload', this.props.clearInitState);\n    }\n    componentWillUnmount() {\n        //auth err and logout won't trigger fun\n        if (this.props.authenticated) this.handleChanges();\n        window.removeEventListener('beforeunload', this.props.clearInitState);\n    }\n    render() {\n        const formData = {\n            inputs: this.props.company.details,\n            http: `/api/companies/details/${this.props.company._id}`,\n            url: '/dashboard/companies/',\n            cb: this.props.getAllCompanies,\n            updateInitStateToReduxStateOnSubmit: this\n                .updateInitStateToReduxStateOnSubmit, //stops firing alertUnsavedChanges on submit\n            msg: 'Company has been updated successfully.',\n        };\n        return <CustomBuiltForm data={formData} />;\n    }\n}\nCompanyUpdate.propTypes = {\n    authenticated: PropTypes.bool,\n    company: PropTypes.object.isRequired,\n    getAllCompanies: PropTypes.func,\n    setAlert: PropTypes.func,\n    setUpdates: PropTypes.func,\n};\nconst mapStateToProps = (state) => ({\n    authenticated: state.session.authenticated,\n    initialState: state.updates.initialState,\n    company: state.companies.find(\n        (c) => c._id === state.session.currentCompany\n    ),\n});\n\nconst mapDispatchToProps = {\n    getAllCompanies,\n    setUpdates,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(CompanyUpdate));\n"]},"metadata":{},"sourceType":"module"}