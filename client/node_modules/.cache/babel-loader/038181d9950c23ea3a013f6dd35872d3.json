{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  parseFloatingPointNumber\n} = require(\"../helpers/strings\");\n\nconst {\n  getLabelsForLabelable\n} = require(\"../helpers/form-controls\");\n\nclass HTMLMeterElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._labels = null;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-minimum\n\n\n  get _minimumValue() {\n    const min = this.getAttribute(\"min\");\n\n    if (min === null) {\n      return 0;\n    }\n\n    const parsed = parseFloatingPointNumber(min);\n\n    if (Number.isNaN(parsed)) {\n      return 0;\n    }\n\n    return parsed;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-maximum\n\n\n  get _maximumValue() {\n    let candidate = 1.0;\n    const max = this.getAttribute(\"max\");\n\n    if (max !== null) {\n      const parsed = parseFloatingPointNumber(max);\n\n      if (!Number.isNaN(parsed)) {\n        candidate = parsed;\n      }\n    }\n\n    const minimumValue = this._minimumValue;\n    return candidate >= minimumValue ? candidate : minimumValue;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-actual\n\n\n  get _actualValue() {\n    let candidate = 0;\n    const value = this.getAttribute(\"value\");\n\n    if (value !== null) {\n      const parsed = parseFloatingPointNumber(value);\n\n      if (!Number.isNaN(parsed)) {\n        candidate = parsed;\n      }\n    }\n\n    const minimumValue = this._minimumValue;\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-low\n\n\n  get _lowBoundary() {\n    const minimumValue = this._minimumValue;\n    let candidate = minimumValue;\n    const low = this.getAttribute(\"low\");\n\n    if (low !== null) {\n      const parsed = parseFloatingPointNumber(low);\n\n      if (!Number.isNaN(parsed)) {\n        candidate = parsed;\n      }\n    }\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-high\n\n\n  get _highBoundary() {\n    const maximumValue = this._maximumValue;\n    let candidate = maximumValue;\n    const high = this.getAttribute(\"high\");\n\n    if (high !== null) {\n      const parsed = parseFloatingPointNumber(high);\n\n      if (!Number.isNaN(parsed)) {\n        candidate = parsed;\n      }\n    }\n\n    const lowBoundary = this._lowBoundary;\n\n    if (candidate < lowBoundary) {\n      return lowBoundary;\n    }\n\n    return candidate > maximumValue ? maximumValue : candidate;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-optimum\n\n\n  get _optimumPoint() {\n    const minimumValue = this._minimumValue;\n    const maximumValue = this._maximumValue;\n    let candidate = (minimumValue + maximumValue) / 2;\n    const optimum = this.getAttribute(\"optimum\");\n\n    if (optimum !== null) {\n      const parsed = parseFloatingPointNumber(optimum);\n\n      if (!Number.isNaN(parsed)) {\n        candidate = parsed;\n      }\n    }\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get value() {\n    return this._actualValue;\n  }\n\n  set value(val) {\n    this.setAttribute(\"value\", String(val));\n  }\n\n  get min() {\n    return this._minimumValue;\n  }\n\n  set min(val) {\n    this.setAttribute(\"min\", String(val));\n  }\n\n  get max() {\n    return this._maximumValue;\n  }\n\n  set max(val) {\n    this.setAttribute(\"max\", String(val));\n  }\n\n  get low() {\n    return this._lowBoundary;\n  }\n\n  set low(val) {\n    this.setAttribute(\"low\", String(val));\n  }\n\n  get high() {\n    return this._highBoundary;\n  }\n\n  set high(val) {\n    this.setAttribute(\"high\", String(val));\n  }\n\n  get optimum() {\n    return this._optimumPoint;\n  }\n\n  set optimum(val) {\n    this.setAttribute(\"optimum\", String(val));\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLMeterElementImpl\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMeterElement-impl.js"],"names":["HTMLElementImpl","require","implementation","parseFloatingPointNumber","getLabelsForLabelable","HTMLMeterElementImpl","constructor","args","privateData","_labels","_minimumValue","min","getAttribute","parsed","Number","isNaN","_maximumValue","candidate","max","minimumValue","_actualValue","value","maximumValue","_lowBoundary","low","_highBoundary","high","lowBoundary","_optimumPoint","optimum","labels","val","setAttribute","String","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { parseFloatingPointNumber } = require(\"../helpers/strings\");\nconst { getLabelsForLabelable } = require(\"../helpers/form-controls\");\n\nclass HTMLMeterElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._labels = null;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-minimum\n  get _minimumValue() {\n    const min = this.getAttribute(\"min\");\n    if (min === null) {\n      return 0;\n    }\n    const parsed = parseFloatingPointNumber(min);\n    if (Number.isNaN(parsed)) {\n      return 0;\n    }\n    return parsed;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-maximum\n  get _maximumValue() {\n    let candidate = 1.0;\n\n    const max = this.getAttribute(\"max\");\n    if (max !== null) {\n      const parsed = parseFloatingPointNumber(max);\n      if (!Number.isNaN(parsed)) {\n        candidate = parsed;\n      }\n    }\n\n    const minimumValue = this._minimumValue;\n    return candidate >= minimumValue ? candidate : minimumValue;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-actual\n  get _actualValue() {\n    let candidate = 0;\n\n    const value = this.getAttribute(\"value\");\n    if (value !== null) {\n      const parsed = parseFloatingPointNumber(value);\n      if (!Number.isNaN(parsed)) {\n        candidate = parsed;\n      }\n    }\n\n    const minimumValue = this._minimumValue;\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-low\n  get _lowBoundary() {\n    const minimumValue = this._minimumValue;\n    let candidate = minimumValue;\n\n    const low = this.getAttribute(\"low\");\n    if (low !== null) {\n      const parsed = parseFloatingPointNumber(low);\n      if (!Number.isNaN(parsed)) {\n        candidate = parsed;\n      }\n    }\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-high\n  get _highBoundary() {\n    const maximumValue = this._maximumValue;\n    let candidate = maximumValue;\n\n    const high = this.getAttribute(\"high\");\n    if (high !== null) {\n      const parsed = parseFloatingPointNumber(high);\n      if (!Number.isNaN(parsed)) {\n        candidate = parsed;\n      }\n    }\n\n    const lowBoundary = this._lowBoundary;\n    if (candidate < lowBoundary) {\n      return lowBoundary;\n    }\n\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-optimum\n  get _optimumPoint() {\n    const minimumValue = this._minimumValue;\n    const maximumValue = this._maximumValue;\n    let candidate = (minimumValue + maximumValue) / 2;\n\n    const optimum = this.getAttribute(\"optimum\");\n    if (optimum !== null) {\n      const parsed = parseFloatingPointNumber(optimum);\n      if (!Number.isNaN(parsed)) {\n        candidate = parsed;\n      }\n    }\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get value() {\n    return this._actualValue;\n  }\n\n  set value(val) {\n    this.setAttribute(\"value\", String(val));\n  }\n\n  get min() {\n    return this._minimumValue;\n  }\n\n  set min(val) {\n    this.setAttribute(\"min\", String(val));\n  }\n\n  get max() {\n    return this._maximumValue;\n  }\n\n  set max(val) {\n    this.setAttribute(\"max\", String(val));\n  }\n\n  get low() {\n    return this._lowBoundary;\n  }\n\n  set low(val) {\n    this.setAttribute(\"low\", String(val));\n  }\n\n  get high() {\n    return this._highBoundary;\n  }\n\n  set high(val) {\n    this.setAttribute(\"high\", String(val));\n  }\n\n  get optimum() {\n    return this._optimumPoint;\n  }\n\n  set optimum(val) {\n    this.setAttribute(\"optimum\", String(val));\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLMeterElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}