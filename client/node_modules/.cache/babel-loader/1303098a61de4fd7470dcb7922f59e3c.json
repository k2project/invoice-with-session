{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nconst initialState = {};\nconst middleware = [thunk];\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['session']\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nexport default (() => {\n  let store = createStorecreateStore(persistedReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\n  let persistor = persistStore(store);\n  return {\n    store,\n    persistor\n  };\n}); // const store = createStore(\n//     rootReducer,\n//     initialState,\n//     composeWithDevTools(applyMiddleware(...middleware))\n// );\n// export default store;","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/redux/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","persistStore","persistReducer","storage","initialState","middleware","persistConfig","key","whitelist","persistedReducer","store","createStorecreateStore","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,MAAMC,YAAY,GAAG,EAArB;AACA,MAAMC,UAAU,GAAG,CAACN,KAAD,CAAnB;AAEA,MAAMO,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElBJ,EAAAA,OAFkB;AAGlBK,EAAAA,SAAS,EAAE,CAAC,SAAD;AAHO,CAAtB;AAMA,MAAMC,gBAAgB,GAAGP,cAAc,CAACI,aAAD,EAAgBN,WAAhB,CAAvC;AAEA,gBAAe,MAAM;AACjB,MAAIU,KAAK,GAAGC,sBAAsB,CAC9BF,gBAD8B,EAE9BL,YAF8B,EAG9BN,mBAAmB,CAACD,eAAe,CAAC,GAAGQ,UAAJ,CAAhB,CAHW,CAAlC;AAKA,MAAIO,SAAS,GAAGX,YAAY,CAACS,KAAD,CAA5B;AACA,SAAO;AAAEA,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAP;AACH,CARD,E,CAUA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst initialState = {};\nconst middleware = [thunk];\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    whitelist: ['session'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default () => {\n    let store = createStorecreateStore(\n        persistedReducer,\n        initialState,\n        composeWithDevTools(applyMiddleware(...middleware))\n    );\n    let persistor = persistStore(store);\n    return { store, persistor };\n};\n\n// const store = createStore(\n//     rootReducer,\n//     initialState,\n//     composeWithDevTools(applyMiddleware(...middleware))\n// );\n// export default store;\n"]},"metadata":{},"sourceType":"module"}