{"ast":null,"code":"\"use strict\";\n\nconst cssom = require(\"cssom\");\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst whatwgURL = require(\"whatwg-url\");\n\nconst resourceLoader = require(\"../../browser/resource-loader\"); // TODO: this should really implement https://html.spec.whatwg.org/multipage/links.html#link-type-stylesheet\n// It (and the things it calls) is nowhere close right now.\n\n\nexports.fetchStylesheet = (elementImpl, urlString) => {\n  const parsedURL = whatwgURL.parseURL(urlString);\n  return fetchStylesheetInternal(elementImpl, urlString, parsedURL);\n}; // https://drafts.csswg.org/cssom/#remove-a-css-style-sheet\n\n\nexports.removeStylesheet = (sheet, elementImpl) => {\n  const {\n    styleSheets\n  } = elementImpl._ownerDocument;\n  styleSheets.splice(styleSheets.indexOf(sheet, 1)); // Remove the association explicitly; in the spec it's implicit so this step doesn't exist.\n\n  elementImpl.sheet = null; // TODO: \"Set the CSS style sheet’s parent CSS style sheet, owner node and owner CSS rule to null.\"\n  // Probably when we have a real CSSOM implementation.\n}; // https://drafts.csswg.org/cssom/#create-a-css-style-sheet kinda:\n// - Parsing failures are not handled gracefully like they should be\n// - The import rules stuff seems out of place, and probably should affect the load event...\n\n\nexports.createStylesheet = (sheetText, elementImpl, baseURL) => {\n  let sheet;\n\n  try {\n    sheet = cssom.parse(sheetText);\n  } catch (e) {\n    if (elementImpl._ownerDocument._defaultView) {\n      const error = new Error(\"Could not parse CSS stylesheet\");\n      error.detail = sheetText;\n      error.type = \"css parsing\";\n\n      elementImpl._ownerDocument._defaultView._virtualConsole.emit(\"jsdomError\", error);\n    }\n\n    return;\n  }\n\n  scanForImportRules(elementImpl, sheet.cssRules, baseURL);\n  addStylesheet(sheet, elementImpl);\n}; // https://drafts.csswg.org/cssom/#add-a-css-style-sheet\n\n\nfunction addStylesheet(sheet, elementImpl) {\n  elementImpl._ownerDocument.styleSheets.push(sheet); // Set the association explicitly; in the spec it's implicit.\n\n\n  elementImpl.sheet = sheet; // TODO: title and disabled stuff\n}\n\nfunction fetchStylesheetInternal(elementImpl, urlString, parsedURL) {\n  let defaultEncoding = elementImpl._ownerDocument._encoding;\n\n  if (elementImpl.localName === \"link\" && elementImpl.hasAttribute(\"charset\")) {\n    defaultEncoding = whatwgEncoding.labelToName(elementImpl.getAttribute(\"charset\"));\n  }\n\n  resourceLoader.load(elementImpl, urlString, {\n    defaultEncoding\n  }, data => {\n    // TODO: MIME type checking?\n    if (elementImpl.sheet) {\n      exports.removeStylesheet(elementImpl.sheet, elementImpl);\n    }\n\n    exports.createStylesheet(data, elementImpl, parsedURL);\n  });\n} // TODO this is actually really messed up and overwrites the sheet on elementImpl\n// Tracking in https://github.com/tmpvar/jsdom/issues/2124\n\n\nfunction scanForImportRules(elementImpl, cssRules, baseURL) {\n  if (!cssRules) {\n    return;\n  }\n\n  for (let i = 0; i < cssRules.length; ++i) {\n    if (cssRules[i].cssRules) {\n      // @media rule: keep searching inside it.\n      scanForImportRules(elementImpl, cssRules[i].cssRules, baseURL);\n    } else if (cssRules[i].href) {\n      // @import rule: fetch the resource and evaluate it.\n      // See http://dev.w3.org/csswg/cssom/#css-import-rule\n      //     If loading of the style sheet fails its cssRules list is simply\n      //     empty. I.e. an @import rule always has an associated style sheet.\n      const parsed = whatwgURL.parseURL(cssRules[i].href, {\n        baseURL\n      });\n\n      if (parsed === null) {\n        const window = elementImpl._ownerDocument._defaultView;\n\n        if (window) {\n          const error = new Error(`Could not parse CSS @import URL ${cssRules[i].href} relative to base URL ` + `\"${whatwgURL.serializeURL(baseURL)}\"`);\n          error.type = \"css @import URL parsing\";\n\n          window._virtualConsole.emit(\"jsdomError\", error);\n        }\n      } else {\n        fetchStylesheetInternal(elementImpl, whatwgURL.serializeURL(parsed), parsed);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/helpers/stylesheets.js"],"names":["cssom","require","whatwgEncoding","whatwgURL","resourceLoader","exports","fetchStylesheet","elementImpl","urlString","parsedURL","parseURL","fetchStylesheetInternal","removeStylesheet","sheet","styleSheets","_ownerDocument","splice","indexOf","createStylesheet","sheetText","baseURL","parse","e","_defaultView","error","Error","detail","type","_virtualConsole","emit","scanForImportRules","cssRules","addStylesheet","push","defaultEncoding","_encoding","localName","hasAttribute","labelToName","getAttribute","load","data","i","length","href","parsed","window","serializeURL"],"mappings":"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","sourcesContent":["\"use strict\";\nconst cssom = require(\"cssom\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst whatwgURL = require(\"whatwg-url\");\nconst resourceLoader = require(\"../../browser/resource-loader\");\n\n// TODO: this should really implement https://html.spec.whatwg.org/multipage/links.html#link-type-stylesheet\n// It (and the things it calls) is nowhere close right now.\nexports.fetchStylesheet = (elementImpl, urlString) => {\n  const parsedURL = whatwgURL.parseURL(urlString);\n  return fetchStylesheetInternal(elementImpl, urlString, parsedURL);\n};\n\n// https://drafts.csswg.org/cssom/#remove-a-css-style-sheet\nexports.removeStylesheet = (sheet, elementImpl) => {\n  const { styleSheets } = elementImpl._ownerDocument;\n  styleSheets.splice(styleSheets.indexOf(sheet, 1));\n\n  // Remove the association explicitly; in the spec it's implicit so this step doesn't exist.\n  elementImpl.sheet = null;\n\n  // TODO: \"Set the CSS style sheet’s parent CSS style sheet, owner node and owner CSS rule to null.\"\n  // Probably when we have a real CSSOM implementation.\n};\n\n// https://drafts.csswg.org/cssom/#create-a-css-style-sheet kinda:\n// - Parsing failures are not handled gracefully like they should be\n// - The import rules stuff seems out of place, and probably should affect the load event...\nexports.createStylesheet = (sheetText, elementImpl, baseURL) => {\n  let sheet;\n  try {\n    sheet = cssom.parse(sheetText);\n  } catch (e) {\n    if (elementImpl._ownerDocument._defaultView) {\n      const error = new Error(\"Could not parse CSS stylesheet\");\n      error.detail = sheetText;\n      error.type = \"css parsing\";\n\n      elementImpl._ownerDocument._defaultView._virtualConsole.emit(\"jsdomError\", error);\n    }\n    return;\n  }\n\n  scanForImportRules(elementImpl, sheet.cssRules, baseURL);\n\n  addStylesheet(sheet, elementImpl);\n};\n\n// https://drafts.csswg.org/cssom/#add-a-css-style-sheet\nfunction addStylesheet(sheet, elementImpl) {\n  elementImpl._ownerDocument.styleSheets.push(sheet);\n\n  // Set the association explicitly; in the spec it's implicit.\n  elementImpl.sheet = sheet;\n\n  // TODO: title and disabled stuff\n}\n\nfunction fetchStylesheetInternal(elementImpl, urlString, parsedURL) {\n  let defaultEncoding = elementImpl._ownerDocument._encoding;\n  if (elementImpl.localName === \"link\" && elementImpl.hasAttribute(\"charset\")) {\n    defaultEncoding = whatwgEncoding.labelToName(elementImpl.getAttribute(\"charset\"));\n  }\n\n  resourceLoader.load(elementImpl, urlString, { defaultEncoding }, data => {\n    // TODO: MIME type checking?\n    if (elementImpl.sheet) {\n      exports.removeStylesheet(elementImpl.sheet, elementImpl);\n    }\n    exports.createStylesheet(data, elementImpl, parsedURL);\n  });\n}\n\n// TODO this is actually really messed up and overwrites the sheet on elementImpl\n// Tracking in https://github.com/tmpvar/jsdom/issues/2124\nfunction scanForImportRules(elementImpl, cssRules, baseURL) {\n  if (!cssRules) {\n    return;\n  }\n\n  for (let i = 0; i < cssRules.length; ++i) {\n    if (cssRules[i].cssRules) {\n      // @media rule: keep searching inside it.\n      scanForImportRules(elementImpl, cssRules[i].cssRules, baseURL);\n    } else if (cssRules[i].href) {\n      // @import rule: fetch the resource and evaluate it.\n      // See http://dev.w3.org/csswg/cssom/#css-import-rule\n      //     If loading of the style sheet fails its cssRules list is simply\n      //     empty. I.e. an @import rule always has an associated style sheet.\n      const parsed = whatwgURL.parseURL(cssRules[i].href, { baseURL });\n      if (parsed === null) {\n        const window = elementImpl._ownerDocument._defaultView;\n        if (window) {\n          const error = new Error(`Could not parse CSS @import URL ${cssRules[i].href} relative to base URL ` +\n                                  `\"${whatwgURL.serializeURL(baseURL)}\"`);\n          error.type = \"css @import URL parsing\";\n          window._virtualConsole.emit(\"jsdomError\", error);\n        }\n      } else {\n        fetchStylesheetInternal(elementImpl, whatwgURL.serializeURL(parsed), parsed);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}