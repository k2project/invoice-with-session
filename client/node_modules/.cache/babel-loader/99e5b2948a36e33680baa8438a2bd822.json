{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport { updateCompanyArr } from '../../../redux/actions/companies';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { alertUnsavedChanges } from '../../../components/form/utils/handleUnsavedChanges';\nimport { setNewInvoice } from './invoiceFun';\n\nclass NewInvoice extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      invoice: null\n    };\n    this.handleChanges = this.handleChanges.bind(this);\n    this.resestInvoiceState = this.resestInvoiceState.bind(this);\n    this.setAllTasksToExcluded = this.setAllTasksToExcluded.bind(this);\n  }\n\n  resestInvoiceState() {\n    //on leave clear invoice permanent state\n    //no changes or submit or page leave\n    this.props.setInvoiceInitState({\n      bg_color: localStorage.invoice_bg || 'blue',\n      text_color: localStorage.invoice_txt || 'white',\n      profile: [],\n      company: [],\n      tasks: [],\n      discount: 0,\n      tax: 0,\n      fees: 0,\n      notes: 'Thank you for your business.',\n      currency: ''\n    });\n  }\n\n  async setAllTasksToExcluded(tasksArr) {\n    console.log(tasksArr, this.props.company.tasks);\n    let tasks = tasksArr.map(task => {\n      task.addToInvoice = false;\n      return task;\n    });\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      await axios.post(`/api/companies/task/${this.props.company._id}`, JSON.stringify(tasks), config);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  componentDidMount() {\n    //set current tabs for handling unsaved changes redirection\n    this.setState({ ...this.state,\n      tabs: window.location.search\n    });\n    let invoiceToLoad = null;\n    const searchArr = window.location.search.split('&');\n\n    if (searchArr[1]) {\n      //?updating=...\n      //downlaoding an existing invoice\n      //?download=...\n      const invoice_ID = searchArr[1].slice(9);\n      invoiceToLoad = this.props.company.invoices.find(invoice => invoice._id === invoice_ID);\n    }\n\n    if (!invoiceToLoad) {\n      //invoice num #\n      let invoiceInitState = setNewInvoice(this.props.profile, this.props.company); //set init state for comparison on component unmounting\n\n      this.setState({\n        invoice: JSON.parse(JSON.stringify(invoiceInitState))\n      }); //set redux state\n\n      this.props.setInvoiceInitState(invoiceInitState);\n    }\n\n    if (invoiceToLoad) {\n      //updating an existing invoice\n      //set component init state\n      this.setState({\n        invoice: JSON.parse(JSON.stringify(invoiceToLoad))\n      }); //set redux state\n\n      this.props.setInvoiceInitState(invoiceToLoad);\n\n      if (invoiceToLoad) {\n        //add invoice tasks to existing tasks of the current company\n        const tasksArrIncInvoiceTasks = [...invoiceToLoad.tasks, ...this.props.company.tasks];\n        this.props.updateCompanyArr('tasks', tasksArrIncInvoiceTasks, this.props.company._id);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    //auth err and logout won't trigger fun\n    if (this.props.session.authenticated) this.handleChanges();\n  }\n\n  handleChanges() {\n    //TASKS CAN BE AMENDED/UPDATED IN FORM  WITH EFECT ON DB HENCE NEED TO CHECK INIT STATE AGAINST COMPANY.TASKS NOT INVOICE.TASKS!!!\n    //update invoice state of added tasks before comparing changes on leave\n    //passes tests 1-6\n    this.props.invoice.tasks = this.props.company.tasks.filter(t => t.addToInvoice); // remove tasks added on update\n\n    const initStateTasksIds = this.state.invoice.tasks.map(t => t._id);\n    const nonInvoiceTasks = this.props.company.tasks.filter(task => !initStateTasksIds.includes(task._id));\n    this.props.updateCompanyArr('tasks', nonInvoiceTasks, this.props.company._id);\n    console.log('state:', this.state.invoice, 'redux', this.props.invoice);\n\n    const stateUpdate = () => {\n      //no changes detected\n      this.resestInvoiceState(); //if changes discarched update DB\n      // if (\n      //     JSON.stringify(this.state.invoice) !==\n      //     JSON.stringify(this.props.invoice)\n      // )\n      // this.setAllTasksToExcluded(nonInvoiceTasks);\n    };\n\n    alertUnsavedChanges(this.state.invoice, this.props.invoice, `/dashboard/companies/${this.props.company._id}${this.state.tabs}`, stateUpdate, this.props.history);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"company-invoice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }, \"Create a new invoice.\"), /*#__PURE__*/React.createElement(InvoiceDoc, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }), this.state.invoice && /*#__PURE__*/React.createElement(NewInvoiceSubmit, {\n      invoiceInitState: this.state.invoice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nNewInvoice.propTypes = {\n  session: PropTypes.object,\n  profile: PropTypes.object,\n  company: PropTypes.object,\n  invoice: PropTypes.object,\n  updateCompanyArr: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  session: state.session,\n  profile: state.profile,\n  company: state.companies.find(c => c._id === state.session.currentCompany),\n  invoice: state.invoice\n});\n\nconst mapDispatchToProps = {\n  setInvoiceInitState,\n  updateCompanyArr\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(NewInvoice));","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js"],"names":["React","Component","PropTypes","axios","withRouter","connect","setInvoiceInitState","updateCompanyArr","InvoiceDoc","NewInvoiceSubmit","alertUnsavedChanges","setNewInvoice","NewInvoice","constructor","props","state","invoice","handleChanges","bind","resestInvoiceState","setAllTasksToExcluded","bg_color","localStorage","invoice_bg","text_color","invoice_txt","profile","company","tasks","discount","tax","fees","notes","currency","tasksArr","console","log","map","task","addToInvoice","config","headers","post","_id","JSON","stringify","err","componentDidMount","setState","tabs","window","location","search","invoiceToLoad","searchArr","split","invoice_ID","slice","invoices","find","invoiceInitState","parse","tasksArrIncInvoiceTasks","componentWillUnmount","session","authenticated","filter","t","initStateTasksIds","nonInvoiceTasks","includes","stateUpdate","history","render","propTypes","object","func","mapStateToProps","companies","c","currentCompany","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport { updateCompanyArr } from '../../../redux/actions/companies';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { alertUnsavedChanges } from '../../../components/form/utils/handleUnsavedChanges';\nimport { setNewInvoice } from './invoiceFun';\n\nclass NewInvoice extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            invoice: null,\n        };\n        this.handleChanges = this.handleChanges.bind(this);\n        this.resestInvoiceState = this.resestInvoiceState.bind(this);\n        this.setAllTasksToExcluded = this.setAllTasksToExcluded.bind(this);\n    }\n\n    resestInvoiceState() {\n        //on leave clear invoice permanent state\n        //no changes or submit or page leave\n        this.props.setInvoiceInitState({\n            bg_color: localStorage.invoice_bg || 'blue',\n            text_color: localStorage.invoice_txt || 'white',\n            profile: [],\n            company: [],\n            tasks: [],\n            discount: 0,\n            tax: 0,\n            fees: 0,\n            notes: 'Thank you for your business.',\n            currency: '',\n        });\n    }\n    async setAllTasksToExcluded(tasksArr) {\n        console.log(tasksArr, this.props.company.tasks);\n        let tasks = tasksArr.map((task) => {\n            task.addToInvoice = false;\n            return task;\n        });\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n            await axios.post(\n                `/api/companies/task/${this.props.company._id}`,\n                JSON.stringify(tasks),\n                config\n            );\n        } catch (err) {\n            console.log(err);\n        }\n    }\n    componentDidMount() {\n        //set current tabs for handling unsaved changes redirection\n        this.setState({ ...this.state, tabs: window.location.search });\n        let invoiceToLoad = null;\n        const searchArr = window.location.search.split('&');\n        if (searchArr[1]) {\n            //?updating=...\n            //downlaoding an existing invoice\n            //?download=...\n            const invoice_ID = searchArr[1].slice(9);\n            invoiceToLoad = this.props.company.invoices.find(\n                (invoice) => invoice._id === invoice_ID\n            );\n        }\n        if (!invoiceToLoad) {\n            //invoice num #\n            let invoiceInitState = setNewInvoice(\n                this.props.profile,\n                this.props.company\n            );\n            //set init state for comparison on component unmounting\n            this.setState({\n                invoice: JSON.parse(JSON.stringify(invoiceInitState)),\n            });\n\n            //set redux state\n            this.props.setInvoiceInitState(invoiceInitState);\n        }\n\n        if (invoiceToLoad) {\n            //updating an existing invoice\n            //set component init state\n            this.setState({\n                invoice: JSON.parse(JSON.stringify(invoiceToLoad)),\n            });\n            //set redux state\n            this.props.setInvoiceInitState(invoiceToLoad);\n\n            if (invoiceToLoad) {\n                //add invoice tasks to existing tasks of the current company\n                const tasksArrIncInvoiceTasks = [\n                    ...invoiceToLoad.tasks,\n                    ...this.props.company.tasks,\n                ];\n                this.props.updateCompanyArr(\n                    'tasks',\n                    tasksArrIncInvoiceTasks,\n                    this.props.company._id\n                );\n            }\n        }\n    }\n    componentWillUnmount() {\n        //auth err and logout won't trigger fun\n        if (this.props.session.authenticated) this.handleChanges();\n    }\n    handleChanges() {\n        //TASKS CAN BE AMENDED/UPDATED IN FORM  WITH EFECT ON DB HENCE NEED TO CHECK INIT STATE AGAINST COMPANY.TASKS NOT INVOICE.TASKS!!!\n\n        //update invoice state of added tasks before comparing changes on leave\n        //passes tests 1-6\n        this.props.invoice.tasks = this.props.company.tasks.filter(\n            (t) => t.addToInvoice\n        );\n\n        // remove tasks added on update\n        const initStateTasksIds = this.state.invoice.tasks.map((t) => t._id);\n        const nonInvoiceTasks = this.props.company.tasks.filter(\n            (task) => !initStateTasksIds.includes(task._id)\n        );\n        this.props.updateCompanyArr(\n            'tasks',\n            nonInvoiceTasks,\n            this.props.company._id\n        );\n        console.log('state:', this.state.invoice, 'redux', this.props.invoice);\n        const stateUpdate = () => {\n            //no changes detected\n            this.resestInvoiceState();\n            //if changes discarched update DB\n            // if (\n            //     JSON.stringify(this.state.invoice) !==\n            //     JSON.stringify(this.props.invoice)\n            // )\n            // this.setAllTasksToExcluded(nonInvoiceTasks);\n        };\n\n        alertUnsavedChanges(\n            this.state.invoice,\n            this.props.invoice,\n            `/dashboard/companies/${this.props.company._id}${this.state.tabs}`,\n            stateUpdate,\n            this.props.history\n        );\n    }\n    render() {\n        return (\n            <section className='company-invoice'>\n                <h2 className='sr-only'>Create a new invoice.</h2>\n                <InvoiceDoc />\n                {this.state.invoice && (\n                    <NewInvoiceSubmit invoiceInitState={this.state.invoice} />\n                )}\n            </section>\n        );\n    }\n}\n\nNewInvoice.propTypes = {\n    session: PropTypes.object,\n    profile: PropTypes.object,\n    company: PropTypes.object,\n    invoice: PropTypes.object,\n    updateCompanyArr: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n    session: state.session,\n    profile: state.profile,\n    company: state.companies.find(\n        (c) => c._id === state.session.currentCompany\n    ),\n    invoice: state.invoice,\n});\n\nconst mapDispatchToProps = {\n    setInvoiceInitState,\n    updateCompanyArr,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(NewInvoice));\n"]},"metadata":{},"sourceType":"module"}