{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/invoiceDoc/InvoiceDocFooter.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport './InvoiceDoc.scss';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { numberWithCommas } from '../../../../components/form/utils/validations';\nimport CustomBuiltForm from '../../../../components/form/forms/CustomBuiltForm';\nimport plusIcon from '../../../../imgs/icons/plusIcon.png';\nimport updateIcon from '../../../../imgs/icons/updateIcon.png';\nimport tasksIcon from '../../../../imgs/icons/tasksIcon.png';\n\nconst {\n  v4: uuidv4\n} = require('uuid');\n\nconst InvoiceDocFooter = ({\n  invoice,\n  tasks\n}) => {\n  const [showNotesForm, setShowNotesForm] = useState(false);\n\n  const open_notes_form = async () => {\n    if (showNotesForm === true) return setShowNotesForm(false);\n    await setShowNotesForm(true); // document.querySelector('.tasks-table tbody').focus();\n  };\n\n  const formData = {\n    inputs: [{\n      _id: uuidv4(),\n      label: 'Notes',\n      value: '',\n      addToInvoice: false,\n      custom: false,\n      inputType: 'textarea'\n    }] // inputs: companyInitDetails,\n    // cb: getAllCompanies,\n\n  };\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"invoice__footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"invoice__notes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 29\n    }\n  }, \"Notes:\")), \"You can either print or save the invoice in pdf format. We recommend using Chrome broweser for the best experience. On clicking this button follow your browsers specification on how to handle the process.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: `bg-${invoice.bg_color}  invoice__cover`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: `bg-${invoice.bg_color} txt-${invoice.text_color} invoice__total`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }\n  }, \"Net and gross amount.\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, \"Total: \\xA30.00\"))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CustomBuiltForm, {\n    data: formData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"footer\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"Thank you for your business!\"));\n};\n\nInvoiceDocFooter.propTypes = {\n  invoice: PropTypes.object,\n  tasks: PropTypes.array\n};\n\nconst mapStateToProps = state => ({\n  invoice: state.invoice,\n  tasks: state.companies.find(c => c._id === state.session.currentCompany).tasks\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(InvoiceDocFooter);","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/invoiceDoc/InvoiceDocFooter.js"],"names":["React","useState","useEffect","Fragment","PropTypes","connect","numberWithCommas","CustomBuiltForm","plusIcon","updateIcon","tasksIcon","v4","uuidv4","require","InvoiceDocFooter","invoice","tasks","showNotesForm","setShowNotesForm","open_notes_form","formData","inputs","_id","label","value","addToInvoice","custom","inputType","bg_color","text_color","propTypes","object","array","mapStateToProps","state","companies","find","c","session","currentCompany","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport './InvoiceDoc.scss';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { numberWithCommas } from '../../../../components/form/utils/validations';\nimport CustomBuiltForm from '../../../../components/form/forms/CustomBuiltForm';\nimport plusIcon from '../../../../imgs/icons/plusIcon.png';\nimport updateIcon from '../../../../imgs/icons/updateIcon.png';\nimport tasksIcon from '../../../../imgs/icons/tasksIcon.png';\nconst { v4: uuidv4 } = require('uuid');\n\nconst InvoiceDocFooter = ({ invoice, tasks }) => {\n    const [showNotesForm, setShowNotesForm] = useState(false);\n    const open_notes_form = async () => {\n        if (showNotesForm === true) return setShowNotesForm(false);\n        await setShowNotesForm(true);\n        // document.querySelector('.tasks-table tbody').focus();\n    };\n    const formData = {\n        inputs: [\n            {\n                _id: uuidv4(),\n                label: 'Notes',\n                value: '',\n                addToInvoice: false,\n                custom: false,\n                inputType: 'textarea',\n            },\n        ],\n        // inputs: companyInitDetails,\n        // cb: getAllCompanies,\n    };\n\n    return (\n        <Fragment>\n            <section className='invoice__footer'>\n                <section className='invoice__notes'>\n                    <div>\n                        <h3>\n                            <b>Notes:</b>\n                        </h3>\n                        You can either print or save the invoice in pdf format.\n                        We recommend using Chrome broweser for the best\n                        experience. On clicking this button follow your browsers\n                        specification on how to handle the process.\n                    </div>\n                    <div\n                        className={`bg-${invoice.bg_color}  invoice__cover`}\n                    ></div>\n                </section>\n                <section\n                    className={`bg-${invoice.bg_color} txt-${invoice.text_color} invoice__total`}\n                >\n                    <h3 className='sr-only'>Net and gross amount.</h3>\n                    <div>Total: Â£0.00</div>\n                </section>\n            </section>\n            <section>\n                <CustomBuiltForm data={formData} />\n            </section>\n            <footer>Thank you for your business!</footer>\n        </Fragment>\n    );\n};\n\nInvoiceDocFooter.propTypes = {\n    invoice: PropTypes.object,\n    tasks: PropTypes.array,\n};\nconst mapStateToProps = (state) => ({\n    invoice: state.invoice,\n    tasks: state.companies.find((c) => c._id === state.session.currentCompany)\n        .tasks,\n});\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InvoiceDocFooter);\n"]},"metadata":{},"sourceType":"module"}