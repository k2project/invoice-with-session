{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/CompanyTasks.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { updateCompanyArr } from '../../redux/actions/companies';\nimport { endSession } from '../../redux/actions/session';\nimport TasksDisplayTable from '../../components/form/components/TasksDisplayTable';\nimport { saveChangesOnLeave } from '../../components/form/utils/handleUnsavedChanges';\nimport TaskForm from '../../components/form/forms/TaskForm';\nimport infoIcon from '../../imgs/icons/infoIcon.png';\n\nclass CompanyTasks extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //deep copy of the redux state on component load\n      tasks: JSON.parse(JSON.stringify(props.company.details)),\n      company: this.props.company._id,\n      update: false\n    };\n    this.handleChanges = this.handleChanges.bind(this);\n    this.updateCompanyTasks = this.updateCompanyTasks.bind(this);\n    this.updateTasksArr = this.updateTasksArr.bind(this);\n  }\n\n  handleChanges() {// saveChangesOnLeave(\n    //     this.state.tasks, //initial state\n    //     this.props.company.tasks, //redux updated state\n    //     this.props.endSession,\n    //     `/api/companies/tasks/${this.props.company._id}`\n    // );\n  }\n\n  updateTasksArr() {}\n\n  updateCompanyTasks(tasks) {\n    this.props.updateCompanyArr(tasks, this.props.company._id);\n  }\n\n  componentDidMount() {\n    window.addEventListener('beforeunload', this.handleChanges);\n  }\n\n  componentWillUnmount() {\n    this.handleChanges();\n    window.removeEventListener('beforeunload', this.handleChanges);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"company-tasks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, \"Company Tasks.\"), this.props.company.tasks.length === 0 && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"tile tile--info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: infoIcon,\n      alt: \"\",\n      className: \"icon--md\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 25\n      }\n    }), \"Currently there are no tasks saved. Add a new one now.\"), this.props.company.tasks.length > 0 && /*#__PURE__*/React.createElement(TasksDisplayTable, {\n      tasks: this.props.company.tasks,\n      updateState: this.updateCompanyTasks,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(TaskForm, {\n      companyID: this.props.company._id,\n      update: this.state.update,\n      updateTasksArr: this.updateTasksArr,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nCompanyTasks.propTypes = {\n  company: PropTypes.object,\n  updateCompanyArr: PropTypes.func,\n  endSession: PropTypes.func\n};\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {\n  updateCompanyArr,\n  endSession\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(CompanyTasks);","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/CompanyTasks.js"],"names":["React","Component","PropTypes","connect","updateCompanyArr","endSession","TasksDisplayTable","saveChangesOnLeave","TaskForm","infoIcon","CompanyTasks","constructor","props","state","tasks","JSON","parse","stringify","company","details","_id","update","handleChanges","bind","updateCompanyTasks","updateTasksArr","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","render","length","propTypes","object","func","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { updateCompanyArr } from '../../redux/actions/companies';\nimport { endSession } from '../../redux/actions/session';\nimport TasksDisplayTable from '../../components/form/components/TasksDisplayTable';\nimport { saveChangesOnLeave } from '../../components/form/utils/handleUnsavedChanges';\nimport TaskForm from '../../components/form/forms/TaskForm';\nimport infoIcon from '../../imgs/icons/infoIcon.png';\n\nclass CompanyTasks extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            //deep copy of the redux state on component load\n            tasks: JSON.parse(JSON.stringify(props.company.details)),\n            company: this.props.company._id,\n            update: false,\n        };\n        this.handleChanges = this.handleChanges.bind(this);\n        this.updateCompanyTasks = this.updateCompanyTasks.bind(this);\n        this.updateTasksArr = this.updateTasksArr.bind(this);\n    }\n    handleChanges() {\n        // saveChangesOnLeave(\n        //     this.state.tasks, //initial state\n        //     this.props.company.tasks, //redux updated state\n        //     this.props.endSession,\n        //     `/api/companies/tasks/${this.props.company._id}`\n        // );\n    }\n    updateTasksArr() {}\n    updateCompanyTasks(tasks) {\n        this.props.updateCompanyArr(tasks, this.props.company._id);\n    }\n\n    componentDidMount() {\n        window.addEventListener('beforeunload', this.handleChanges);\n    }\n    componentWillUnmount() {\n        this.handleChanges();\n        window.removeEventListener('beforeunload', this.handleChanges);\n    }\n    render() {\n        return (\n            <section className='company-tasks'>\n                <h2 className='sr-only'>Company Tasks.</h2>\n                {this.props.company.tasks.length === 0 && (\n                    <span className='tile tile--info'>\n                        <img src={infoIcon} alt='' className='icon--md' />\n                        Currently there are no tasks saved. Add a new one now.\n                    </span>\n                )}\n                {this.props.company.tasks.length > 0 && (\n                    <TasksDisplayTable\n                        tasks={this.props.company.tasks}\n                        updateState={this.updateCompanyTasks}\n                    />\n                )}\n                <TaskForm\n                    companyID={this.props.company._id}\n                    update={this.state.update}\n                    updateTasksArr={this.updateTasksArr}\n                />\n            </section>\n        );\n    }\n}\n\nCompanyTasks.propTypes = {\n    company: PropTypes.object,\n    updateCompanyArr: PropTypes.func,\n    endSession: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({});\n\nconst mapDispatchToProps = {\n    updateCompanyArr,\n    endSession,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CompanyTasks);\n"]},"metadata":{},"sourceType":"module"}