{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception\");\n\nconst attrGenerated = require(\"./generated/Attr\");\n\nconst {\n  asciiLowercase\n} = require(\"./helpers/strings\");\n\nconst {\n  HTML_NS\n} = require(\"./helpers/namespaces\"); // The following three are for https://dom.spec.whatwg.org/#concept-element-attribute-has. We don't just have a\n// predicate tester since removing that kind of flexibility gives us the potential for better future optimizations.\n\n\nexports.hasAttribute = function (element, A) {\n  return element._attributeList.includes(A);\n};\n\nexports.hasAttributeByName = function (element, name) {\n  return element._attributesByNameMap.has(name);\n};\n\nexports.hasAttributeByNameNS = function (element, namespace, localName) {\n  return element._attributeList.some(attribute => {\n    return attribute._localName === localName && attribute._namespace === namespace;\n  });\n};\n\nexports.changeAttribute = function (element, attribute, value) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-change\n  const oldValue = attribute._value;\n  attribute._value = value; // Run jsdom hooks; roughly correspond to spec's \"An attribute is set and an attribute is changed.\"\n\n  element._attrModified(attribute._qualifiedName, value, oldValue);\n};\n\nexports.appendAttribute = function (element, attribute) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-append\n  const attributeList = element._attributeList; // TODO mutation observer stuff\n\n  attributeList.push(attribute);\n  attribute._element = element; // Sync name cache\n\n  const name = attribute._qualifiedName;\n  const cache = element._attributesByNameMap;\n  let entry = cache.get(name);\n\n  if (!entry) {\n    entry = [];\n    cache.set(name, entry);\n  }\n\n  entry.push(attribute); // Run jsdom hooks; roughly correspond to spec's \"An attribute is set and an attribute is added.\"\n\n  element._attrModified(name, attribute._value, null);\n};\n\nexports.removeAttribute = function (element, attribute) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-remove\n  const attributeList = element._attributeList; // TODO mutation observer stuff\n\n  for (let i = 0; i < attributeList.length; ++i) {\n    if (attributeList[i] === attribute) {\n      attributeList.splice(i, 1);\n      attribute._element = null; // Sync name cache\n\n      const name = attribute._qualifiedName;\n      const cache = element._attributesByNameMap;\n      const entry = cache.get(name);\n      entry.splice(entry.indexOf(attribute), 1);\n\n      if (entry.length === 0) {\n        cache.delete(name);\n      } // Run jsdom hooks; roughly correspond to spec's \"An attribute is removed.\"\n\n\n      element._attrModified(name, null, attribute._value);\n\n      return;\n    }\n  }\n};\n\nexports.replaceAttribute = function (element, oldAttr, newAttr) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-replace\n  const attributeList = element._attributeList; // TODO mutation observer stuff\n\n  for (let i = 0; i < attributeList.length; ++i) {\n    if (attributeList[i] === oldAttr) {\n      attributeList.splice(i, 1, newAttr);\n      oldAttr._element = null;\n      newAttr._element = element; // Sync name cache\n\n      const name = newAttr._qualifiedName;\n      const cache = element._attributesByNameMap;\n      let entry = cache.get(name);\n\n      if (!entry) {\n        entry = [];\n        cache.set(name, entry);\n      }\n\n      entry.splice(entry.indexOf(oldAttr), 1, newAttr); // Run jsdom hooks; roughly correspond to spec's \"An attribute is set and an attribute is changed.\"\n\n      element._attrModified(name, newAttr._value, oldAttr._value);\n\n      return;\n    }\n  }\n};\n\nexports.getAttributeByName = function (element, name) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-get-by-name\n  if (element._namespaceURI === HTML_NS && element._ownerDocument._parsingMode === \"html\") {\n    name = asciiLowercase(name);\n  }\n\n  const cache = element._attributesByNameMap;\n  const entry = cache.get(name);\n\n  if (!entry) {\n    return null;\n  }\n\n  return entry[0];\n};\n\nexports.getAttributeByNameNS = function (element, namespace, localName) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-get-by-namespace\n  if (namespace === \"\") {\n    namespace = null;\n  }\n\n  const attributeList = element._attributeList;\n\n  for (let i = 0; i < attributeList.length; ++i) {\n    const attr = attributeList[i];\n\n    if (attr._namespace === namespace && attr._localName === localName) {\n      return attr;\n    }\n  }\n\n  return null;\n}; // Both of the following functions implement https://dom.spec.whatwg.org/#concept-element-attributes-get-value.\n// Separated them into two to keep symmetry with other functions.\n\n\nexports.getAttributeValue = function (element, localName) {\n  const attr = exports.getAttributeByNameNS(element, null, localName);\n\n  if (!attr) {\n    return \"\";\n  }\n\n  return attr._value;\n};\n\nexports.getAttributeValueNS = function (element, namespace, localName) {\n  const attr = exports.getAttributeByNameNS(element, namespace, localName);\n\n  if (!attr) {\n    return \"\";\n  }\n\n  return attr._value;\n};\n\nexports.setAttribute = function (element, attr) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-set\n  if (attr._element !== null && attr._element !== element) {\n    throw new DOMException(\"The attribute is in use.\", \"InUseAttributeError\");\n  }\n\n  const oldAttr = exports.getAttributeByNameNS(element, attr._namespace, attr._localName);\n\n  if (oldAttr === attr) {\n    return attr;\n  }\n\n  if (oldAttr !== null) {\n    exports.replaceAttribute(element, oldAttr, attr);\n  } else {\n    exports.appendAttribute(element, attr);\n  }\n\n  return oldAttr;\n};\n\nexports.setAttributeValue = function (element, localName, value, prefix, namespace) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-set-value\n  if (prefix === undefined) {\n    prefix = null;\n  }\n\n  if (namespace === undefined) {\n    namespace = null;\n  }\n\n  const attribute = exports.getAttributeByNameNS(element, namespace, localName);\n\n  if (attribute === null) {\n    const newAttribute = attrGenerated.createImpl([], {\n      namespace,\n      namespacePrefix: prefix,\n      localName,\n      value\n    });\n    exports.appendAttribute(element, newAttribute);\n    return;\n  }\n\n  exports.changeAttribute(element, attribute, value);\n};\n\nexports.setAnExistingAttributeValue = (attribute, value) => {\n  if (attribute._element === null) {\n    attribute._value = value;\n  }\n\n  exports.changeAttribute(attribute._element, attribute, value);\n};\n\nexports.removeAttributeByName = function (element, name) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-remove-by-name\n  const attr = exports.getAttributeByName(element, name);\n\n  if (attr !== null) {\n    exports.removeAttribute(element, attr);\n  }\n\n  return attr;\n};\n\nexports.removeAttributeByNameNS = function (element, namespace, localName) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-remove-by-namespace\n  const attr = exports.getAttributeByNameNS(element, namespace, localName);\n\n  if (attr !== null) {\n    exports.removeAttribute(element, attr);\n  }\n\n  return attr;\n};\n\nexports.copyAttributeList = function (sourceElement, destElement) {\n  // Needed by https://dom.spec.whatwg.org/#concept-node-clone\n  for (const sourceAttr of sourceElement._attributeList) {\n    const destAttr = attrGenerated.createImpl([], {\n      namespace: sourceAttr._namespace,\n      namespacePrefix: sourceAttr._namespacePrefix,\n      localName: sourceAttr._localName,\n      value: sourceAttr._value\n    });\n    exports.appendAttribute(destElement, destAttr);\n  }\n};\n\nexports.attributeListsEqual = function (elementA, elementB) {\n  // Needed by https://dom.spec.whatwg.org/#concept-node-equals\n  const listA = elementA._attributeList;\n  const listB = elementB._attributeList;\n\n  if (listA.length !== listB.length) {\n    return false;\n  }\n\n  for (let i = 0; i < listA.length; ++i) {\n    const attrA = listA[i];\n\n    if (!listB.some(attrB => equalsA(attrB))) {\n      return false;\n    }\n\n    function equalsA(attrB) {\n      return attrA._namespace === attrB._namespace && attrA._localName === attrB._localName && attrA._value === attrB._value;\n    }\n  }\n\n  return true;\n};\n\nexports.attributeNames = function (element) {\n  // Needed by https://dom.spec.whatwg.org/#dom-element-getattributenames\n  return element._attributeList.map(a => a._qualifiedName);\n};\n\nexports.hasAttributes = function (element) {\n  // Needed by https://dom.spec.whatwg.org/#dom-element-hasattributes\n  return element._attributeList.length > 0;\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/attributes.js"],"names":["DOMException","require","attrGenerated","asciiLowercase","HTML_NS","exports","hasAttribute","element","A","_attributeList","includes","hasAttributeByName","name","_attributesByNameMap","has","hasAttributeByNameNS","namespace","localName","some","attribute","_localName","_namespace","changeAttribute","value","oldValue","_value","_attrModified","_qualifiedName","appendAttribute","attributeList","push","_element","cache","entry","get","set","removeAttribute","i","length","splice","indexOf","delete","replaceAttribute","oldAttr","newAttr","getAttributeByName","_namespaceURI","_ownerDocument","_parsingMode","getAttributeByNameNS","attr","getAttributeValue","getAttributeValueNS","setAttribute","setAttributeValue","prefix","undefined","newAttribute","createImpl","namespacePrefix","setAnExistingAttributeValue","removeAttributeByName","removeAttributeByNameNS","copyAttributeList","sourceElement","destElement","sourceAttr","destAttr","_namespacePrefix","attributeListsEqual","elementA","elementB","listA","listB","attrA","attrB","equalsA","attributeNames","map","a","hasAttributes"],"mappings":"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","sourcesContent":["\"use strict\";\nconst DOMException = require(\"domexception\");\nconst attrGenerated = require(\"./generated/Attr\");\nconst { asciiLowercase } = require(\"./helpers/strings\");\nconst { HTML_NS } = require(\"./helpers/namespaces\");\n\n// The following three are for https://dom.spec.whatwg.org/#concept-element-attribute-has. We don't just have a\n// predicate tester since removing that kind of flexibility gives us the potential for better future optimizations.\n\nexports.hasAttribute = function (element, A) {\n  return element._attributeList.includes(A);\n};\n\nexports.hasAttributeByName = function (element, name) {\n  return element._attributesByNameMap.has(name);\n};\n\nexports.hasAttributeByNameNS = function (element, namespace, localName) {\n  return element._attributeList.some(attribute => {\n    return attribute._localName === localName && attribute._namespace === namespace;\n  });\n};\n\nexports.changeAttribute = function (element, attribute, value) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-change\n\n  const oldValue = attribute._value;\n  attribute._value = value;\n\n  // Run jsdom hooks; roughly correspond to spec's \"An attribute is set and an attribute is changed.\"\n  element._attrModified(attribute._qualifiedName, value, oldValue);\n};\n\nexports.appendAttribute = function (element, attribute) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-append\n\n  const attributeList = element._attributeList;\n\n  // TODO mutation observer stuff\n\n  attributeList.push(attribute);\n  attribute._element = element;\n\n  // Sync name cache\n  const name = attribute._qualifiedName;\n  const cache = element._attributesByNameMap;\n  let entry = cache.get(name);\n  if (!entry) {\n    entry = [];\n    cache.set(name, entry);\n  }\n  entry.push(attribute);\n\n  // Run jsdom hooks; roughly correspond to spec's \"An attribute is set and an attribute is added.\"\n  element._attrModified(name, attribute._value, null);\n};\n\nexports.removeAttribute = function (element, attribute) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-remove\n\n  const attributeList = element._attributeList;\n\n  // TODO mutation observer stuff\n\n  for (let i = 0; i < attributeList.length; ++i) {\n    if (attributeList[i] === attribute) {\n      attributeList.splice(i, 1);\n      attribute._element = null;\n\n      // Sync name cache\n      const name = attribute._qualifiedName;\n      const cache = element._attributesByNameMap;\n      const entry = cache.get(name);\n      entry.splice(entry.indexOf(attribute), 1);\n      if (entry.length === 0) {\n        cache.delete(name);\n      }\n\n      // Run jsdom hooks; roughly correspond to spec's \"An attribute is removed.\"\n      element._attrModified(name, null, attribute._value);\n\n      return;\n    }\n  }\n};\n\nexports.replaceAttribute = function (element, oldAttr, newAttr) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-replace\n\n  const attributeList = element._attributeList;\n\n  // TODO mutation observer stuff\n\n  for (let i = 0; i < attributeList.length; ++i) {\n    if (attributeList[i] === oldAttr) {\n      attributeList.splice(i, 1, newAttr);\n      oldAttr._element = null;\n      newAttr._element = element;\n\n      // Sync name cache\n      const name = newAttr._qualifiedName;\n      const cache = element._attributesByNameMap;\n      let entry = cache.get(name);\n      if (!entry) {\n        entry = [];\n        cache.set(name, entry);\n      }\n      entry.splice(entry.indexOf(oldAttr), 1, newAttr);\n\n      // Run jsdom hooks; roughly correspond to spec's \"An attribute is set and an attribute is changed.\"\n      element._attrModified(name, newAttr._value, oldAttr._value);\n\n      return;\n    }\n  }\n};\n\nexports.getAttributeByName = function (element, name) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-get-by-name\n\n  if (element._namespaceURI === HTML_NS &&\n      element._ownerDocument._parsingMode === \"html\") {\n    name = asciiLowercase(name);\n  }\n\n  const cache = element._attributesByNameMap;\n  const entry = cache.get(name);\n  if (!entry) {\n    return null;\n  }\n\n  return entry[0];\n};\n\nexports.getAttributeByNameNS = function (element, namespace, localName) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-get-by-namespace\n\n  if (namespace === \"\") {\n    namespace = null;\n  }\n\n  const attributeList = element._attributeList;\n  for (let i = 0; i < attributeList.length; ++i) {\n    const attr = attributeList[i];\n    if (attr._namespace === namespace && attr._localName === localName) {\n      return attr;\n    }\n  }\n\n  return null;\n};\n\n// Both of the following functions implement https://dom.spec.whatwg.org/#concept-element-attributes-get-value.\n// Separated them into two to keep symmetry with other functions.\nexports.getAttributeValue = function (element, localName) {\n  const attr = exports.getAttributeByNameNS(element, null, localName);\n\n  if (!attr) {\n    return \"\";\n  }\n\n  return attr._value;\n};\n\nexports.getAttributeValueNS = function (element, namespace, localName) {\n  const attr = exports.getAttributeByNameNS(element, namespace, localName);\n\n  if (!attr) {\n    return \"\";\n  }\n\n  return attr._value;\n};\n\nexports.setAttribute = function (element, attr) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-set\n\n  if (attr._element !== null && attr._element !== element) {\n    throw new DOMException(\"The attribute is in use.\", \"InUseAttributeError\");\n  }\n\n  const oldAttr = exports.getAttributeByNameNS(element, attr._namespace, attr._localName);\n  if (oldAttr === attr) {\n    return attr;\n  }\n\n  if (oldAttr !== null) {\n    exports.replaceAttribute(element, oldAttr, attr);\n  } else {\n    exports.appendAttribute(element, attr);\n  }\n\n  return oldAttr;\n};\n\nexports.setAttributeValue = function (element, localName, value, prefix, namespace) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-set-value\n\n  if (prefix === undefined) {\n    prefix = null;\n  }\n  if (namespace === undefined) {\n    namespace = null;\n  }\n\n  const attribute = exports.getAttributeByNameNS(element, namespace, localName);\n  if (attribute === null) {\n    const newAttribute = attrGenerated.createImpl([], { namespace, namespacePrefix: prefix, localName, value });\n    exports.appendAttribute(element, newAttribute);\n    return;\n  }\n\n  exports.changeAttribute(element, attribute, value);\n};\n\nexports.setAnExistingAttributeValue = (attribute, value) => {\n  if (attribute._element === null) {\n    attribute._value = value;\n  }\n\n  exports.changeAttribute(attribute._element, attribute, value);\n};\n\nexports.removeAttributeByName = function (element, name) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-remove-by-name\n\n  const attr = exports.getAttributeByName(element, name);\n\n  if (attr !== null) {\n    exports.removeAttribute(element, attr);\n  }\n\n  return attr;\n};\n\nexports.removeAttributeByNameNS = function (element, namespace, localName) {\n  // https://dom.spec.whatwg.org/#concept-element-attributes-remove-by-namespace\n\n  const attr = exports.getAttributeByNameNS(element, namespace, localName);\n\n  if (attr !== null) {\n    exports.removeAttribute(element, attr);\n  }\n\n  return attr;\n};\n\nexports.copyAttributeList = function (sourceElement, destElement) {\n  // Needed by https://dom.spec.whatwg.org/#concept-node-clone\n\n  for (const sourceAttr of sourceElement._attributeList) {\n    const destAttr = attrGenerated.createImpl([], {\n      namespace: sourceAttr._namespace,\n      namespacePrefix: sourceAttr._namespacePrefix,\n      localName: sourceAttr._localName,\n      value: sourceAttr._value\n    });\n\n    exports.appendAttribute(destElement, destAttr);\n  }\n};\n\nexports.attributeListsEqual = function (elementA, elementB) {\n  // Needed by https://dom.spec.whatwg.org/#concept-node-equals\n\n  const listA = elementA._attributeList;\n  const listB = elementB._attributeList;\n\n  if (listA.length !== listB.length) {\n    return false;\n  }\n\n  for (let i = 0; i < listA.length; ++i) {\n    const attrA = listA[i];\n\n    if (!listB.some(attrB => equalsA(attrB))) {\n      return false;\n    }\n\n    function equalsA(attrB) {\n      return attrA._namespace === attrB._namespace && attrA._localName === attrB._localName &&\n             attrA._value === attrB._value;\n    }\n  }\n\n  return true;\n};\n\nexports.attributeNames = function (element) {\n  // Needed by https://dom.spec.whatwg.org/#dom-element-getattributenames\n\n  return element._attributeList.map(a => a._qualifiedName);\n};\n\nexports.hasAttributes = function (element) {\n  // Needed by https://dom.spec.whatwg.org/#dom-element-hasattributes\n\n  return element._attributeList.length > 0;\n};\n"]},"metadata":{},"sourceType":"script"}