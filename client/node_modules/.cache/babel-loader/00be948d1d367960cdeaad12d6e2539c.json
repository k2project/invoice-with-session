{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport { updateCompanyArr } from '../../../redux/actions/companies';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { alertUnsavedChanges } from '../../../components/form/utils/handleUnsavedChanges';\nimport { getInputValueByLabel } from '../../../components/form/utils/customFormQueries';\nimport { date_YYYY_MM, date_DD_MM_YYYY } from '../../../components/calendar/dates';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass NewInvoice extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      invoice: null\n    };\n    this.handleChanges = this.handleChanges.bind(this);\n    this.clearInitState = this.clearInitState.bind(this);\n    this.updateInitStateToReduxStateOnSubmit = this.updateInitStateToReduxStateOnSubmit.bind(this);\n  }\n\n  updateInitStateToReduxStateOnSubmit() {// this.props.setUpdates(this.props.company.details);\n  }\n\n  clearInitState() {//on submit clear app updates\n    // this.props.setUpdates(null);\n  }\n\n  componentDidMount() {\n    //set current tabs for handling unsaved changes redirection\n    this.setState({ ...this.state,\n      tabs: window.location.search\n    });\n    let invoiceInitState;\n    const searchArr = window.location.search.split('&');\n\n    if (searchArr[1]) {\n      //updating an existing invoice\n      //?updating=...\n      //downlaoding an existing invoice\n      //?download=...\n      const invoice_ID = searchArr[1].slice(9);\n      const invoiceToLoad = this.props.company.invoices.find(invoice => invoice._id === invoice_ID);\n\n      if (invoiceToLoad) {\n        //invoiceInitState from the invoices arr\n        invoiceInitState = invoiceToLoad; //add invoice tasks to existing tasks of the current company\n\n        const tasksArrIncInvoiceTasks = [...invoiceToLoad.tasks, ...this.props.company.tasks];\n        this.props.updateCompanyArr('tasks', tasksArrIncInvoiceTasks, this.props.company._id);\n      }\n    } else {\n      //set all tasks ro be excluded from invoice on load of a new invoice\n      const noTasksIncluded = this.props.company.tasks.map(t => t.addToInvoice = false);\n      updateCompanyArr('tasks', noTasksIncluded, this.props.company._id); //invoice num #\n\n      let company_abbr = getInputValueByLabel(this.props.company.details, 'Name').split(' ');\n\n      if (company_abbr.length > 1 && company_abbr[1]) {\n        company_abbr = company_abbr.map(el => el[0].toUpperCase()).join('');\n      } else {\n        company_abbr = company_abbr[0].slice(0, 3).toUpperCase();\n      }\n\n      let invoices_num = '1';\n      if (this.props.company.invoices) invoices_num = String(this.props.company.invoices.length + 1);\n\n      while (invoices_num.length < 5) {\n        invoices_num = '0' + invoices_num;\n      }\n\n      let saved_as = company_abbr + '-';\n      saved_as += date_YYYY_MM(new Date()) + '-';\n      saved_as += invoices_num; //generate due date in 14 days\n\n      const TWO_WEEKS = 1.21e9;\n      let due_date = date_DD_MM_YYYY(new Date().getTime() + TWO_WEEKS); //a new invoice\n\n      invoiceInitState = {\n        _id: uuidv4(),\n        created_at: new Date(),\n        saved_as,\n        issue_date: date_DD_MM_YYYY(new Date()),\n        due_date,\n        bg_color: localStorage.invoice_bg || 'blue',\n        text_color: localStorage.invoice_txt || 'white',\n        profile: JSON.parse(JSON.stringify(this.props.profile.details)),\n        company: JSON.parse(JSON.stringify(this.props.company.details)),\n        tasks: [],\n        discount: 0,\n        tax: 0,\n        fees: 0,\n        notes: 'Thank you for your business.',\n        currency: ''\n      };\n    } //set init state for comparison on component unmounting\n\n\n    this.setState({\n      invoice: JSON.parse(JSON.stringify(invoiceInitState))\n    }); //set redux state\n\n    this.props.setInvoiceInitState(invoiceInitState);\n  }\n\n  componentWillUnmount() {\n    //auth err and logout won't trigger fun\n    if (this.props.session.authenticated) this.handleChanges();\n  }\n\n  handleChanges() {\n    //TASKS CAN BE AMENDED/UPDATED IN FORM  WITH EFECT ON DB HENCE NEED TO CHECK INIT STATE AGAINST COMPANY.TASKS NOT INVOICE.TASKS!!!\n    console.log(JSON.stringify(this.state.invoice) === JSON.stringify(this.props.invoice));\n    this.props.invoice.tasks = this.props.company.tasks.filter(t => t.addToInvoice);\n    console.log(this.state.invoice, this.props.invoice);\n    alertUnsavedChanges(this.state.invoice, this.props.invoice, `/dashboard/companies/${this.props.company._id}${this.state.tabs}`, null, this.props.history); // if (\n    //     JSON.stringify(this.state.invoice) !==\n    //     JSON.stringify(this.props.invoice)\n    // ) {\n    //     const msg = `You have some unsaved changes. What would you like to do?`;\n    //     const cancelBtnText = 'Discharge changes';\n    //     const confirmBtnText = 'Return to the form!';\n    //     const confirmCb = () => {};\n    //     const cancelCb = async () => {};\n    //     dialogBox({\n    //         msg,\n    //         cancelBtnText,\n    //         confirmBtnText,\n    //         confirmCb,\n    //         cancelCb,\n    //     });\n    // } else {\n    //     //remove any tasks added on update\n    //     const tasksWithoutInvocieTasks = this.props.company.tasks.filter(\n    //         (el) => !this.state.invoice.tasks.includes(el)\n    //     );\n    //     console.log(tasksWithoutInvocieTasks);\n    //     this.props.updateCompanyArr(\n    //         'tasks',\n    //         tasksWithoutInvocieTasks,\n    //         this.props.company._id\n    //     );\n    // }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"company-invoice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    }, \"Create a new invoice.\"), this.state.invoice && /*#__PURE__*/React.createElement(InvoiceDoc, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 40\n      }\n    }), this.state.invoice && /*#__PURE__*/React.createElement(NewInvoiceSubmit, {\n      invoiceInitState: this.state.invoice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nNewInvoice.propTypes = {\n  session: PropTypes.object,\n  profile: PropTypes.object,\n  company: PropTypes.object,\n  invoice: PropTypes.object,\n  updateCompanyArr: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  session: state.session,\n  profile: state.profile,\n  company: state.companies.find(c => c._id === state.session.currentCompany),\n  invoice: state.invoice\n});\n\nconst mapDispatchToProps = {\n  setInvoiceInitState,\n  updateCompanyArr\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(NewInvoice));","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoice.js"],"names":["React","Component","PropTypes","withRouter","connect","setInvoiceInitState","updateCompanyArr","InvoiceDoc","NewInvoiceSubmit","alertUnsavedChanges","getInputValueByLabel","date_YYYY_MM","date_DD_MM_YYYY","v4","uuidv4","NewInvoice","constructor","props","state","invoice","handleChanges","bind","clearInitState","updateInitStateToReduxStateOnSubmit","componentDidMount","setState","tabs","window","location","search","invoiceInitState","searchArr","split","invoice_ID","slice","invoiceToLoad","company","invoices","find","_id","tasksArrIncInvoiceTasks","tasks","noTasksIncluded","map","t","addToInvoice","company_abbr","details","length","el","toUpperCase","join","invoices_num","String","saved_as","Date","TWO_WEEKS","due_date","getTime","created_at","issue_date","bg_color","localStorage","invoice_bg","text_color","invoice_txt","profile","JSON","parse","stringify","discount","tax","fees","notes","currency","componentWillUnmount","session","authenticated","console","log","filter","history","render","propTypes","object","func","mapStateToProps","companies","c","currentCompany","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,SAASC,gBAAT,QAAiC,kCAAjC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,mBAAT,QAAoC,qDAApC;AACA,SAASC,oBAAT,QAAqC,kDAArC;AACA,SACIC,YADJ,EAEIC,eAFJ,QAGO,oCAHP;AAIA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;AAEA,MAAMC,UAAN,SAAyBd,SAAzB,CAAmC;AAC/Be,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb;AAGA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKE,mCAAL,GAA2C,KAAKA,mCAAL,CAAyCF,IAAzC,CACvC,IADuC,CAA3C;AAGH;;AAEDE,EAAAA,mCAAmC,GAAG,CAClC;AACH;;AACDD,EAAAA,cAAc,GAAG,CACb;AACA;AACH;;AACDE,EAAAA,iBAAiB,GAAG;AAChB;AACA,SAAKC,QAAL,CAAc,EAAE,GAAG,KAAKP,KAAV;AAAiBQ,MAAAA,IAAI,EAAEC,MAAM,CAACC,QAAP,CAAgBC;AAAvC,KAAd;AACA,QAAIC,gBAAJ;AACA,UAAMC,SAAS,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBG,KAAvB,CAA6B,GAA7B,CAAlB;;AACA,QAAID,SAAS,CAAC,CAAD,CAAb,EAAkB;AACd;AACA;AACA;AACA;AACA,YAAME,UAAU,GAAGF,SAAS,CAAC,CAAD,CAAT,CAAaG,KAAb,CAAmB,CAAnB,CAAnB;AACA,YAAMC,aAAa,GAAG,KAAKlB,KAAL,CAAWmB,OAAX,CAAmBC,QAAnB,CAA4BC,IAA5B,CACjBnB,OAAD,IAAaA,OAAO,CAACoB,GAAR,KAAgBN,UADX,CAAtB;;AAGA,UAAIE,aAAJ,EAAmB;AACf;AACAL,QAAAA,gBAAgB,GAAGK,aAAnB,CAFe,CAGf;;AACA,cAAMK,uBAAuB,GAAG,CAC5B,GAAGL,aAAa,CAACM,KADW,EAE5B,GAAG,KAAKxB,KAAL,CAAWmB,OAAX,CAAmBK,KAFM,CAAhC;AAIA,aAAKxB,KAAL,CAAWX,gBAAX,CACI,OADJ,EAEIkC,uBAFJ,EAGI,KAAKvB,KAAL,CAAWmB,OAAX,CAAmBG,GAHvB;AAKH;AACJ,KAvBD,MAuBO;AACH;AACA,YAAMG,eAAe,GAAG,KAAKzB,KAAL,CAAWmB,OAAX,CAAmBK,KAAnB,CAAyBE,GAAzB,CACnBC,CAAD,IAAQA,CAAC,CAACC,YAAF,GAAiB,KADL,CAAxB;AAGAvC,MAAAA,gBAAgB,CAAC,OAAD,EAAUoC,eAAV,EAA2B,KAAKzB,KAAL,CAAWmB,OAAX,CAAmBG,GAA9C,CAAhB,CALG,CAMH;;AACA,UAAIO,YAAY,GAAGpC,oBAAoB,CACnC,KAAKO,KAAL,CAAWmB,OAAX,CAAmBW,OADgB,EAEnC,MAFmC,CAApB,CAGjBf,KAHiB,CAGX,GAHW,CAAnB;;AAIA,UAAIc,YAAY,CAACE,MAAb,GAAsB,CAAtB,IAA2BF,YAAY,CAAC,CAAD,CAA3C,EAAgD;AAC5CA,QAAAA,YAAY,GAAGA,YAAY,CACtBH,GADU,CACLM,EAAD,IAAQA,EAAE,CAAC,CAAD,CAAF,CAAMC,WAAN,EADF,EAEVC,IAFU,CAEL,EAFK,CAAf;AAGH,OAJD,MAIO;AACHL,QAAAA,YAAY,GAAGA,YAAY,CAAC,CAAD,CAAZ,CAAgBZ,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,EAA4BgB,WAA5B,EAAf;AACH;;AACD,UAAIE,YAAY,GAAG,GAAnB;AACA,UAAI,KAAKnC,KAAL,CAAWmB,OAAX,CAAmBC,QAAvB,EACIe,YAAY,GAAGC,MAAM,CAAC,KAAKpC,KAAL,CAAWmB,OAAX,CAAmBC,QAAnB,CAA4BW,MAA5B,GAAqC,CAAtC,CAArB;;AACJ,aAAOI,YAAY,CAACJ,MAAb,GAAsB,CAA7B,EAAgC;AAC5BI,QAAAA,YAAY,GAAG,MAAMA,YAArB;AACH;;AACD,UAAIE,QAAQ,GAAGR,YAAY,GAAG,GAA9B;AACAQ,MAAAA,QAAQ,IAAI3C,YAAY,CAAC,IAAI4C,IAAJ,EAAD,CAAZ,GAA2B,GAAvC;AACAD,MAAAA,QAAQ,IAAIF,YAAZ,CA1BG,CA2BH;;AACA,YAAMI,SAAS,GAAG,MAAlB;AACA,UAAIC,QAAQ,GAAG7C,eAAe,CAAC,IAAI2C,IAAJ,GAAWG,OAAX,KAAuBF,SAAxB,CAA9B,CA7BG,CA8BH;;AACA1B,MAAAA,gBAAgB,GAAG;AACfS,QAAAA,GAAG,EAAEzB,MAAM,EADI;AAEf6C,QAAAA,UAAU,EAAE,IAAIJ,IAAJ,EAFG;AAGfD,QAAAA,QAHe;AAIfM,QAAAA,UAAU,EAAEhD,eAAe,CAAC,IAAI2C,IAAJ,EAAD,CAJZ;AAKfE,QAAAA,QALe;AAMfI,QAAAA,QAAQ,EAAEC,YAAY,CAACC,UAAb,IAA2B,MANtB;AAOfC,QAAAA,UAAU,EAAEF,YAAY,CAACG,WAAb,IAA4B,OAPzB;AAQfC,QAAAA,OAAO,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKpD,KAAL,CAAWiD,OAAX,CAAmBnB,OAAlC,CAAX,CARM;AASfX,QAAAA,OAAO,EAAE+B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKpD,KAAL,CAAWmB,OAAX,CAAmBW,OAAlC,CAAX,CATM;AAUfN,QAAAA,KAAK,EAAE,EAVQ;AAWf6B,QAAAA,QAAQ,EAAE,CAXK;AAYfC,QAAAA,GAAG,EAAE,CAZU;AAafC,QAAAA,IAAI,EAAE,CAbS;AAcfC,QAAAA,KAAK,EAAE,8BAdQ;AAefC,QAAAA,QAAQ,EAAE;AAfK,OAAnB;AAiBH,KA5Ee,CA8EhB;;;AACA,SAAKjD,QAAL,CAAc;AACVN,MAAAA,OAAO,EAAEgD,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAevC,gBAAf,CAAX;AADC,KAAd,EA/EgB,CAmFhB;;AACA,SAAKb,KAAL,CAAWZ,mBAAX,CAA+ByB,gBAA/B;AACH;;AACD6C,EAAAA,oBAAoB,GAAG;AACnB;AACA,QAAI,KAAK1D,KAAL,CAAW2D,OAAX,CAAmBC,aAAvB,EAAsC,KAAKzD,aAAL;AACzC;;AACDA,EAAAA,aAAa,GAAG;AACZ;AACA0D,IAAAA,OAAO,CAACC,GAAR,CACIZ,IAAI,CAACE,SAAL,CAAe,KAAKnD,KAAL,CAAWC,OAA1B,MACIgD,IAAI,CAACE,SAAL,CAAe,KAAKpD,KAAL,CAAWE,OAA1B,CAFR;AAIA,SAAKF,KAAL,CAAWE,OAAX,CAAmBsB,KAAnB,GAA2B,KAAKxB,KAAL,CAAWmB,OAAX,CAAmBK,KAAnB,CAAyBuC,MAAzB,CACtBpC,CAAD,IAAOA,CAAC,CAACC,YADc,CAA3B;AAGAiC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK7D,KAAL,CAAWC,OAAvB,EAAgC,KAAKF,KAAL,CAAWE,OAA3C;AAEAV,IAAAA,mBAAmB,CACf,KAAKS,KAAL,CAAWC,OADI,EAEf,KAAKF,KAAL,CAAWE,OAFI,EAGd,wBAAuB,KAAKF,KAAL,CAAWmB,OAAX,CAAmBG,GAAI,GAAE,KAAKrB,KAAL,CAAWQ,IAAK,EAHlD,EAIf,IAJe,EAKf,KAAKT,KAAL,CAAWgE,OALI,CAAnB,CAXY,CAkBZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAS,MAAA,SAAS,EAAC,iBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADJ,EAEK,KAAKhE,KAAL,CAAWC,OAAX,iBAAsB,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAF3B,EAGK,KAAKD,KAAL,CAAWC,OAAX,iBACG,oBAAC,gBAAD;AAAkB,MAAA,gBAAgB,EAAE,KAAKD,KAAL,CAAWC,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR,CADJ;AASH;;AAvK8B;;AA0KnCJ,UAAU,CAACoE,SAAX,GAAuB;AACnBP,EAAAA,OAAO,EAAE1E,SAAS,CAACkF,MADA;AAEnBlB,EAAAA,OAAO,EAAEhE,SAAS,CAACkF,MAFA;AAGnBhD,EAAAA,OAAO,EAAElC,SAAS,CAACkF,MAHA;AAInBjE,EAAAA,OAAO,EAAEjB,SAAS,CAACkF,MAJA;AAKnB9E,EAAAA,gBAAgB,EAAEJ,SAAS,CAACmF;AALT,CAAvB;;AAQA,MAAMC,eAAe,GAAIpE,KAAD,KAAY;AAChC0D,EAAAA,OAAO,EAAE1D,KAAK,CAAC0D,OADiB;AAEhCV,EAAAA,OAAO,EAAEhD,KAAK,CAACgD,OAFiB;AAGhC9B,EAAAA,OAAO,EAAElB,KAAK,CAACqE,SAAN,CAAgBjD,IAAhB,CACJkD,CAAD,IAAOA,CAAC,CAACjD,GAAF,KAAUrB,KAAK,CAAC0D,OAAN,CAAca,cAD1B,CAHuB;AAMhCtE,EAAAA,OAAO,EAAED,KAAK,CAACC;AANiB,CAAZ,CAAxB;;AASA,MAAMuE,kBAAkB,GAAG;AACvBrF,EAAAA,mBADuB;AAEvBC,EAAAA;AAFuB,CAA3B;AAKA,eAAeF,OAAO,CAClBkF,eADkB,EAElBI,kBAFkB,CAAP,CAGbvF,UAAU,CAACY,UAAD,CAHG,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport { updateCompanyArr } from '../../../redux/actions/companies';\nimport InvoiceDoc from './invoiceDoc/InvoiceDoc';\nimport NewInvoiceSubmit from './NewInvoiceSubmit';\nimport { alertUnsavedChanges } from '../../../components/form/utils/handleUnsavedChanges';\nimport { getInputValueByLabel } from '../../../components/form/utils/customFormQueries';\nimport {\n    date_YYYY_MM,\n    date_DD_MM_YYYY,\n} from '../../../components/calendar/dates';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass NewInvoice extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            invoice: null,\n        };\n        this.handleChanges = this.handleChanges.bind(this);\n        this.clearInitState = this.clearInitState.bind(this);\n        this.updateInitStateToReduxStateOnSubmit = this.updateInitStateToReduxStateOnSubmit.bind(\n            this\n        );\n    }\n\n    updateInitStateToReduxStateOnSubmit() {\n        // this.props.setUpdates(this.props.company.details);\n    }\n    clearInitState() {\n        //on submit clear app updates\n        // this.props.setUpdates(null);\n    }\n    componentDidMount() {\n        //set current tabs for handling unsaved changes redirection\n        this.setState({ ...this.state, tabs: window.location.search });\n        let invoiceInitState;\n        const searchArr = window.location.search.split('&');\n        if (searchArr[1]) {\n            //updating an existing invoice\n            //?updating=...\n            //downlaoding an existing invoice\n            //?download=...\n            const invoice_ID = searchArr[1].slice(9);\n            const invoiceToLoad = this.props.company.invoices.find(\n                (invoice) => invoice._id === invoice_ID\n            );\n            if (invoiceToLoad) {\n                //invoiceInitState from the invoices arr\n                invoiceInitState = invoiceToLoad;\n                //add invoice tasks to existing tasks of the current company\n                const tasksArrIncInvoiceTasks = [\n                    ...invoiceToLoad.tasks,\n                    ...this.props.company.tasks,\n                ];\n                this.props.updateCompanyArr(\n                    'tasks',\n                    tasksArrIncInvoiceTasks,\n                    this.props.company._id\n                );\n            }\n        } else {\n            //set all tasks ro be excluded from invoice on load of a new invoice\n            const noTasksIncluded = this.props.company.tasks.map(\n                (t) => (t.addToInvoice = false)\n            );\n            updateCompanyArr('tasks', noTasksIncluded, this.props.company._id);\n            //invoice num #\n            let company_abbr = getInputValueByLabel(\n                this.props.company.details,\n                'Name'\n            ).split(' ');\n            if (company_abbr.length > 1 && company_abbr[1]) {\n                company_abbr = company_abbr\n                    .map((el) => el[0].toUpperCase())\n                    .join('');\n            } else {\n                company_abbr = company_abbr[0].slice(0, 3).toUpperCase();\n            }\n            let invoices_num = '1';\n            if (this.props.company.invoices)\n                invoices_num = String(this.props.company.invoices.length + 1);\n            while (invoices_num.length < 5) {\n                invoices_num = '0' + invoices_num;\n            }\n            let saved_as = company_abbr + '-';\n            saved_as += date_YYYY_MM(new Date()) + '-';\n            saved_as += invoices_num;\n            //generate due date in 14 days\n            const TWO_WEEKS = 1.21e9;\n            let due_date = date_DD_MM_YYYY(new Date().getTime() + TWO_WEEKS);\n            //a new invoice\n            invoiceInitState = {\n                _id: uuidv4(),\n                created_at: new Date(),\n                saved_as,\n                issue_date: date_DD_MM_YYYY(new Date()),\n                due_date,\n                bg_color: localStorage.invoice_bg || 'blue',\n                text_color: localStorage.invoice_txt || 'white',\n                profile: JSON.parse(JSON.stringify(this.props.profile.details)),\n                company: JSON.parse(JSON.stringify(this.props.company.details)),\n                tasks: [],\n                discount: 0,\n                tax: 0,\n                fees: 0,\n                notes: 'Thank you for your business.',\n                currency: '',\n            };\n        }\n\n        //set init state for comparison on component unmounting\n        this.setState({\n            invoice: JSON.parse(JSON.stringify(invoiceInitState)),\n        });\n\n        //set redux state\n        this.props.setInvoiceInitState(invoiceInitState);\n    }\n    componentWillUnmount() {\n        //auth err and logout won't trigger fun\n        if (this.props.session.authenticated) this.handleChanges();\n    }\n    handleChanges() {\n        //TASKS CAN BE AMENDED/UPDATED IN FORM  WITH EFECT ON DB HENCE NEED TO CHECK INIT STATE AGAINST COMPANY.TASKS NOT INVOICE.TASKS!!!\n        console.log(\n            JSON.stringify(this.state.invoice) ===\n                JSON.stringify(this.props.invoice)\n        );\n        this.props.invoice.tasks = this.props.company.tasks.filter(\n            (t) => t.addToInvoice\n        );\n        console.log(this.state.invoice, this.props.invoice);\n\n        alertUnsavedChanges(\n            this.state.invoice,\n            this.props.invoice,\n            `/dashboard/companies/${this.props.company._id}${this.state.tabs}`,\n            null,\n            this.props.history\n        );\n        // if (\n        //     JSON.stringify(this.state.invoice) !==\n        //     JSON.stringify(this.props.invoice)\n        // ) {\n        //     const msg = `You have some unsaved changes. What would you like to do?`;\n        //     const cancelBtnText = 'Discharge changes';\n        //     const confirmBtnText = 'Return to the form!';\n        //     const confirmCb = () => {};\n        //     const cancelCb = async () => {};\n        //     dialogBox({\n        //         msg,\n        //         cancelBtnText,\n        //         confirmBtnText,\n        //         confirmCb,\n        //         cancelCb,\n        //     });\n        // } else {\n        //     //remove any tasks added on update\n        //     const tasksWithoutInvocieTasks = this.props.company.tasks.filter(\n        //         (el) => !this.state.invoice.tasks.includes(el)\n        //     );\n        //     console.log(tasksWithoutInvocieTasks);\n        //     this.props.updateCompanyArr(\n        //         'tasks',\n        //         tasksWithoutInvocieTasks,\n        //         this.props.company._id\n        //     );\n        // }\n    }\n    render() {\n        return (\n            <section className='company-invoice'>\n                <h2 className='sr-only'>Create a new invoice.</h2>\n                {this.state.invoice && <InvoiceDoc />}\n                {this.state.invoice && (\n                    <NewInvoiceSubmit invoiceInitState={this.state.invoice} />\n                )}\n            </section>\n        );\n    }\n}\n\nNewInvoice.propTypes = {\n    session: PropTypes.object,\n    profile: PropTypes.object,\n    company: PropTypes.object,\n    invoice: PropTypes.object,\n    updateCompanyArr: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n    session: state.session,\n    profile: state.profile,\n    company: state.companies.find(\n        (c) => c._id === state.session.currentCompany\n    ),\n    invoice: state.invoice,\n});\n\nconst mapDispatchToProps = {\n    setInvoiceInitState,\n    updateCompanyArr,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(NewInvoice));\n"]},"metadata":{},"sourceType":"module"}