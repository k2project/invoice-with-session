{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/calendar/Calendar.js\";\nimport React, { useState, useEffect } from 'react';\nimport './Calendar.scss';\nimport { DAYS, DAYS_LEAP, DAYS_OF_THE_WEEK, MONTHS, dayFormating, monthFormating } from './dates';\nexport function Calendar({\n  cb\n}) {\n  const today = new Date();\n  const today_day = today.getDate();\n  const today_month = today.getMonth();\n  const today_year = today.getFullYear();\n  const [date, setDate] = useState(today);\n  const month = date.getMonth();\n  const year = date.getFullYear(); //get a number of days in month in regards to the leap year\n\n  const isLeapYear = year => {\n    return !(year % 4 || !(year % 100) && year % 400);\n  };\n\n  const days_in_month = isLeapYear(year) ? DAYS_LEAP : DAYS; //calculate number of days to display before the first day of month\n\n  const getStartDayOfMonth = () => {\n    return new Date(year, month, 1).getDay();\n  };\n\n  const first_day = getStartDayOfMonth();\n  const empty_days = first_day === 0 ? 6 : first_day - 1;\n  const num_of_days_to_display = Array(days_in_month[date.getMonth()] + empty_days);\n  return /*#__PURE__*/React.createElement(\"article\", {\n    className: \"calendar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar__header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setDate(new Date(year, month - 1, 1)),\n    onMouseDown: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }, \"\\u27A4\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, \"Currently displayed month: \", MONTHS[month], \" \", year, \". Click to get the previous month.\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, MONTHS[month], \" \", year)), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setDate(new Date(year, month + 1, 1)),\n    onMouseDown: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, \"\\u27A4\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, \"Currently displayed month: \", MONTHS[month], \" \", year, \". Click to get the next month.\"))), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"days__named\",\n    \"aria-label\": \"week days\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, DAYS_OF_THE_WEEK.map(d => /*#__PURE__*/React.createElement(\"li\", {\n    key: 'cal-day-names-' + d,\n    className: \"day\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, d))), /*#__PURE__*/React.createElement(\"ul\", {\n    \"aria-label\": \"month days and dates\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, num_of_days_to_display.fill(null).map((_, index) => {\n    let d = index - (empty_days - 1);\n    if (d < 1) return /*#__PURE__*/React.createElement(\"li\", {\n      key: 'calendar-day-' + index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 39\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"li\", {\n      className: \"day\",\n      key: 'calendar-day-' + index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onMouseDown: e => e.preventDefault(),\n      onClick: () => cb(`${dayFormating(d)}/${monthFormating(month + 1)}/${year}`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: d === today_day && month === today_month && year === today_year ? 'today' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 33\n      }\n    }, d), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 33\n      }\n    }, ' ', MONTHS[month], \" \", year, ' ')));\n  })));\n}","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/calendar/Calendar.js"],"names":["React","useState","useEffect","DAYS","DAYS_LEAP","DAYS_OF_THE_WEEK","MONTHS","dayFormating","monthFormating","Calendar","cb","today","Date","today_day","getDate","today_month","getMonth","today_year","getFullYear","date","setDate","month","year","isLeapYear","days_in_month","getStartDayOfMonth","getDay","first_day","empty_days","num_of_days_to_display","Array","e","preventDefault","map","d","fill","_","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Calendar.scss';\nimport {\n    DAYS,\n    DAYS_LEAP,\n    DAYS_OF_THE_WEEK,\n    MONTHS,\n    dayFormating,\n    monthFormating,\n} from './dates';\n\nexport function Calendar({ cb }) {\n    const today = new Date();\n    const today_day = today.getDate();\n    const today_month = today.getMonth();\n    const today_year = today.getFullYear();\n\n    const [date, setDate] = useState(today);\n    const month = date.getMonth();\n    const year = date.getFullYear();\n\n    //get a number of days in month in regards to the leap year\n    const isLeapYear = (year) => {\n        return !(year % 4 || (!(year % 100) && year % 400));\n    };\n    const days_in_month = isLeapYear(year) ? DAYS_LEAP : DAYS;\n    //calculate number of days to display before the first day of month\n    const getStartDayOfMonth = () => {\n        return new Date(year, month, 1).getDay();\n    };\n    const first_day = getStartDayOfMonth();\n    const empty_days = first_day === 0 ? 6 : first_day - 1;\n    const num_of_days_to_display = Array(\n        days_in_month[date.getMonth()] + empty_days\n    );\n\n    return (\n        <article className='calendar'>\n            <div className='calendar__header'>\n                {/* prev month */}\n                <button\n                    onClick={() => setDate(new Date(year, month - 1, 1))}\n                    onMouseDown={(e) => e.preventDefault()}\n                >\n                    <span aria-hidden='true'>&#x27A4;</span>\n                    <span className='sr-only'>\n                        Currently displayed month: {MONTHS[month]} {year}. Click\n                        to get the previous month.\n                    </span>\n                </button>\n                <div>\n                    <b>\n                        {MONTHS[month]} {year}\n                    </b>\n                </div>\n                {/* next month */}\n                <button\n                    onClick={() => setDate(new Date(year, month + 1, 1))}\n                    onMouseDown={(e) => e.preventDefault()}\n                >\n                    <span aria-hidden='true'>&#x27A4;</span>\n                    <span className='sr-only'>\n                        Currently displayed month: {MONTHS[month]} {year}. Click\n                        to get the next month.\n                    </span>\n                </button>\n            </div>\n            <ul className='days__named' aria-label='week days'>\n                {DAYS_OF_THE_WEEK.map((d) => (\n                    <li key={'cal-day-names-' + d} className='day'>\n                        {d}\n                    </li>\n                ))}\n            </ul>\n\n            <ul aria-label='month days and dates'>\n                {num_of_days_to_display.fill(null).map((_, index) => {\n                    let d = index - (empty_days - 1);\n                    if (d < 1) return <li key={'calendar-day-' + index}></li>;\n                    return (\n                        <li className='day' key={'calendar-day-' + index}>\n                            <button\n                                onMouseDown={(e) => e.preventDefault()}\n                                onClick={() =>\n                                    cb(\n                                        `${dayFormating(d)}/${monthFormating(\n                                            month + 1\n                                        )}/${year}`\n                                    )\n                                }\n                            >\n                                <span\n                                    className={\n                                        d === today_day &&\n                                        month === today_month &&\n                                        year === today_year\n                                            ? 'today'\n                                            : ''\n                                    }\n                                >\n                                    {d}\n                                </span>\n                                <span className='sr-only'>\n                                    {' '}\n                                    {MONTHS[month]} {year}{' '}\n                                </span>\n                            </button>\n                        </li>\n                    );\n                })}\n            </ul>\n        </article>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}