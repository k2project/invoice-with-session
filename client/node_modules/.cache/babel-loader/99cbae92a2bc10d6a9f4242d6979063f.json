{"ast":null,"code":"\"use strict\";\n\nconst HTTP_STATUS_CODES = require(\"http\").STATUS_CODES;\n\nconst {\n  spawnSync\n} = require(\"child_process\");\n\nconst {\n  URL\n} = require(\"whatwg-url\");\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst tough = require(\"tough-cookie\");\n\nconst MIMEType = require(\"whatwg-mimetype\");\n\nconst conversions = require(\"webidl-conversions\");\n\nconst xhrUtils = require(\"./xhr-utils\");\n\nconst DOMException = require(\"domexception\");\n\nconst xhrSymbols = require(\"./xmlhttprequest-symbols\");\n\nconst {\n  addConstants\n} = require(\"../utils\");\n\nconst {\n  documentBaseURLSerialized\n} = require(\"./helpers/document-base-url\");\n\nconst {\n  asciiCaseInsensitiveMatch\n} = require(\"./helpers/strings\");\n\nconst idlUtils = require(\"./generated/utils\");\n\nconst Document = require(\"./generated/Document\");\n\nconst Blob = require(\"./generated/Blob\");\n\nconst FormData = require(\"./generated/FormData\");\n\nconst XMLHttpRequestEventTarget = require(\"./generated/XMLHttpRequestEventTarget\");\n\nconst XMLHttpRequestUpload = require(\"./generated/XMLHttpRequestUpload\");\n\nconst {\n  domToHtml\n} = require(\"../browser/domtohtml\");\n\nconst {\n  setupForSimpleEventAccessors\n} = require(\"./helpers/create-event-accessor\");\n\nconst {\n  parseJSONFromBytes\n} = require(\"./helpers/json\");\n\nconst syncWorkerFile = require.resolve ? require.resolve(\"./xhr-sync-worker.js\") : null;\nconst tokenRegexp = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/;\nconst fieldValueRegexp = /^[ \\t]*(?:[\\x21-\\x7E\\x80-\\xFF](?:[ \\t][\\x21-\\x7E\\x80-\\xFF])?)*[ \\t]*$/;\nconst forbiddenRequestHeaders = new Set([\"accept-charset\", \"accept-encoding\", \"access-control-request-headers\", \"access-control-request-method\", \"connection\", \"content-length\", \"cookie\", \"cookie2\", \"date\", \"dnt\", \"expect\", \"host\", \"keep-alive\", \"origin\", \"referer\", \"te\", \"trailer\", \"transfer-encoding\", \"upgrade\", \"via\"]);\nconst forbiddenResponseHeaders = new Set([\"set-cookie\", \"set-cookie2\"]);\nconst uniqueResponseHeaders = new Set([\"content-type\", \"content-length\", \"user-agent\", \"referer\", \"host\", \"authorization\", \"proxy-authorization\", \"if-modified-since\", \"if-unmodified-since\", \"from\", \"location\", \"max-forwards\"]);\nconst corsSafeResponseHeaders = new Set([\"cache-control\", \"content-language\", \"content-type\", \"expires\", \"last-modified\", \"pragma\"]);\nconst allowedRequestMethods = new Set([\"OPTIONS\", \"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\"]);\nconst forbiddenRequestMethods = new Set([\"TRACK\", \"TRACE\", \"CONNECT\"]);\nconst XMLHttpRequestResponseType = new Set([\"\", \"arraybuffer\", \"blob\", \"document\", \"json\", \"text\"]);\n\nmodule.exports = function createXMLHttpRequest(window) {\n  const {\n    Event,\n    ProgressEvent\n  } = window;\n\n  class XMLHttpRequest extends XMLHttpRequestEventTarget.interface {\n    constructor() {\n      // eslint-disable-line constructor-super\n      const theThis = Object.create(new.target.prototype);\n      XMLHttpRequestEventTarget.setup(theThis);\n      theThis.upload = XMLHttpRequestUpload.create();\n      theThis.upload._ownerDocument = window.document;\n      theThis[xhrSymbols.flag] = {\n        synchronous: false,\n        withCredentials: false,\n        mimeType: null,\n        auth: null,\n        method: undefined,\n        responseType: \"\",\n        requestHeaders: {},\n        referrer: theThis._ownerDocument.URL,\n        uri: \"\",\n        timeout: 0,\n        body: undefined,\n        formData: false,\n        preflight: false,\n        requestManager: theThis._ownerDocument._requestManager,\n        pool: theThis._ownerDocument._pool,\n        agentOptions: theThis._ownerDocument._agentOptions,\n        strictSSL: theThis._ownerDocument._strictSSL,\n        proxy: theThis._ownerDocument._proxy,\n        cookieJar: theThis._ownerDocument._cookieJar,\n        encoding: theThis._ownerDocument._encoding,\n        origin: theThis._ownerDocument.origin,\n        userAgent: window.navigator.userAgent\n      };\n      theThis[xhrSymbols.properties] = {\n        beforeSend: false,\n        send: false,\n        timeoutStart: 0,\n        timeoutId: 0,\n        timeoutFn: null,\n        client: null,\n        responseHeaders: {},\n        filteredResponseHeaders: [],\n        responseBuffer: null,\n        responseCache: null,\n        responseTextCache: null,\n        responseXMLCache: null,\n        responseURL: \"\",\n        readyState: XMLHttpRequest.UNSENT,\n        status: 0,\n        statusText: \"\",\n        error: \"\",\n        uploadComplete: false,\n        uploadListener: false,\n        // Signifies that we're calling abort() from xhr-utils.js because of a window shutdown.\n        // In that case the termination reason is \"fatal\", not \"end-user abort\".\n        abortError: false,\n        cookieJar: theThis._ownerDocument._cookieJar,\n        bufferStepSize: 1 * 1024 * 1024,\n        // pre-allocate buffer increase step size. init value is 1MB\n        totalReceivedChunkSize: 0\n      };\n      return theThis;\n    }\n\n    get readyState() {\n      return this[xhrSymbols.properties].readyState;\n    }\n\n    get status() {\n      return this[xhrSymbols.properties].status;\n    }\n\n    get statusText() {\n      return this[xhrSymbols.properties].statusText;\n    }\n\n    get responseType() {\n      return this[xhrSymbols.flag].responseType;\n    }\n\n    set responseType(responseType) {\n      const flag = this[xhrSymbols.flag];\n\n      if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      if (this.readyState === XMLHttpRequest.OPENED && flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n\n      if (!XMLHttpRequestResponseType.has(responseType)) {\n        responseType = \"\";\n      }\n\n      flag.responseType = responseType;\n    }\n\n    get response() {\n      const properties = this[xhrSymbols.properties];\n\n      if (properties.responseCache) {\n        return properties.responseCache;\n      }\n\n      let res = \"\";\n      const responseBuffer = properties.responseBuffer ? properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) : null;\n\n      switch (this.responseType) {\n        case \"\":\n        case \"text\":\n          {\n            res = this.responseText;\n            break;\n          }\n\n        case \"arraybuffer\":\n          {\n            if (!responseBuffer) {\n              return null;\n            }\n\n            res = new Uint8Array(responseBuffer).buffer;\n            break;\n          }\n\n        case \"blob\":\n          {\n            if (!responseBuffer) {\n              return null;\n            }\n\n            const contentType = finalMIMEType(this);\n            res = Blob.create([[new Uint8Array(responseBuffer)], {\n              type: contentType || \"\"\n            }]);\n            break;\n          }\n\n        case \"document\":\n          {\n            res = this.responseXML;\n            break;\n          }\n\n        case \"json\":\n          {\n            if (this.readyState !== XMLHttpRequest.DONE || !responseBuffer) {\n              res = null;\n            }\n\n            try {\n              res = parseJSONFromBytes(responseBuffer);\n            } catch (e) {\n              res = null;\n            }\n\n            break;\n          }\n      }\n\n      properties.responseCache = res;\n      return res;\n    }\n\n    get responseText() {\n      const properties = this[xhrSymbols.properties];\n\n      if (this.responseType !== \"\" && this.responseType !== \"text\") {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      if (this.readyState !== XMLHttpRequest.LOADING && this.readyState !== XMLHttpRequest.DONE) {\n        return \"\";\n      }\n\n      if (properties.responseTextCache) {\n        return properties.responseTextCache;\n      }\n\n      const responseBuffer = properties.responseBuffer ? properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) : null;\n\n      if (!responseBuffer) {\n        return \"\";\n      }\n\n      const fallbackEncoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n      const res = whatwgEncoding.decode(responseBuffer, fallbackEncoding);\n      properties.responseTextCache = res;\n      return res;\n    }\n\n    get responseXML() {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (this.responseType !== \"\" && this.responseType !== \"document\") {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      if (this.readyState !== XMLHttpRequest.DONE) {\n        return null;\n      }\n\n      if (properties.responseXMLCache) {\n        return properties.responseXMLCache;\n      }\n\n      const responseBuffer = properties.responseBuffer ? properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) : null;\n\n      if (!responseBuffer) {\n        return null;\n      }\n\n      const contentType = finalMIMEType(this);\n      let isHTML = false;\n      let isXML = false;\n      const parsed = MIMEType.parse(contentType);\n\n      if (parsed) {\n        isHTML = parsed.isHTML();\n        isXML = parsed.isXML();\n\n        if (!isXML && !isHTML) {\n          return null;\n        }\n      }\n\n      if (this.responseType === \"\" && isHTML) {\n        return null;\n      }\n\n      const encoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n      const resText = whatwgEncoding.decode(responseBuffer, encoding);\n\n      if (!resText) {\n        return null;\n      }\n\n      const res = Document.create([], {\n        options: {\n          url: flag.uri,\n          lastModified: new Date(getResponseHeader(this, \"last-modified\")),\n          parsingMode: isHTML ? \"html\" : \"xml\",\n          cookieJar: {\n            setCookieSync: () => undefined,\n            getCookieStringSync: () => \"\"\n          },\n          encoding,\n          parseOptions: this._ownerDocument._parseOptions\n        }\n      });\n      const resImpl = idlUtils.implForWrapper(res);\n\n      try {\n        resImpl._htmlToDom.appendToDocument(resText, resImpl);\n      } catch (e) {\n        properties.responseXMLCache = null;\n        return null;\n      }\n\n      res.close();\n      properties.responseXMLCache = res;\n      return res;\n    }\n\n    get responseURL() {\n      return this[xhrSymbols.properties].responseURL;\n    }\n\n    get timeout() {\n      return this[xhrSymbols.flag].timeout;\n    }\n\n    set timeout(val) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n\n      flag.timeout = val;\n      clearTimeout(properties.timeoutId);\n\n      if (val > 0 && properties.timeoutFn) {\n        properties.timeoutId = setTimeout(properties.timeoutFn, Math.max(0, val - (new Date().getTime() - properties.timeoutStart)));\n      } else {\n        properties.timeoutFn = null;\n        properties.timeoutStart = 0;\n      }\n    }\n\n    get withCredentials() {\n      return this[xhrSymbols.flag].withCredentials;\n    }\n\n    set withCredentials(val) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (!(this.readyState === XMLHttpRequest.UNSENT || this.readyState === XMLHttpRequest.OPENED)) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      if (properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      flag.withCredentials = val;\n    }\n\n    abort() {\n      const properties = this[xhrSymbols.properties]; // Terminate the request\n\n      clearTimeout(properties.timeoutId);\n      properties.timeoutFn = null;\n      properties.timeoutStart = 0;\n      const {\n        client\n      } = properties;\n\n      if (client) {\n        client.abort();\n        properties.client = null;\n      }\n\n      if (properties.abortError) {\n        // Special case that ideally shouldn't be going through the public API at all.\n        // Run the https://xhr.spec.whatwg.org/#handle-errors \"fatal\" steps.\n        properties.readyState = XMLHttpRequest.DONE;\n        properties.send = false;\n        xhrUtils.setResponseToNetworkError(this);\n        return;\n      }\n\n      if (this.readyState === XMLHttpRequest.OPENED && properties.send || this.readyState === XMLHttpRequest.HEADERS_RECEIVED || this.readyState === XMLHttpRequest.LOADING) {\n        xhrUtils.requestErrorSteps(this, \"abort\");\n      }\n\n      if (this.readyState === XMLHttpRequest.DONE) {\n        properties.readyState = XMLHttpRequest.UNSENT;\n        xhrUtils.setResponseToNetworkError(this);\n      }\n    }\n\n    getAllResponseHeaders() {\n      const properties = this[xhrSymbols.properties];\n      const {\n        readyState\n      } = this;\n\n      if (readyState === XMLHttpRequest.UNSENT || readyState === XMLHttpRequest.OPENED) {\n        return \"\";\n      }\n\n      return Object.keys(properties.responseHeaders).filter(key => properties.filteredResponseHeaders.indexOf(key) === -1).map(key => [conversions.ByteString(key).toLowerCase(), properties.responseHeaders[key]].join(\": \")).join(\"\\r\\n\");\n    }\n\n    getResponseHeader(header) {\n      const properties = this[xhrSymbols.properties];\n      const {\n        readyState\n      } = this;\n\n      if (readyState === XMLHttpRequest.UNSENT || readyState === XMLHttpRequest.OPENED) {\n        return null;\n      }\n\n      const lcHeader = conversions.ByteString(header).toLowerCase();\n\n      if (properties.filteredResponseHeaders.find(filtered => lcHeader === filtered.toLowerCase())) {\n        return null;\n      }\n\n      return getResponseHeader(this, lcHeader);\n    }\n\n    open(method, uri, asynchronous, user, password) {\n      if (!this._ownerDocument) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      const argumentCount = arguments.length;\n\n      if (argumentCount < 2) {\n        throw new TypeError(\"Not enough arguments (expected at least 2)\");\n      }\n\n      method = conversions.ByteString(method);\n      uri = conversions.USVString(uri);\n\n      if (user) {\n        user = conversions.USVString(user);\n      }\n\n      if (password) {\n        password = conversions.USVString(password);\n      }\n\n      if (!tokenRegexp.test(method)) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n\n      const upperCaseMethod = method.toUpperCase();\n\n      if (forbiddenRequestMethods.has(upperCaseMethod)) {\n        throw new DOMException(\"The operation is insecure.\", \"SecurityError\");\n      }\n\n      const {\n        client\n      } = properties;\n\n      if (client && typeof client.abort === \"function\") {\n        client.abort();\n      }\n\n      if (allowedRequestMethods.has(upperCaseMethod)) {\n        method = upperCaseMethod;\n      }\n\n      if (typeof asynchronous !== \"undefined\") {\n        flag.synchronous = !asynchronous;\n      } else {\n        flag.synchronous = false;\n      }\n\n      if (flag.responseType && flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n\n      if (flag.synchronous && flag.timeout) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n\n      flag.method = method;\n      let urlObj;\n\n      try {\n        urlObj = new URL(uri, documentBaseURLSerialized(this._ownerDocument));\n      } catch (e) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n\n      if (user || password && !urlObj.username) {\n        flag.auth = {\n          user,\n          pass: password\n        };\n        urlObj.username = \"\";\n        urlObj.password = \"\";\n      }\n\n      flag.uri = urlObj.href;\n      flag.requestHeaders = {};\n      flag.preflight = false;\n      properties.send = false;\n      properties.uploadListener = false;\n      properties.requestBuffer = null;\n      properties.requestCache = null;\n      properties.abortError = false;\n      properties.responseURL = \"\";\n      readyStateChange(this, XMLHttpRequest.OPENED);\n    }\n\n    overrideMimeType(mime) {\n      mime = String(mime);\n      const {\n        readyState\n      } = this;\n\n      if (readyState === XMLHttpRequest.LOADING || readyState === XMLHttpRequest.DONE) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      this[xhrSymbols.flag].overrideMIMEType = \"application/octet-stream\"; // Waiting for better spec: https://github.com/whatwg/xhr/issues/157\n\n      const parsed = MIMEType.parse(mime);\n\n      if (parsed) {\n        this[xhrSymbols.flag].overrideMIMEType = parsed.essence;\n        const charset = parsed.parameters.get(\"charset\");\n\n        if (charset) {\n          this[xhrSymbols.flag].overrideCharset = whatwgEncoding.labelToName(charset);\n        }\n      }\n    }\n\n    send(body) {\n      body = coerceBodyArg(body); // Not per spec, but per tests: https://github.com/whatwg/xhr/issues/65\n\n      if (!this._ownerDocument) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (this.readyState !== XMLHttpRequest.OPENED || properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      properties.beforeSend = true;\n\n      try {\n        if (flag.method === \"GET\" || flag.method === \"HEAD\") {\n          body = null;\n        }\n\n        if (body !== null) {\n          let encoding = null;\n          let mimeType = null;\n\n          if (Document.isImpl(body)) {\n            encoding = \"UTF-8\";\n            mimeType = (body._parsingMode === \"html\" ? \"text/html\" : \"application/xml\") + \";charset=UTF-8\";\n            flag.body = domToHtml([body]);\n          } else {\n            if (typeof body === \"string\") {\n              encoding = \"UTF-8\";\n            }\n\n            const {\n              buffer,\n              formData,\n              contentType\n            } = extractBody(body);\n            mimeType = contentType;\n            flag.body = buffer || formData;\n            flag.formData = Boolean(formData);\n          }\n\n          const existingContentType = xhrUtils.getRequestHeader(flag.requestHeaders, \"content-type\");\n\n          if (mimeType !== null && existingContentType === null) {\n            flag.requestHeaders[\"Content-Type\"] = mimeType;\n          } else if (existingContentType !== null && encoding !== null) {\n            // Waiting for better spec: https://github.com/whatwg/xhr/issues/188. This seems like a good guess at what\n            // the spec will be, in the meantime.\n            const parsed = MIMEType.parse(existingContentType);\n\n            if (parsed) {\n              const charset = parsed.parameters.get(\"charset\");\n\n              if (charset && !asciiCaseInsensitiveMatch(charset, encoding) && encoding !== null) {\n                parsed.parameters.set(\"charset\", encoding);\n              }\n\n              xhrUtils.updateRequestHeader(flag.requestHeaders, \"content-type\", parsed.toString());\n            }\n          }\n        }\n      } finally {\n        if (properties.beforeSend) {\n          properties.beforeSend = false;\n        } else {\n          throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n        }\n      }\n\n      if (Object.keys(idlUtils.implForWrapper(this.upload)._eventListeners).length > 0) {\n        properties.uploadListener = true;\n      } // request doesn't like zero-length bodies\n\n\n      if (flag.body && flag.body.byteLength === 0) {\n        flag.body = null;\n      }\n\n      if (flag.synchronous) {\n        const flagStr = JSON.stringify(flag, function (k, v) {\n          if (this === flag && k === \"requestManager\") {\n            return null;\n          }\n\n          if (this === flag && k === \"pool\" && v) {\n            return {\n              maxSockets: v.maxSockets\n            };\n          }\n\n          return v;\n        });\n        const res = spawnSync(process.execPath, [syncWorkerFile], {\n          input: flagStr\n        });\n\n        if (res.status !== 0) {\n          throw new Error(res.stderr.toString());\n        }\n\n        if (res.error) {\n          if (typeof res.error === \"string\") {\n            res.error = new Error(res.error);\n          }\n\n          throw res.error;\n        }\n\n        const response = JSON.parse(res.stdout.toString());\n\n        if (response.properties.responseBuffer && response.properties.responseBuffer.data) {\n          response.properties.responseBuffer = Buffer.from(response.properties.responseBuffer.data);\n        }\n\n        if (response.properties.cookieJar) {\n          response.properties.cookieJar = tough.CookieJar.deserializeSync(response.properties.cookieJar, this._ownerDocument._cookieJar.store);\n        }\n\n        response.properties.readyState = XMLHttpRequest.LOADING;\n        this[xhrSymbols.properties] = response.properties;\n\n        if (response.properties.error) {\n          xhrUtils.dispatchError(this);\n          throw new DOMException(response.properties.error, \"NetworkError\");\n        } else {\n          const {\n            responseBuffer\n          } = this[xhrSymbols.properties];\n          const contentLength = getResponseHeader(this, \"content-length\") || \"0\";\n          const bufferLength = parseInt(contentLength) || responseBuffer.length;\n          const progressObj = {\n            lengthComputable: false\n          };\n\n          if (bufferLength !== 0) {\n            progressObj.total = bufferLength;\n            progressObj.loaded = bufferLength;\n            progressObj.lengthComputable = true;\n          }\n\n          this.dispatchEvent(new ProgressEvent(\"progress\", progressObj));\n          readyStateChange(this, XMLHttpRequest.DONE);\n          this.dispatchEvent(new ProgressEvent(\"load\", progressObj));\n          this.dispatchEvent(new ProgressEvent(\"loadend\", progressObj));\n        }\n      } else {\n        properties.send = true;\n        this.dispatchEvent(new ProgressEvent(\"loadstart\"));\n        const client = xhrUtils.createClient(this);\n        properties.client = client; // For new client, reset totalReceivedChunkSize and bufferStepSize\n\n        properties.totalReceivedChunkSize = 0;\n        properties.bufferStepSize = 1 * 1024 * 1024;\n        properties.origin = flag.origin;\n        client.on(\"error\", err => {\n          client.removeAllListeners();\n          properties.error = err;\n          xhrUtils.dispatchError(this);\n        });\n        client.on(\"response\", res => receiveResponse(this, res));\n        client.on(\"redirect\", () => {\n          const {\n            response\n          } = client;\n          const destUrlObj = new URL(response.request.headers.Referer);\n          const urlObj = new URL(response.request.uri.href);\n\n          if (destUrlObj.origin !== urlObj.origin && destUrlObj.origin !== flag.origin) {\n            properties.origin = \"null\";\n          }\n\n          response.request.headers.Origin = properties.origin;\n\n          if (flag.origin !== destUrlObj.origin && destUrlObj.protocol !== \"data:\") {\n            if (!xhrUtils.validCORSHeaders(this, response, flag, properties, flag.origin)) {\n              return;\n            }\n\n            if (urlObj.username || urlObj.password) {\n              properties.error = \"Userinfo forbidden in cors redirect\";\n              xhrUtils.dispatchError(this);\n            }\n          }\n        });\n\n        if (body !== null && body !== \"\") {\n          properties.uploadComplete = false;\n          setDispatchProgressEvents(this);\n        } else {\n          properties.uploadComplete = true;\n        }\n\n        if (this.timeout > 0) {\n          properties.timeoutStart = new Date().getTime();\n\n          properties.timeoutFn = () => {\n            client.abort();\n\n            if (!(this.readyState === XMLHttpRequest.UNSENT || this.readyState === XMLHttpRequest.OPENED && !properties.send || this.readyState === XMLHttpRequest.DONE)) {\n              properties.send = false;\n              let stateChanged = false;\n\n              if (!properties.uploadComplete) {\n                this.upload.dispatchEvent(new ProgressEvent(\"progress\"));\n                readyStateChange(this, XMLHttpRequest.DONE);\n                this.upload.dispatchEvent(new ProgressEvent(\"timeout\"));\n                this.upload.dispatchEvent(new ProgressEvent(\"loadend\"));\n                stateChanged = true;\n              }\n\n              this.dispatchEvent(new ProgressEvent(\"progress\"));\n\n              if (!stateChanged) {\n                readyStateChange(this, XMLHttpRequest.DONE);\n              }\n\n              this.dispatchEvent(new ProgressEvent(\"timeout\"));\n              this.dispatchEvent(new ProgressEvent(\"loadend\"));\n            }\n\n            properties.readyState = XMLHttpRequest.UNSENT;\n          };\n\n          properties.timeoutId = setTimeout(properties.timeoutFn, this.timeout);\n        }\n      }\n\n      flag.body = undefined;\n      flag.formData = false;\n    }\n\n    setRequestHeader(header, value) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (arguments.length !== 2) {\n        throw new TypeError(\"2 arguments required for setRequestHeader\");\n      }\n\n      header = conversions.ByteString(header);\n      value = conversions.ByteString(value);\n\n      if (this.readyState !== XMLHttpRequest.OPENED || properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      value = normalizeHeaderValue(value);\n\n      if (!tokenRegexp.test(header) || !fieldValueRegexp.test(value)) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n\n      const lcHeader = header.toLowerCase();\n\n      if (forbiddenRequestHeaders.has(lcHeader) || lcHeader.startsWith(\"sec-\") || lcHeader.startsWith(\"proxy-\")) {\n        return;\n      }\n\n      const keys = Object.keys(flag.requestHeaders);\n      let n = keys.length;\n\n      while (n--) {\n        const key = keys[n];\n\n        if (key.toLowerCase() === lcHeader) {\n          flag.requestHeaders[key] += \", \" + value;\n          return;\n        }\n      }\n\n      flag.requestHeaders[header] = value;\n    }\n\n    get _ownerDocument() {\n      return idlUtils.implForWrapper(window.document);\n    }\n\n  }\n\n  Object.defineProperty(XMLHttpRequest.prototype, Symbol.toStringTag, {\n    value: \"XMLHttpRequest\",\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n  setupForSimpleEventAccessors(XMLHttpRequest.prototype, [\"readystatechange\"]);\n  addConstants(XMLHttpRequest, {\n    UNSENT: 0,\n    OPENED: 1,\n    HEADERS_RECEIVED: 2,\n    LOADING: 3,\n    DONE: 4\n  });\n\n  function readyStateChange(xhr, readyState) {\n    const properties = xhr[xhrSymbols.properties];\n\n    if (properties.readyState === readyState) {\n      return;\n    }\n\n    properties.readyState = readyState;\n    const readyStateChangeEvent = new Event(\"readystatechange\");\n    xhr.dispatchEvent(readyStateChangeEvent);\n  }\n\n  function receiveResponse(xhr, response) {\n    const properties = xhr[xhrSymbols.properties];\n    const flag = xhr[xhrSymbols.flag];\n    const {\n      statusCode\n    } = response;\n    let byteOffset = 0;\n    const headers = {};\n    const filteredResponseHeaders = [];\n    const headerMap = {};\n    const {\n      rawHeaders\n    } = response;\n    const n = Number(rawHeaders.length);\n\n    for (let i = 0; i < n; i += 2) {\n      const k = rawHeaders[i];\n      const kl = k.toLowerCase();\n      const v = rawHeaders[i + 1];\n\n      if (uniqueResponseHeaders.has(kl)) {\n        if (headerMap[kl] !== undefined) {\n          delete headers[headerMap[kl]];\n        }\n\n        headers[k] = v;\n      } else if (headerMap[kl] !== undefined) {\n        headers[headerMap[kl]] += \", \" + v;\n      } else {\n        headers[k] = v;\n      }\n\n      headerMap[kl] = k;\n    }\n\n    const destUrlObj = new URL(response.request.uri.href);\n\n    if (properties.origin !== destUrlObj.origin && destUrlObj.protocol !== \"data:\") {\n      if (!xhrUtils.validCORSHeaders(xhr, response, flag, properties, properties.origin)) {\n        return;\n      }\n\n      const acehStr = response.headers[\"access-control-expose-headers\"];\n      const aceh = new Set(acehStr ? acehStr.trim().toLowerCase().split(xhrUtils.headerListSeparatorRegexp) : []);\n\n      for (const header in headers) {\n        const lcHeader = header.toLowerCase();\n\n        if (!corsSafeResponseHeaders.has(lcHeader) && !aceh.has(lcHeader)) {\n          filteredResponseHeaders.push(header);\n        }\n      }\n    }\n\n    for (const header in headers) {\n      const lcHeader = header.toLowerCase();\n\n      if (forbiddenResponseHeaders.has(lcHeader)) {\n        filteredResponseHeaders.push(header);\n      }\n    }\n\n    properties.responseURL = destUrlObj.href;\n    properties.status = statusCode;\n    properties.statusText = response.statusMessage || HTTP_STATUS_CODES[statusCode] || \"\";\n    properties.responseHeaders = headers;\n    properties.filteredResponseHeaders = filteredResponseHeaders;\n    const contentLength = getResponseHeader(xhr, \"content-length\") || \"0\";\n    const bufferLength = parseInt(contentLength) || 0;\n    const progressObj = {\n      lengthComputable: false\n    };\n    let lastProgressReported;\n\n    if (bufferLength !== 0) {\n      progressObj.total = bufferLength;\n      progressObj.loaded = 0;\n      progressObj.lengthComputable = true;\n    } // pre-allocate buffer.\n\n\n    properties.responseBuffer = Buffer.alloc(properties.bufferStepSize);\n    properties.responseCache = null;\n    properties.responseTextCache = null;\n    properties.responseXMLCache = null;\n    readyStateChange(xhr, XMLHttpRequest.HEADERS_RECEIVED);\n\n    if (!properties.client) {\n      // The request was aborted in reaction to the readystatechange event.\n      return;\n    } // Can't use the client since the client gets the post-ungzipping bytes (which can be greater than the\n    // Content-Length).\n\n\n    response.on(\"data\", chunk => {\n      byteOffset += chunk.length;\n      progressObj.loaded = byteOffset;\n    });\n    properties.client.on(\"data\", chunk => {\n      properties.totalReceivedChunkSize += chunk.length;\n\n      if (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n        properties.bufferStepSize *= 2;\n\n        while (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n          properties.bufferStepSize *= 2;\n        }\n\n        const tmpBuf = Buffer.alloc(properties.bufferStepSize);\n        properties.responseBuffer.copy(tmpBuf, 0, 0, properties.responseBuffer.length);\n        properties.responseBuffer = tmpBuf;\n      }\n\n      chunk.copy(properties.responseBuffer, properties.totalReceivedChunkSize - chunk.length, 0, chunk.length);\n      properties.responseCache = null;\n      properties.responseTextCache = null;\n      properties.responseXMLCache = null;\n\n      if (properties.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n        properties.readyState = XMLHttpRequest.LOADING;\n      }\n\n      xhr.dispatchEvent(new Event(\"readystatechange\"));\n\n      if (progressObj.total !== progressObj.loaded || properties.totalReceivedChunkSize === byteOffset) {\n        if (lastProgressReported !== progressObj.loaded) {\n          // This is a necessary check in the gzip case where we can be getting new data from the client, as it\n          // un-gzips, but no new data has been gotten from the response, so we should not fire a progress event.\n          lastProgressReported = progressObj.loaded;\n          xhr.dispatchEvent(new ProgressEvent(\"progress\", progressObj));\n        }\n      }\n    });\n    properties.client.on(\"end\", () => {\n      clearTimeout(properties.timeoutId);\n      properties.timeoutFn = null;\n      properties.timeoutStart = 0;\n      properties.client = null;\n      xhr.dispatchEvent(new ProgressEvent(\"progress\", progressObj));\n      readyStateChange(xhr, XMLHttpRequest.DONE);\n      xhr.dispatchEvent(new ProgressEvent(\"load\", progressObj));\n      xhr.dispatchEvent(new ProgressEvent(\"loadend\", progressObj));\n    });\n  }\n\n  function setDispatchProgressEvents(xhr) {\n    const properties = xhr[xhrSymbols.properties];\n    const {\n      client\n    } = properties;\n    const {\n      upload\n    } = xhr;\n    let total = 0;\n    let lengthComputable = false;\n    const length = client.headers && parseInt(xhrUtils.getRequestHeader(client.headers, \"content-length\"));\n\n    if (length) {\n      total = length;\n      lengthComputable = true;\n    }\n\n    const initProgress = {\n      lengthComputable,\n      total,\n      loaded: 0\n    };\n\n    if (properties.uploadListener) {\n      upload.dispatchEvent(new ProgressEvent(\"loadstart\", initProgress));\n    }\n\n    client.on(\"request\", req => {\n      req.on(\"response\", () => {\n        properties.uploadComplete = true;\n\n        if (!properties.uploadListener) {\n          return;\n        }\n\n        const progress = {\n          lengthComputable,\n          total,\n          loaded: total\n        };\n        upload.dispatchEvent(new ProgressEvent(\"progress\", progress));\n        upload.dispatchEvent(new ProgressEvent(\"load\", progress));\n        upload.dispatchEvent(new ProgressEvent(\"loadend\", progress));\n      });\n    });\n  }\n\n  return XMLHttpRequest;\n};\n\nfunction finalMIMEType(xhr) {\n  const flag = xhr[xhrSymbols.flag];\n  return flag.overrideMIMEType || getResponseHeader(xhr, \"content-type\");\n}\n\nfunction finalCharset(xhr) {\n  const flag = xhr[xhrSymbols.flag];\n\n  if (flag.overrideCharset) {\n    return flag.overrideCharset;\n  }\n\n  const parsedContentType = MIMEType.parse(getResponseHeader(xhr, \"content-type\"));\n\n  if (parsedContentType) {\n    return whatwgEncoding.labelToName(parsedContentType.parameters.get(\"charset\"));\n  }\n\n  return null;\n}\n\nfunction getResponseHeader(xhr, lcHeader) {\n  const properties = xhr[xhrSymbols.properties];\n  const keys = Object.keys(properties.responseHeaders);\n  let n = keys.length;\n\n  while (n--) {\n    const key = keys[n];\n\n    if (key.toLowerCase() === lcHeader) {\n      return properties.responseHeaders[key];\n    }\n  }\n\n  return null;\n}\n\nfunction normalizeHeaderValue(value) {\n  return value.replace(/^[\\x09\\x0A\\x0D\\x20]+/, \"\").replace(/[\\x09\\x0A\\x0D\\x20]+$/, \"\");\n}\n\nfunction coerceBodyArg(body) {\n  // Implements the IDL conversion for `optional (Document or BodyInit)? body = null`\n  if (body === undefined || body === null) {\n    return null;\n  }\n\n  if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {\n    return body;\n  }\n\n  const impl = idlUtils.implForWrapper(body);\n\n  if (impl) {\n    // TODO: allow URLSearchParams or ReadableStream\n    if (Blob.isImpl(impl) || FormData.isImpl(impl) || Document.isImpl(impl)) {\n      return impl;\n    }\n  }\n\n  return conversions.USVString(body);\n}\n\nfunction extractBody(bodyInit) {\n  // https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n  // except we represent the body as a Node.js Buffer instead,\n  // or a special case for FormData since we want request to handle that. Probably it would be\n  // cleaner (and allow a future without request) if we did the form encoding ourself.\n  if (Blob.isImpl(bodyInit)) {\n    return {\n      buffer: bodyInit._buffer,\n      contentType: bodyInit.type === \"\" ? null : bodyInit.type\n    };\n  } else if (bodyInit instanceof ArrayBuffer) {\n    return {\n      buffer: Buffer.from(bodyInit),\n      contentType: null\n    };\n  } else if (ArrayBuffer.isView(bodyInit)) {\n    return {\n      buffer: Buffer.from(bodyInit.buffer, bodyInit.byteOffset, bodyInit.byteLength),\n      contentType: null\n    };\n  } else if (FormData.isImpl(bodyInit)) {\n    const formData = [];\n\n    for (const entry of bodyInit._entries) {\n      let val;\n\n      if (Blob.isImpl(entry.value)) {\n        const blob = entry.value;\n        val = {\n          name: entry.name,\n          value: blob._buffer,\n          options: {\n            filename: blob.name,\n            contentType: blob.type,\n            knownLength: blob.size\n          }\n        };\n      } else {\n        val = entry;\n      }\n\n      formData.push(val);\n    }\n\n    return {\n      formData\n    };\n  } // Must be a string\n\n\n  return {\n    buffer: Buffer.from(bodyInit, \"utf-8\"),\n    contentType: \"text/plain;charset=UTF-8\"\n  };\n}","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/xmlhttprequest.js"],"names":["HTTP_STATUS_CODES","require","STATUS_CODES","spawnSync","URL","whatwgEncoding","tough","MIMEType","conversions","xhrUtils","DOMException","xhrSymbols","addConstants","documentBaseURLSerialized","asciiCaseInsensitiveMatch","idlUtils","Document","Blob","FormData","XMLHttpRequestEventTarget","XMLHttpRequestUpload","domToHtml","setupForSimpleEventAccessors","parseJSONFromBytes","syncWorkerFile","resolve","tokenRegexp","fieldValueRegexp","forbiddenRequestHeaders","Set","forbiddenResponseHeaders","uniqueResponseHeaders","corsSafeResponseHeaders","allowedRequestMethods","forbiddenRequestMethods","XMLHttpRequestResponseType","module","exports","createXMLHttpRequest","window","Event","ProgressEvent","XMLHttpRequest","interface","constructor","theThis","Object","create","new","target","prototype","setup","upload","_ownerDocument","document","flag","synchronous","withCredentials","mimeType","auth","method","undefined","responseType","requestHeaders","referrer","uri","timeout","body","formData","preflight","requestManager","_requestManager","pool","_pool","agentOptions","_agentOptions","strictSSL","_strictSSL","proxy","_proxy","cookieJar","_cookieJar","encoding","_encoding","origin","userAgent","navigator","properties","beforeSend","send","timeoutStart","timeoutId","timeoutFn","client","responseHeaders","filteredResponseHeaders","responseBuffer","responseCache","responseTextCache","responseXMLCache","responseURL","readyState","UNSENT","status","statusText","error","uploadComplete","uploadListener","abortError","bufferStepSize","totalReceivedChunkSize","LOADING","DONE","OPENED","has","response","res","slice","responseText","Uint8Array","buffer","contentType","finalMIMEType","type","responseXML","e","fallbackEncoding","finalCharset","getBOMEncoding","decode","isHTML","isXML","parsed","parse","resText","options","url","lastModified","Date","getResponseHeader","parsingMode","setCookieSync","getCookieStringSync","parseOptions","_parseOptions","resImpl","implForWrapper","_htmlToDom","appendToDocument","close","val","clearTimeout","setTimeout","Math","max","getTime","abort","setResponseToNetworkError","HEADERS_RECEIVED","requestErrorSteps","getAllResponseHeaders","keys","filter","key","indexOf","map","ByteString","toLowerCase","join","header","lcHeader","find","filtered","open","asynchronous","user","password","argumentCount","arguments","length","TypeError","USVString","test","upperCaseMethod","toUpperCase","urlObj","username","pass","href","requestBuffer","requestCache","readyStateChange","overrideMimeType","mime","String","overrideMIMEType","essence","charset","parameters","get","overrideCharset","labelToName","coerceBodyArg","isImpl","_parsingMode","extractBody","Boolean","existingContentType","getRequestHeader","set","updateRequestHeader","toString","_eventListeners","byteLength","flagStr","JSON","stringify","k","v","maxSockets","process","execPath","input","Error","stderr","stdout","data","Buffer","from","CookieJar","deserializeSync","store","dispatchError","contentLength","bufferLength","parseInt","progressObj","lengthComputable","total","loaded","dispatchEvent","createClient","on","err","removeAllListeners","receiveResponse","destUrlObj","request","headers","Referer","Origin","protocol","validCORSHeaders","setDispatchProgressEvents","stateChanged","setRequestHeader","value","normalizeHeaderValue","startsWith","n","defineProperty","Symbol","toStringTag","writable","enumerable","configurable","xhr","readyStateChangeEvent","statusCode","byteOffset","headerMap","rawHeaders","Number","i","kl","acehStr","aceh","trim","split","headerListSeparatorRegexp","push","statusMessage","lastProgressReported","alloc","chunk","tmpBuf","copy","initProgress","req","progress","parsedContentType","replace","ArrayBuffer","isView","impl","bodyInit","_buffer","entry","_entries","blob","name","filename","knownLength","size"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst HTTP_STATUS_CODES = require(\"http\").STATUS_CODES;\nconst { spawnSync } = require(\"child_process\");\nconst { URL } = require(\"whatwg-url\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst tough = require(\"tough-cookie\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst conversions = require(\"webidl-conversions\");\n\nconst xhrUtils = require(\"./xhr-utils\");\nconst DOMException = require(\"domexception\");\nconst xhrSymbols = require(\"./xmlhttprequest-symbols\");\nconst { addConstants } = require(\"../utils\");\nconst { documentBaseURLSerialized } = require(\"./helpers/document-base-url\");\nconst { asciiCaseInsensitiveMatch } = require(\"./helpers/strings\");\nconst idlUtils = require(\"./generated/utils\");\nconst Document = require(\"./generated/Document\");\nconst Blob = require(\"./generated/Blob\");\nconst FormData = require(\"./generated/FormData\");\nconst XMLHttpRequestEventTarget = require(\"./generated/XMLHttpRequestEventTarget\");\nconst XMLHttpRequestUpload = require(\"./generated/XMLHttpRequestUpload\");\nconst { domToHtml } = require(\"../browser/domtohtml\");\nconst { setupForSimpleEventAccessors } = require(\"./helpers/create-event-accessor\");\nconst { parseJSONFromBytes } = require(\"./helpers/json\");\n\nconst syncWorkerFile = require.resolve ? require.resolve(\"./xhr-sync-worker.js\") : null;\n\nconst tokenRegexp = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/;\nconst fieldValueRegexp = /^[ \\t]*(?:[\\x21-\\x7E\\x80-\\xFF](?:[ \\t][\\x21-\\x7E\\x80-\\xFF])?)*[ \\t]*$/;\n\nconst forbiddenRequestHeaders = new Set([\n  \"accept-charset\",\n  \"accept-encoding\",\n  \"access-control-request-headers\",\n  \"access-control-request-method\",\n  \"connection\",\n  \"content-length\",\n  \"cookie\",\n  \"cookie2\",\n  \"date\",\n  \"dnt\",\n  \"expect\",\n  \"host\",\n  \"keep-alive\",\n  \"origin\",\n  \"referer\",\n  \"te\",\n  \"trailer\",\n  \"transfer-encoding\",\n  \"upgrade\",\n  \"via\"\n]);\nconst forbiddenResponseHeaders = new Set([\n  \"set-cookie\",\n  \"set-cookie2\"\n]);\nconst uniqueResponseHeaders = new Set([\n  \"content-type\",\n  \"content-length\",\n  \"user-agent\",\n  \"referer\",\n  \"host\",\n  \"authorization\",\n  \"proxy-authorization\",\n  \"if-modified-since\",\n  \"if-unmodified-since\",\n  \"from\",\n  \"location\",\n  \"max-forwards\"\n]);\nconst corsSafeResponseHeaders = new Set([\n  \"cache-control\",\n  \"content-language\",\n  \"content-type\",\n  \"expires\",\n  \"last-modified\",\n  \"pragma\"\n]);\n\n\nconst allowedRequestMethods = new Set([\"OPTIONS\", \"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\"]);\nconst forbiddenRequestMethods = new Set([\"TRACK\", \"TRACE\", \"CONNECT\"]);\n\nconst XMLHttpRequestResponseType = new Set([\n  \"\",\n  \"arraybuffer\",\n  \"blob\",\n  \"document\",\n  \"json\",\n  \"text\"\n]);\n\nmodule.exports = function createXMLHttpRequest(window) {\n  const { Event, ProgressEvent } = window;\n\n  class XMLHttpRequest extends XMLHttpRequestEventTarget.interface {\n    constructor() { // eslint-disable-line constructor-super\n      const theThis = Object.create(new.target.prototype);\n      XMLHttpRequestEventTarget.setup(theThis);\n      theThis.upload = XMLHttpRequestUpload.create();\n      theThis.upload._ownerDocument = window.document;\n\n      theThis[xhrSymbols.flag] = {\n        synchronous: false,\n        withCredentials: false,\n        mimeType: null,\n        auth: null,\n        method: undefined,\n        responseType: \"\",\n        requestHeaders: {},\n        referrer: theThis._ownerDocument.URL,\n        uri: \"\",\n        timeout: 0,\n        body: undefined,\n        formData: false,\n        preflight: false,\n        requestManager: theThis._ownerDocument._requestManager,\n        pool: theThis._ownerDocument._pool,\n        agentOptions: theThis._ownerDocument._agentOptions,\n        strictSSL: theThis._ownerDocument._strictSSL,\n        proxy: theThis._ownerDocument._proxy,\n        cookieJar: theThis._ownerDocument._cookieJar,\n        encoding: theThis._ownerDocument._encoding,\n        origin: theThis._ownerDocument.origin,\n        userAgent: window.navigator.userAgent\n      };\n\n      theThis[xhrSymbols.properties] = {\n        beforeSend: false,\n        send: false,\n        timeoutStart: 0,\n        timeoutId: 0,\n        timeoutFn: null,\n        client: null,\n        responseHeaders: {},\n        filteredResponseHeaders: [],\n        responseBuffer: null,\n        responseCache: null,\n        responseTextCache: null,\n        responseXMLCache: null,\n        responseURL: \"\",\n        readyState: XMLHttpRequest.UNSENT,\n        status: 0,\n        statusText: \"\",\n        error: \"\",\n        uploadComplete: false,\n        uploadListener: false,\n\n        // Signifies that we're calling abort() from xhr-utils.js because of a window shutdown.\n        // In that case the termination reason is \"fatal\", not \"end-user abort\".\n        abortError: false,\n\n        cookieJar: theThis._ownerDocument._cookieJar,\n        bufferStepSize: 1 * 1024 * 1024, // pre-allocate buffer increase step size. init value is 1MB\n        totalReceivedChunkSize: 0\n      };\n\n      return theThis;\n    }\n\n    get readyState() {\n      return this[xhrSymbols.properties].readyState;\n    }\n    get status() {\n      return this[xhrSymbols.properties].status;\n    }\n    get statusText() {\n      return this[xhrSymbols.properties].statusText;\n    }\n    get responseType() {\n      return this[xhrSymbols.flag].responseType;\n    }\n    set responseType(responseType) {\n      const flag = this[xhrSymbols.flag];\n      if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (this.readyState === XMLHttpRequest.OPENED && flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      if (!XMLHttpRequestResponseType.has(responseType)) {\n        responseType = \"\";\n      }\n      flag.responseType = responseType;\n    }\n    get response() {\n      const properties = this[xhrSymbols.properties];\n      if (properties.responseCache) {\n        return properties.responseCache;\n      }\n      let res = \"\";\n\n      const responseBuffer = properties.responseBuffer ?\n                             properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) :\n                             null;\n\n      switch (this.responseType) {\n        case \"\":\n        case \"text\": {\n          res = this.responseText;\n          break;\n        }\n        case \"arraybuffer\": {\n          if (!responseBuffer) {\n            return null;\n          }\n          res = (new Uint8Array(responseBuffer)).buffer;\n          break;\n        }\n        case \"blob\": {\n          if (!responseBuffer) {\n            return null;\n          }\n          const contentType = finalMIMEType(this);\n          res = Blob.create([\n            [new Uint8Array(responseBuffer)],\n            { type: contentType || \"\" }\n          ]);\n          break;\n        }\n        case \"document\": {\n          res = this.responseXML;\n          break;\n        }\n        case \"json\": {\n          if (this.readyState !== XMLHttpRequest.DONE || !responseBuffer) {\n            res = null;\n          }\n\n          try {\n            res = parseJSONFromBytes(responseBuffer);\n          } catch (e) {\n            res = null;\n          }\n          break;\n        }\n      }\n      properties.responseCache = res;\n      return res;\n    }\n    get responseText() {\n      const properties = this[xhrSymbols.properties];\n      if (this.responseType !== \"\" && this.responseType !== \"text\") {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (this.readyState !== XMLHttpRequest.LOADING && this.readyState !== XMLHttpRequest.DONE) {\n        return \"\";\n      }\n      if (properties.responseTextCache) {\n        return properties.responseTextCache;\n      }\n      const responseBuffer = properties.responseBuffer ?\n                             properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) :\n                             null;\n\n      if (!responseBuffer) {\n        return \"\";\n      }\n\n      const fallbackEncoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n      const res = whatwgEncoding.decode(responseBuffer, fallbackEncoding);\n\n      properties.responseTextCache = res;\n      return res;\n    }\n    get responseXML() {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      if (this.responseType !== \"\" && this.responseType !== \"document\") {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (this.readyState !== XMLHttpRequest.DONE) {\n        return null;\n      }\n      if (properties.responseXMLCache) {\n        return properties.responseXMLCache;\n      }\n      const responseBuffer = properties.responseBuffer ?\n                             properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) :\n                             null;\n\n      if (!responseBuffer) {\n        return null;\n      }\n\n      const contentType = finalMIMEType(this);\n      let isHTML = false;\n      let isXML = false;\n      const parsed = MIMEType.parse(contentType);\n      if (parsed) {\n        isHTML = parsed.isHTML();\n        isXML = parsed.isXML();\n        if (!isXML && !isHTML) {\n          return null;\n        }\n      }\n\n      if (this.responseType === \"\" && isHTML) {\n        return null;\n      }\n\n      const encoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n      const resText = whatwgEncoding.decode(responseBuffer, encoding);\n\n      if (!resText) {\n        return null;\n      }\n      const res = Document.create([], { options: {\n        url: flag.uri,\n        lastModified: new Date(getResponseHeader(this, \"last-modified\")),\n        parsingMode: isHTML ? \"html\" : \"xml\",\n        cookieJar: { setCookieSync: () => undefined, getCookieStringSync: () => \"\" },\n        encoding,\n        parseOptions: this._ownerDocument._parseOptions\n      } });\n      const resImpl = idlUtils.implForWrapper(res);\n      try {\n        resImpl._htmlToDom.appendToDocument(resText, resImpl);\n      } catch (e) {\n        properties.responseXMLCache = null;\n        return null;\n      }\n      res.close();\n      properties.responseXMLCache = res;\n      return res;\n    }\n\n    get responseURL() {\n      return this[xhrSymbols.properties].responseURL;\n    }\n\n    get timeout() {\n      return this[xhrSymbols.flag].timeout;\n    }\n    set timeout(val) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      if (flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      flag.timeout = val;\n      clearTimeout(properties.timeoutId);\n      if (val > 0 && properties.timeoutFn) {\n        properties.timeoutId = setTimeout(\n          properties.timeoutFn,\n          Math.max(0, val - ((new Date()).getTime() - properties.timeoutStart))\n        );\n      } else {\n        properties.timeoutFn = null;\n        properties.timeoutStart = 0;\n      }\n    }\n    get withCredentials() {\n      return this[xhrSymbols.flag].withCredentials;\n    }\n    set withCredentials(val) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      if (!(this.readyState === XMLHttpRequest.UNSENT || this.readyState === XMLHttpRequest.OPENED)) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      flag.withCredentials = val;\n    }\n\n    abort() {\n      const properties = this[xhrSymbols.properties];\n\n      // Terminate the request\n      clearTimeout(properties.timeoutId);\n      properties.timeoutFn = null;\n      properties.timeoutStart = 0;\n\n      const { client } = properties;\n      if (client) {\n        client.abort();\n        properties.client = null;\n      }\n\n      if (properties.abortError) {\n        // Special case that ideally shouldn't be going through the public API at all.\n        // Run the https://xhr.spec.whatwg.org/#handle-errors \"fatal\" steps.\n        properties.readyState = XMLHttpRequest.DONE;\n        properties.send = false;\n        xhrUtils.setResponseToNetworkError(this);\n        return;\n      }\n\n      if ((this.readyState === XMLHttpRequest.OPENED && properties.send) ||\n          this.readyState === XMLHttpRequest.HEADERS_RECEIVED ||\n          this.readyState === XMLHttpRequest.LOADING) {\n        xhrUtils.requestErrorSteps(this, \"abort\");\n      }\n\n      if (this.readyState === XMLHttpRequest.DONE) {\n        properties.readyState = XMLHttpRequest.UNSENT;\n\n        xhrUtils.setResponseToNetworkError(this);\n      }\n    }\n    getAllResponseHeaders() {\n      const properties = this[xhrSymbols.properties];\n      const { readyState } = this;\n      if (readyState === XMLHttpRequest.UNSENT || readyState === XMLHttpRequest.OPENED) {\n        return \"\";\n      }\n      return Object.keys(properties.responseHeaders)\n        .filter(key => properties.filteredResponseHeaders.indexOf(key) === -1)\n        .map(key => [conversions.ByteString(key).toLowerCase(), properties.responseHeaders[key]].join(\": \"))\n        .join(\"\\r\\n\");\n    }\n\n    getResponseHeader(header) {\n      const properties = this[xhrSymbols.properties];\n      const { readyState } = this;\n      if (readyState === XMLHttpRequest.UNSENT || readyState === XMLHttpRequest.OPENED) {\n        return null;\n      }\n      const lcHeader = conversions.ByteString(header).toLowerCase();\n      if (properties.filteredResponseHeaders.find(filtered => lcHeader === filtered.toLowerCase())) {\n        return null;\n      }\n      return getResponseHeader(this, lcHeader);\n    }\n\n    open(method, uri, asynchronous, user, password) {\n      if (!this._ownerDocument) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      const argumentCount = arguments.length;\n      if (argumentCount < 2) {\n        throw new TypeError(\"Not enough arguments (expected at least 2)\");\n      }\n\n      method = conversions.ByteString(method);\n      uri = conversions.USVString(uri);\n      if (user) {\n        user = conversions.USVString(user);\n      }\n      if (password) {\n        password = conversions.USVString(password);\n      }\n\n      if (!tokenRegexp.test(method)) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n      const upperCaseMethod = method.toUpperCase();\n      if (forbiddenRequestMethods.has(upperCaseMethod)) {\n        throw new DOMException(\"The operation is insecure.\", \"SecurityError\");\n      }\n\n      const { client } = properties;\n      if (client && typeof client.abort === \"function\") {\n        client.abort();\n      }\n\n      if (allowedRequestMethods.has(upperCaseMethod)) {\n        method = upperCaseMethod;\n      }\n      if (typeof asynchronous !== \"undefined\") {\n        flag.synchronous = !asynchronous;\n      } else {\n        flag.synchronous = false;\n      }\n      if (flag.responseType && flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      if (flag.synchronous && flag.timeout) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      flag.method = method;\n\n      let urlObj;\n      try {\n        urlObj = new URL(uri, documentBaseURLSerialized(this._ownerDocument));\n      } catch (e) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n\n      if (user || (password && !urlObj.username)) {\n        flag.auth = {\n          user,\n          pass: password\n        };\n        urlObj.username = \"\";\n        urlObj.password = \"\";\n      }\n\n      flag.uri = urlObj.href;\n      flag.requestHeaders = {};\n      flag.preflight = false;\n\n      properties.send = false;\n      properties.uploadListener = false;\n      properties.requestBuffer = null;\n      properties.requestCache = null;\n      properties.abortError = false;\n      properties.responseURL = \"\";\n      readyStateChange(this, XMLHttpRequest.OPENED);\n    }\n\n    overrideMimeType(mime) {\n      mime = String(mime);\n\n      const { readyState } = this;\n      if (readyState === XMLHttpRequest.LOADING || readyState === XMLHttpRequest.DONE) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      this[xhrSymbols.flag].overrideMIMEType = \"application/octet-stream\";\n\n      // Waiting for better spec: https://github.com/whatwg/xhr/issues/157\n      const parsed = MIMEType.parse(mime);\n      if (parsed) {\n        this[xhrSymbols.flag].overrideMIMEType = parsed.essence;\n\n        const charset = parsed.parameters.get(\"charset\");\n        if (charset) {\n          this[xhrSymbols.flag].overrideCharset = whatwgEncoding.labelToName(charset);\n        }\n      }\n    }\n\n    send(body) {\n      body = coerceBodyArg(body);\n\n      // Not per spec, but per tests: https://github.com/whatwg/xhr/issues/65\n      if (!this._ownerDocument) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (this.readyState !== XMLHttpRequest.OPENED || properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      properties.beforeSend = true;\n\n      try {\n        if (flag.method === \"GET\" || flag.method === \"HEAD\") {\n          body = null;\n        }\n\n        if (body !== null) {\n          let encoding = null;\n          let mimeType = null;\n\n          if (Document.isImpl(body)) {\n            encoding = \"UTF-8\";\n            mimeType = (body._parsingMode === \"html\" ? \"text/html\" : \"application/xml\") + \";charset=UTF-8\";\n            flag.body = domToHtml([body]);\n          } else {\n            if (typeof body === \"string\") {\n              encoding = \"UTF-8\";\n            }\n            const { buffer, formData, contentType } = extractBody(body);\n            mimeType = contentType;\n            flag.body = buffer || formData;\n            flag.formData = Boolean(formData);\n          }\n\n          const existingContentType = xhrUtils.getRequestHeader(flag.requestHeaders, \"content-type\");\n          if (mimeType !== null && existingContentType === null) {\n            flag.requestHeaders[\"Content-Type\"] = mimeType;\n          } else if (existingContentType !== null && encoding !== null) {\n            // Waiting for better spec: https://github.com/whatwg/xhr/issues/188. This seems like a good guess at what\n            // the spec will be, in the meantime.\n            const parsed = MIMEType.parse(existingContentType);\n            if (parsed) {\n              const charset = parsed.parameters.get(\"charset\");\n              if (charset && !asciiCaseInsensitiveMatch(charset, encoding) && encoding !== null) {\n                parsed.parameters.set(\"charset\", encoding);\n              }\n              xhrUtils.updateRequestHeader(flag.requestHeaders, \"content-type\", parsed.toString());\n            }\n          }\n        }\n      } finally {\n        if (properties.beforeSend) {\n          properties.beforeSend = false;\n        } else {\n          throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n        }\n      }\n\n      if (Object.keys(idlUtils.implForWrapper(this.upload)._eventListeners).length > 0) {\n        properties.uploadListener = true;\n      }\n\n      // request doesn't like zero-length bodies\n      if (flag.body && flag.body.byteLength === 0) {\n        flag.body = null;\n      }\n\n      if (flag.synchronous) {\n        const flagStr = JSON.stringify(flag, function (k, v) {\n          if (this === flag && k === \"requestManager\") {\n            return null;\n          }\n          if (this === flag && k === \"pool\" && v) {\n            return { maxSockets: v.maxSockets };\n          }\n          return v;\n        });\n        const res = spawnSync(\n          process.execPath,\n          [syncWorkerFile],\n          { input: flagStr }\n        );\n        if (res.status !== 0) {\n          throw new Error(res.stderr.toString());\n        }\n        if (res.error) {\n          if (typeof res.error === \"string\") {\n            res.error = new Error(res.error);\n          }\n          throw res.error;\n        }\n\n        const response = JSON.parse(res.stdout.toString());\n        if (response.properties.responseBuffer && response.properties.responseBuffer.data) {\n          response.properties.responseBuffer = Buffer.from(response.properties.responseBuffer.data);\n        }\n        if (response.properties.cookieJar) {\n          response.properties.cookieJar = tough.CookieJar.deserializeSync(\n            response.properties.cookieJar,\n            this._ownerDocument._cookieJar.store\n          );\n        }\n\n        response.properties.readyState = XMLHttpRequest.LOADING;\n        this[xhrSymbols.properties] = response.properties;\n\n        if (response.properties.error) {\n          xhrUtils.dispatchError(this);\n          throw new DOMException(response.properties.error, \"NetworkError\");\n        } else {\n          const { responseBuffer } = this[xhrSymbols.properties];\n          const contentLength = getResponseHeader(this, \"content-length\") || \"0\";\n          const bufferLength = parseInt(contentLength) || responseBuffer.length;\n          const progressObj = { lengthComputable: false };\n          if (bufferLength !== 0) {\n            progressObj.total = bufferLength;\n            progressObj.loaded = bufferLength;\n            progressObj.lengthComputable = true;\n          }\n          this.dispatchEvent(new ProgressEvent(\"progress\", progressObj));\n          readyStateChange(this, XMLHttpRequest.DONE);\n          this.dispatchEvent(new ProgressEvent(\"load\", progressObj));\n          this.dispatchEvent(new ProgressEvent(\"loadend\", progressObj));\n        }\n      } else {\n        properties.send = true;\n\n        this.dispatchEvent(new ProgressEvent(\"loadstart\"));\n\n        const client = xhrUtils.createClient(this);\n\n        properties.client = client;\n        // For new client, reset totalReceivedChunkSize and bufferStepSize\n        properties.totalReceivedChunkSize = 0;\n        properties.bufferStepSize = 1 * 1024 * 1024;\n\n        properties.origin = flag.origin;\n\n        client.on(\"error\", err => {\n          client.removeAllListeners();\n          properties.error = err;\n          xhrUtils.dispatchError(this);\n        });\n\n        client.on(\"response\", res => receiveResponse(this, res));\n\n        client.on(\"redirect\", () => {\n          const { response } = client;\n          const destUrlObj = new URL(response.request.headers.Referer);\n\n          const urlObj = new URL(response.request.uri.href);\n\n          if (destUrlObj.origin !== urlObj.origin && destUrlObj.origin !== flag.origin) {\n            properties.origin = \"null\";\n          }\n\n          response.request.headers.Origin = properties.origin;\n\n          if (flag.origin !== destUrlObj.origin &&\n              destUrlObj.protocol !== \"data:\") {\n            if (!xhrUtils.validCORSHeaders(this, response, flag, properties, flag.origin)) {\n              return;\n            }\n            if (urlObj.username || urlObj.password) {\n              properties.error = \"Userinfo forbidden in cors redirect\";\n              xhrUtils.dispatchError(this);\n            }\n          }\n        });\n        if (body !== null && body !== \"\") {\n          properties.uploadComplete = false;\n          setDispatchProgressEvents(this);\n        } else {\n          properties.uploadComplete = true;\n        }\n        if (this.timeout > 0) {\n          properties.timeoutStart = (new Date()).getTime();\n          properties.timeoutFn = () => {\n            client.abort();\n            if (!(this.readyState === XMLHttpRequest.UNSENT ||\n                (this.readyState === XMLHttpRequest.OPENED && !properties.send) ||\n                this.readyState === XMLHttpRequest.DONE)) {\n              properties.send = false;\n              let stateChanged = false;\n              if (!properties.uploadComplete) {\n                this.upload.dispatchEvent(new ProgressEvent(\"progress\"));\n                readyStateChange(this, XMLHttpRequest.DONE);\n                this.upload.dispatchEvent(new ProgressEvent(\"timeout\"));\n                this.upload.dispatchEvent(new ProgressEvent(\"loadend\"));\n                stateChanged = true;\n              }\n              this.dispatchEvent(new ProgressEvent(\"progress\"));\n              if (!stateChanged) {\n                readyStateChange(this, XMLHttpRequest.DONE);\n              }\n              this.dispatchEvent(new ProgressEvent(\"timeout\"));\n              this.dispatchEvent(new ProgressEvent(\"loadend\"));\n            }\n            properties.readyState = XMLHttpRequest.UNSENT;\n          };\n          properties.timeoutId = setTimeout(properties.timeoutFn, this.timeout);\n        }\n      }\n      flag.body = undefined;\n      flag.formData = false;\n    }\n\n    setRequestHeader(header, value) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (arguments.length !== 2) {\n        throw new TypeError(\"2 arguments required for setRequestHeader\");\n      }\n      header = conversions.ByteString(header);\n      value = conversions.ByteString(value);\n\n      if (this.readyState !== XMLHttpRequest.OPENED || properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      value = normalizeHeaderValue(value);\n\n      if (!tokenRegexp.test(header) || !fieldValueRegexp.test(value)) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n\n      const lcHeader = header.toLowerCase();\n\n      if (forbiddenRequestHeaders.has(lcHeader) || lcHeader.startsWith(\"sec-\") || lcHeader.startsWith(\"proxy-\")) {\n        return;\n      }\n\n      const keys = Object.keys(flag.requestHeaders);\n      let n = keys.length;\n      while (n--) {\n        const key = keys[n];\n        if (key.toLowerCase() === lcHeader) {\n          flag.requestHeaders[key] += \", \" + value;\n          return;\n        }\n      }\n      flag.requestHeaders[header] = value;\n    }\n\n    get _ownerDocument() {\n      return idlUtils.implForWrapper(window.document);\n    }\n  }\n\n  Object.defineProperty(XMLHttpRequest.prototype, Symbol.toStringTag, {\n    value: \"XMLHttpRequest\",\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n\n  setupForSimpleEventAccessors(XMLHttpRequest.prototype, [\"readystatechange\"]);\n\n  addConstants(XMLHttpRequest, {\n    UNSENT: 0,\n    OPENED: 1,\n    HEADERS_RECEIVED: 2,\n    LOADING: 3,\n    DONE: 4\n  });\n\n  function readyStateChange(xhr, readyState) {\n    const properties = xhr[xhrSymbols.properties];\n    if (properties.readyState === readyState) {\n      return;\n    }\n\n    properties.readyState = readyState;\n\n    const readyStateChangeEvent = new Event(\"readystatechange\");\n    xhr.dispatchEvent(readyStateChangeEvent);\n  }\n\n  function receiveResponse(xhr, response) {\n    const properties = xhr[xhrSymbols.properties];\n    const flag = xhr[xhrSymbols.flag];\n\n    const { statusCode } = response;\n\n    let byteOffset = 0;\n\n    const headers = {};\n    const filteredResponseHeaders = [];\n    const headerMap = {};\n    const { rawHeaders } = response;\n    const n = Number(rawHeaders.length);\n    for (let i = 0; i < n; i += 2) {\n      const k = rawHeaders[i];\n      const kl = k.toLowerCase();\n      const v = rawHeaders[i + 1];\n      if (uniqueResponseHeaders.has(kl)) {\n        if (headerMap[kl] !== undefined) {\n          delete headers[headerMap[kl]];\n        }\n        headers[k] = v;\n      } else if (headerMap[kl] !== undefined) {\n        headers[headerMap[kl]] += \", \" + v;\n      } else {\n        headers[k] = v;\n      }\n      headerMap[kl] = k;\n    }\n\n    const destUrlObj = new URL(response.request.uri.href);\n    if (properties.origin !== destUrlObj.origin &&\n        destUrlObj.protocol !== \"data:\") {\n      if (!xhrUtils.validCORSHeaders(xhr, response, flag, properties, properties.origin)) {\n        return;\n      }\n      const acehStr = response.headers[\"access-control-expose-headers\"];\n      const aceh = new Set(acehStr ? acehStr.trim().toLowerCase().split(xhrUtils.headerListSeparatorRegexp) : []);\n      for (const header in headers) {\n        const lcHeader = header.toLowerCase();\n        if (!corsSafeResponseHeaders.has(lcHeader) && !aceh.has(lcHeader)) {\n          filteredResponseHeaders.push(header);\n        }\n      }\n    }\n\n    for (const header in headers) {\n      const lcHeader = header.toLowerCase();\n      if (forbiddenResponseHeaders.has(lcHeader)) {\n        filteredResponseHeaders.push(header);\n      }\n    }\n\n    properties.responseURL = destUrlObj.href;\n\n    properties.status = statusCode;\n    properties.statusText = response.statusMessage || HTTP_STATUS_CODES[statusCode] || \"\";\n\n    properties.responseHeaders = headers;\n    properties.filteredResponseHeaders = filteredResponseHeaders;\n\n    const contentLength = getResponseHeader(xhr, \"content-length\") || \"0\";\n    const bufferLength = parseInt(contentLength) || 0;\n    const progressObj = { lengthComputable: false };\n    let lastProgressReported;\n    if (bufferLength !== 0) {\n      progressObj.total = bufferLength;\n      progressObj.loaded = 0;\n      progressObj.lengthComputable = true;\n    }\n    // pre-allocate buffer.\n    properties.responseBuffer = Buffer.alloc(properties.bufferStepSize);\n    properties.responseCache = null;\n    properties.responseTextCache = null;\n    properties.responseXMLCache = null;\n    readyStateChange(xhr, XMLHttpRequest.HEADERS_RECEIVED);\n\n    if (!properties.client) {\n      // The request was aborted in reaction to the readystatechange event.\n      return;\n    }\n\n    // Can't use the client since the client gets the post-ungzipping bytes (which can be greater than the\n    // Content-Length).\n    response.on(\"data\", chunk => {\n      byteOffset += chunk.length;\n      progressObj.loaded = byteOffset;\n    });\n\n    properties.client.on(\"data\", chunk => {\n      properties.totalReceivedChunkSize += chunk.length;\n      if (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n        properties.bufferStepSize *= 2;\n        while (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n          properties.bufferStepSize *= 2;\n        }\n        const tmpBuf = Buffer.alloc(properties.bufferStepSize);\n        properties.responseBuffer.copy(tmpBuf, 0, 0, properties.responseBuffer.length);\n        properties.responseBuffer = tmpBuf;\n      }\n      chunk.copy(properties.responseBuffer, properties.totalReceivedChunkSize - chunk.length, 0, chunk.length);\n      properties.responseCache = null;\n      properties.responseTextCache = null;\n      properties.responseXMLCache = null;\n\n      if (properties.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n        properties.readyState = XMLHttpRequest.LOADING;\n      }\n      xhr.dispatchEvent(new Event(\"readystatechange\"));\n\n      if (progressObj.total !== progressObj.loaded || properties.totalReceivedChunkSize === byteOffset) {\n        if (lastProgressReported !== progressObj.loaded) {\n          // This is a necessary check in the gzip case where we can be getting new data from the client, as it\n          // un-gzips, but no new data has been gotten from the response, so we should not fire a progress event.\n          lastProgressReported = progressObj.loaded;\n          xhr.dispatchEvent(new ProgressEvent(\"progress\", progressObj));\n        }\n      }\n    });\n    properties.client.on(\"end\", () => {\n      clearTimeout(properties.timeoutId);\n      properties.timeoutFn = null;\n      properties.timeoutStart = 0;\n      properties.client = null;\n      xhr.dispatchEvent(new ProgressEvent(\"progress\", progressObj));\n      readyStateChange(xhr, XMLHttpRequest.DONE);\n      xhr.dispatchEvent(new ProgressEvent(\"load\", progressObj));\n      xhr.dispatchEvent(new ProgressEvent(\"loadend\", progressObj));\n    });\n  }\n\n  function setDispatchProgressEvents(xhr) {\n    const properties = xhr[xhrSymbols.properties];\n    const { client } = properties;\n    const { upload } = xhr;\n\n    let total = 0;\n    let lengthComputable = false;\n    const length = client.headers && parseInt(xhrUtils.getRequestHeader(client.headers, \"content-length\"));\n    if (length) {\n      total = length;\n      lengthComputable = true;\n    }\n    const initProgress = {\n      lengthComputable,\n      total,\n      loaded: 0\n    };\n\n    if (properties.uploadListener) {\n      upload.dispatchEvent(new ProgressEvent(\"loadstart\", initProgress));\n    }\n\n    client.on(\"request\", req => {\n      req.on(\"response\", () => {\n        properties.uploadComplete = true;\n\n        if (!properties.uploadListener) {\n          return;\n        }\n\n        const progress = {\n          lengthComputable,\n          total,\n          loaded: total\n        };\n        upload.dispatchEvent(new ProgressEvent(\"progress\", progress));\n        upload.dispatchEvent(new ProgressEvent(\"load\", progress));\n        upload.dispatchEvent(new ProgressEvent(\"loadend\", progress));\n      });\n    });\n  }\n\n  return XMLHttpRequest;\n};\n\nfunction finalMIMEType(xhr) {\n  const flag = xhr[xhrSymbols.flag];\n  return flag.overrideMIMEType || getResponseHeader(xhr, \"content-type\");\n}\n\nfunction finalCharset(xhr) {\n  const flag = xhr[xhrSymbols.flag];\n  if (flag.overrideCharset) {\n    return flag.overrideCharset;\n  }\n  const parsedContentType = MIMEType.parse(getResponseHeader(xhr, \"content-type\"));\n  if (parsedContentType) {\n    return whatwgEncoding.labelToName(parsedContentType.parameters.get(\"charset\"));\n  }\n  return null;\n}\n\nfunction getResponseHeader(xhr, lcHeader) {\n  const properties = xhr[xhrSymbols.properties];\n  const keys = Object.keys(properties.responseHeaders);\n  let n = keys.length;\n  while (n--) {\n    const key = keys[n];\n    if (key.toLowerCase() === lcHeader) {\n      return properties.responseHeaders[key];\n    }\n  }\n  return null;\n}\n\nfunction normalizeHeaderValue(value) {\n  return value.replace(/^[\\x09\\x0A\\x0D\\x20]+/, \"\").replace(/[\\x09\\x0A\\x0D\\x20]+$/, \"\");\n}\n\nfunction coerceBodyArg(body) {\n  // Implements the IDL conversion for `optional (Document or BodyInit)? body = null`\n\n  if (body === undefined || body === null) {\n    return null;\n  }\n\n  if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {\n    return body;\n  }\n\n  const impl = idlUtils.implForWrapper(body);\n  if (impl) {\n    // TODO: allow URLSearchParams or ReadableStream\n    if (Blob.isImpl(impl) || FormData.isImpl(impl) || Document.isImpl(impl)) {\n      return impl;\n    }\n  }\n\n  return conversions.USVString(body);\n}\n\nfunction extractBody(bodyInit) {\n  // https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n  // except we represent the body as a Node.js Buffer instead,\n  // or a special case for FormData since we want request to handle that. Probably it would be\n  // cleaner (and allow a future without request) if we did the form encoding ourself.\n\n  if (Blob.isImpl(bodyInit)) {\n    return {\n      buffer: bodyInit._buffer,\n      contentType: bodyInit.type === \"\" ? null : bodyInit.type\n    };\n  } else if (bodyInit instanceof ArrayBuffer) {\n    return {\n      buffer: Buffer.from(bodyInit),\n      contentType: null\n    };\n  } else if (ArrayBuffer.isView(bodyInit)) {\n    return {\n      buffer: Buffer.from(bodyInit.buffer, bodyInit.byteOffset, bodyInit.byteLength),\n      contentType: null\n    };\n  } else if (FormData.isImpl(bodyInit)) {\n    const formData = [];\n    for (const entry of bodyInit._entries) {\n      let val;\n      if (Blob.isImpl(entry.value)) {\n        const blob = entry.value;\n        val = {\n          name: entry.name,\n          value: blob._buffer,\n          options: {\n            filename: blob.name,\n            contentType: blob.type,\n            knownLength: blob.size\n          }\n        };\n      } else {\n        val = entry;\n      }\n\n      formData.push(val);\n    }\n\n    return { formData };\n  }\n\n  // Must be a string\n  return {\n    buffer: Buffer.from(bodyInit, \"utf-8\"),\n    contentType: \"text/plain;charset=UTF-8\"\n  };\n}\n"]},"metadata":{},"sourceType":"script"}