{"ast":null,"code":"\"use strict\";\n\nconst vm = require(\"vm\");\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  reflectURLAttribute\n} = require(\"../../utils\");\n\nconst resourceLoader = require(\"../../browser/resource-loader\");\n\nconst reportException = require(\"../helpers/runtime-script-errors\");\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  asciiLowercase\n} = require(\"../helpers/strings\");\n\nconst {\n  childTextContent\n} = require(\"../helpers/text\");\n\nconst nodeTypes = require(\"../node-type\");\n\nconst jsMIMETypes = new Set([\"application/ecmascript\", \"application/javascript\", \"application/x-ecmascript\", \"application/x-javascript\", \"text/ecmascript\", \"text/javascript\", \"text/javascript1.0\", \"text/javascript1.1\", \"text/javascript1.2\", \"text/javascript1.3\", \"text/javascript1.4\", \"text/javascript1.5\", \"text/jscript\", \"text/livescript\", \"text/x-ecmascript\", \"text/x-javascript\"]);\n\nclass HTMLScriptElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._alreadyStarted = false;\n    this._parserInserted = false; // set by the parser\n  }\n\n  _attach() {\n    super._attach(); // In our current terribly-hacky document.write() implementation, we parse in a div them move elements into the main\n    // document. Thus _eval() will bail early when it gets in _poppedOffStackOfOpenElements(), since we're not attached\n    // then. Instead, we'll let it eval here.\n\n\n    if (!this._parserInserted || this._isMovingDueToDocumentWrite) {\n      this._eval();\n    }\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (this._attached && !this._startedEval && name === \"src\" && oldValue === null && value !== null) {\n      resourceLoader.load(this, this.src, {\n        defaultEncoding: whatwgEncoding.labelToName(this.getAttribute(\"charset\")) || this._ownerDocument._encoding\n      }, this._innerEval);\n    }\n  }\n\n  _poppedOffStackOfOpenElements() {\n    // This seems to roughly correspond to\n    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-incdata:prepare-a-script, although we certainly\n    // don't implement the full semantics.\n    this._eval();\n  } // Vaguely similar to https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script, but we have a long way\n  // to go before it's aligned.\n\n\n  _eval() {\n    if (this._alreadyStarted) {\n      return;\n    } // TODO: this text check doesn't seem completely the same as the spec, which e.g. will try to execute scripts with\n    // child element nodes. Spec bug? https://github.com/whatwg/html/issues/3419\n\n\n    if (!this.hasAttribute(\"src\") && this.text.length === 0) {\n      return;\n    }\n\n    if (!this._attached) {\n      return;\n    }\n\n    const scriptBlocksTypeString = this._getTypeString();\n\n    const type = getType(scriptBlocksTypeString);\n\n    if (type !== \"classic\") {\n      // TODO: implement modules, and then change the check to `type === null`.\n      return;\n    }\n\n    this._alreadyStarted = true; // Equivalent to the spec's \"scripting is disabled\" check.\n\n    if (!this._ownerDocument._defaultView || this._ownerDocument._defaultView._runScripts !== \"dangerously\") {\n      return;\n    } // TODO: implement nomodule here, **but only after we support modules**.\n    // At this point we completely depart from the spec.\n\n\n    if (this.hasAttribute(\"src\")) {\n      resourceLoader.load(this, this.src, {\n        defaultEncoding: whatwgEncoding.labelToName(this.getAttribute(\"charset\")) || this._ownerDocument._encoding\n      }, this._innerEval);\n    } else {\n      resourceLoader.enqueue(this, this._ownerDocument.URL, this._innerEval)(null, this.text);\n    }\n  }\n\n  _innerEval(text, filename) {\n    this._ownerDocument._writeAfterElement = this;\n    processJavaScript(this, text, filename);\n    delete this._ownerDocument._writeAfterElement;\n  }\n\n  _getTypeString() {\n    const typeAttr = this.getAttribute(\"type\");\n    const langAttr = this.getAttribute(\"language\");\n\n    if (typeAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === null) {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr !== null) {\n      return typeAttr.trim();\n    }\n\n    if (langAttr !== null) {\n      return \"text/\" + langAttr;\n    }\n\n    return null;\n  }\n\n  get text() {\n    return childTextContent(this);\n  }\n\n  set text(text) {\n    this.textContent = text;\n  }\n\n  get src() {\n    return reflectURLAttribute(this, \"src\");\n  }\n\n  set src(V) {\n    this.setAttribute(\"src\", V);\n  }\n\n}\n\nfunction processJavaScript(element, code, filename) {\n  const document = element.ownerDocument;\n  const window = document && document._global;\n\n  if (window) {\n    document._currentScript = element;\n    let lineOffset = 0;\n\n    if (!element.src) {\n      for (const child of domSymbolTree.childrenIterator(element)) {\n        if (child.nodeType === nodeTypes.TEXT_NODE) {\n          if (child.__location) {\n            lineOffset = child.__location.line - 1;\n          }\n\n          break;\n        }\n      }\n    }\n\n    try {\n      vm.runInContext(code, window, {\n        filename,\n        lineOffset,\n        displayErrors: false\n      });\n    } catch (e) {\n      reportException(window, e, filename);\n    } finally {\n      document._currentScript = null;\n    }\n  }\n}\n\nfunction getType(typeString) {\n  const lowercased = asciiLowercase(typeString); // Cannot use whatwg-mimetype parsing because that strips whitespace. The spec demands a strict string comparison.\n  // That is, the type=\"\" attribute is not really related to MIME types at all.\n\n  if (jsMIMETypes.has(lowercased)) {\n    return \"classic\";\n  }\n\n  if (lowercased === \"module\") {\n    return \"module\";\n  }\n\n  return null;\n}\n\nmodule.exports = {\n  implementation: HTMLScriptElementImpl\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLScriptElement-impl.js"],"names":["vm","require","whatwgEncoding","HTMLElementImpl","implementation","reflectURLAttribute","resourceLoader","reportException","domSymbolTree","asciiLowercase","childTextContent","nodeTypes","jsMIMETypes","Set","HTMLScriptElementImpl","constructor","args","privateData","_alreadyStarted","_parserInserted","_attach","_isMovingDueToDocumentWrite","_eval","_attrModified","name","value","oldValue","_attached","_startedEval","load","src","defaultEncoding","labelToName","getAttribute","_ownerDocument","_encoding","_innerEval","_poppedOffStackOfOpenElements","hasAttribute","text","length","scriptBlocksTypeString","_getTypeString","type","getType","_defaultView","_runScripts","enqueue","URL","filename","_writeAfterElement","processJavaScript","typeAttr","langAttr","trim","textContent","V","setAttribute","element","code","document","ownerDocument","window","_global","_currentScript","lineOffset","child","childrenIterator","nodeType","TEXT_NODE","__location","line","runInContext","displayErrors","e","typeString","lowercased","has","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst vm = require(\"vm\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { reflectURLAttribute } = require(\"../../utils\");\nconst resourceLoader = require(\"../../browser/resource-loader\");\nconst reportException = require(\"../helpers/runtime-script-errors\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { asciiLowercase } = require(\"../helpers/strings\");\nconst { childTextContent } = require(\"../helpers/text\");\nconst nodeTypes = require(\"../node-type\");\n\nconst jsMIMETypes = new Set([\n  \"application/ecmascript\",\n  \"application/javascript\",\n  \"application/x-ecmascript\",\n  \"application/x-javascript\",\n  \"text/ecmascript\",\n  \"text/javascript\",\n  \"text/javascript1.0\",\n  \"text/javascript1.1\",\n  \"text/javascript1.2\",\n  \"text/javascript1.3\",\n  \"text/javascript1.4\",\n  \"text/javascript1.5\",\n  \"text/jscript\",\n  \"text/livescript\",\n  \"text/x-ecmascript\",\n  \"text/x-javascript\"\n]);\n\nclass HTMLScriptElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._alreadyStarted = false;\n    this._parserInserted = false; // set by the parser\n  }\n\n  _attach() {\n    super._attach();\n\n\n    // In our current terribly-hacky document.write() implementation, we parse in a div them move elements into the main\n    // document. Thus _eval() will bail early when it gets in _poppedOffStackOfOpenElements(), since we're not attached\n    // then. Instead, we'll let it eval here.\n    if (!this._parserInserted || this._isMovingDueToDocumentWrite) {\n      this._eval();\n    }\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (this._attached && !this._startedEval && name === \"src\" && oldValue === null && value !== null) {\n      resourceLoader.load(\n        this,\n        this.src,\n        { defaultEncoding: whatwgEncoding.labelToName(this.getAttribute(\"charset\")) || this._ownerDocument._encoding },\n        this._innerEval\n      );\n    }\n  }\n\n  _poppedOffStackOfOpenElements() {\n    // This seems to roughly correspond to\n    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-incdata:prepare-a-script, although we certainly\n    // don't implement the full semantics.\n    this._eval();\n  }\n\n  // Vaguely similar to https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script, but we have a long way\n  // to go before it's aligned.\n  _eval() {\n    if (this._alreadyStarted) {\n      return;\n    }\n\n    // TODO: this text check doesn't seem completely the same as the spec, which e.g. will try to execute scripts with\n    // child element nodes. Spec bug? https://github.com/whatwg/html/issues/3419\n    if (!this.hasAttribute(\"src\") && this.text.length === 0) {\n      return;\n    }\n\n    if (!this._attached) {\n      return;\n    }\n\n    const scriptBlocksTypeString = this._getTypeString();\n    const type = getType(scriptBlocksTypeString);\n\n    if (type !== \"classic\") {\n      // TODO: implement modules, and then change the check to `type === null`.\n      return;\n    }\n\n    this._alreadyStarted = true;\n\n    // Equivalent to the spec's \"scripting is disabled\" check.\n    if (!this._ownerDocument._defaultView || this._ownerDocument._defaultView._runScripts !== \"dangerously\") {\n      return;\n    }\n\n    // TODO: implement nomodule here, **but only after we support modules**.\n\n    // At this point we completely depart from the spec.\n\n    if (this.hasAttribute(\"src\")) {\n      resourceLoader.load(\n        this,\n        this.src,\n        { defaultEncoding: whatwgEncoding.labelToName(this.getAttribute(\"charset\")) || this._ownerDocument._encoding },\n        this._innerEval\n      );\n    } else {\n      resourceLoader.enqueue(this, this._ownerDocument.URL, this._innerEval)(null, this.text);\n    }\n  }\n\n  _innerEval(text, filename) {\n    this._ownerDocument._writeAfterElement = this;\n    processJavaScript(this, text, filename);\n    delete this._ownerDocument._writeAfterElement;\n  }\n\n  _getTypeString() {\n    const typeAttr = this.getAttribute(\"type\");\n    const langAttr = this.getAttribute(\"language\");\n\n    if (typeAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === null) {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr !== null) {\n      return typeAttr.trim();\n    }\n\n    if (langAttr !== null) {\n      return \"text/\" + langAttr;\n    }\n\n    return null;\n  }\n\n  get text() {\n    return childTextContent(this);\n  }\n\n  set text(text) {\n    this.textContent = text;\n  }\n\n  get src() {\n    return reflectURLAttribute(this, \"src\");\n  }\n\n  set src(V) {\n    this.setAttribute(\"src\", V);\n  }\n}\n\nfunction processJavaScript(element, code, filename) {\n  const document = element.ownerDocument;\n  const window = document && document._global;\n\n  if (window) {\n    document._currentScript = element;\n\n    let lineOffset = 0;\n    if (!element.src) {\n      for (const child of domSymbolTree.childrenIterator(element)) {\n        if (child.nodeType === nodeTypes.TEXT_NODE) {\n          if (child.__location) {\n            lineOffset = child.__location.line - 1;\n          }\n          break;\n        }\n      }\n    }\n\n    try {\n      vm.runInContext(code, window, { filename, lineOffset, displayErrors: false });\n    } catch (e) {\n      reportException(window, e, filename);\n    } finally {\n      document._currentScript = null;\n    }\n  }\n}\n\nfunction getType(typeString) {\n  const lowercased = asciiLowercase(typeString);\n  // Cannot use whatwg-mimetype parsing because that strips whitespace. The spec demands a strict string comparison.\n  // That is, the type=\"\" attribute is not really related to MIME types at all.\n  if (jsMIMETypes.has(lowercased)) {\n    return \"classic\";\n  }\n  if (lowercased === \"module\") {\n    return \"module\";\n  }\n  return null;\n}\n\nmodule.exports = {\n  implementation: HTMLScriptElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}