{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  stripAndCollapseASCIIWhitespace\n} = require(\"../helpers/strings\");\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  closest\n} = require(\"../helpers/traversal\");\n\nclass HTMLOptionElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData); // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n\n    this._selectedness = false;\n    this._dirtyness = false;\n  }\n\n  _removeOtherSelectedness() {\n    // Remove the selectedness flag from all other options in this select\n    const select = this._selectNode;\n\n    if (select && !select.hasAttribute(\"multiple\")) {\n      for (const option of select.options) {\n        if (option !== this) {\n          option._selectedness = false;\n        }\n      }\n    }\n  }\n\n  _askForAReset() {\n    const select = this._selectNode;\n\n    if (select) {\n      select._askedForAReset();\n    }\n  }\n\n  _attrModified(name) {\n    if (!this._dirtyness && name === \"selected\") {\n      this._selectedness = this.hasAttribute(\"selected\");\n\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n\n      this._askForAReset();\n    }\n\n    super._attrModified.apply(this, arguments);\n  }\n\n  get _selectNode() {\n    let select = domSymbolTree.parent(this);\n\n    if (!select) {\n      return null;\n    }\n\n    if (select.nodeName.toUpperCase() !== \"SELECT\") {\n      select = domSymbolTree.parent(select);\n\n      if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n        return null;\n      }\n    }\n\n    return select;\n  }\n\n  get form() {\n    return closest(this, \"form\");\n  }\n\n  get text() {\n    // TODO is not correctly excluding script and SVG script descendants\n    return stripAndCollapseASCIIWhitespace(this.textContent);\n  }\n\n  set text(V) {\n    this.textContent = V;\n  }\n\n  get value() {\n    return this.hasAttribute(\"value\") ? this.getAttribute(\"value\") : this.text;\n  }\n\n  set value(val) {\n    this.setAttribute(\"value\", val);\n  }\n\n  get index() {\n    const select = closest(this, \"select\");\n\n    if (select === null) {\n      return 0;\n    }\n\n    return select.options.indexOf(this);\n  }\n\n  get selected() {\n    return this._selectedness;\n  }\n\n  set selected(s) {\n    this._dirtyness = true;\n    this._selectedness = Boolean(s);\n\n    if (this._selectedness) {\n      this._removeOtherSelectedness();\n    }\n\n    this._askForAReset();\n  } // TODO this is quite wrong\n\n\n  get label() {\n    if (this.hasAttribute(\"label\")) {\n      return this.getAttribute(\"label\");\n    }\n\n    const select = this._selectNode;\n\n    if (select) {\n      return select.getAttribute(\"label\");\n    }\n\n    return null;\n  }\n\n  set label(V) {\n    const select = this._selectNode;\n\n    if (select) {\n      select.setAttribute(\"label\", V);\n    }\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOptionElement-impl.js"],"names":["HTMLElementImpl","require","implementation","stripAndCollapseASCIIWhitespace","domSymbolTree","closest","HTMLOptionElementImpl","constructor","args","privateData","_selectedness","_dirtyness","_removeOtherSelectedness","select","_selectNode","hasAttribute","option","options","_askForAReset","_askedForAReset","_attrModified","name","apply","arguments","parent","nodeName","toUpperCase","form","text","textContent","V","value","getAttribute","val","setAttribute","index","indexOf","selected","s","Boolean","label","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { stripAndCollapseASCIIWhitespace } = require(\"../helpers/strings\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { closest } = require(\"../helpers/traversal\");\n\nclass HTMLOptionElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n    this._selectedness = false;\n    this._dirtyness = false;\n  }\n  _removeOtherSelectedness() {\n    // Remove the selectedness flag from all other options in this select\n    const select = this._selectNode;\n\n    if (select && !select.hasAttribute(\"multiple\")) {\n      for (const option of select.options) {\n        if (option !== this) {\n          option._selectedness = false;\n        }\n      }\n    }\n  }\n  _askForAReset() {\n    const select = this._selectNode;\n    if (select) {\n      select._askedForAReset();\n    }\n  }\n  _attrModified(name) {\n    if (!this._dirtyness && name === \"selected\") {\n      this._selectedness = this.hasAttribute(\"selected\");\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n      this._askForAReset();\n    }\n    super._attrModified.apply(this, arguments);\n  }\n  get _selectNode() {\n    let select = domSymbolTree.parent(this);\n    if (!select) {\n      return null;\n    }\n\n    if (select.nodeName.toUpperCase() !== \"SELECT\") {\n      select = domSymbolTree.parent(select);\n      if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n        return null;\n      }\n    }\n    return select;\n  }\n  get form() {\n    return closest(this, \"form\");\n  }\n  get text() {\n    // TODO is not correctly excluding script and SVG script descendants\n    return stripAndCollapseASCIIWhitespace(this.textContent);\n  }\n  set text(V) {\n    this.textContent = V;\n  }\n\n  get value() {\n    return this.hasAttribute(\"value\") ? this.getAttribute(\"value\") : this.text;\n  }\n  set value(val) {\n    this.setAttribute(\"value\", val);\n  }\n  get index() {\n    const select = closest(this, \"select\");\n    if (select === null) {\n      return 0;\n    }\n\n    return select.options.indexOf(this);\n  }\n  get selected() {\n    return this._selectedness;\n  }\n  set selected(s) {\n    this._dirtyness = true;\n    this._selectedness = Boolean(s);\n    if (this._selectedness) {\n      this._removeOtherSelectedness();\n    }\n    this._askForAReset();\n  }\n\n  // TODO this is quite wrong\n  get label() {\n    if (this.hasAttribute(\"label\")) {\n      return this.getAttribute(\"label\");\n    }\n    const select = this._selectNode;\n    if (select) {\n      return select.getAttribute(\"label\");\n    }\n    return null;\n  }\n\n  set label(V) {\n    const select = this._selectNode;\n    if (select) {\n      select.setAttribute(\"label\", V);\n    }\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}