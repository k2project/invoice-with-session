{"ast":null,"code":"\"use strict\";\n\nconst Document = require(\"../generated/Document\");\n\nconst {\n  applyDocumentFeatures\n} = require(\"../../browser/documentfeatures\");\n\nexports.implementation = class DOMParserImpl {\n  parseFromString(string, contentType) {\n    switch (String(contentType)) {\n      case \"text/html\":\n        {\n          return createScriptingDisabledDocument(\"html\", contentType, string);\n        }\n\n      case \"text/xml\":\n      case \"application/xml\":\n      case \"application/xhtml+xml\":\n      case \"image/svg+xml\":\n        {\n          // TODO: use a strict XML parser (sax's strict mode might work?) and create parsererror elements\n          try {\n            return createScriptingDisabledDocument(\"xml\", contentType, string);\n          } catch (error) {\n            const document = createScriptingDisabledDocument(\"xml\", contentType);\n            const element = document.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\n            element.textContent = error.message;\n            document.appendChild(element);\n            return document;\n          }\n        }\n\n      default:\n        throw new TypeError(\"Invalid contentType\");\n    }\n  }\n\n};\n\nfunction createScriptingDisabledDocument(parsingMode, contentType, string) {\n  const document = Document.createImpl([], {\n    options: {\n      parsingMode,\n      encoding: \"UTF-8\",\n      contentType // TODO: somehow set URL to active document's URL\n\n    }\n  }); // \"scripting enabled\" set to false\n\n  applyDocumentFeatures(document, {\n    FetchExternalResources: [],\n    SkipExternalResources: false\n  });\n\n  if (string !== undefined) {\n    document._htmlToDom.appendToDocument(string, document);\n  }\n\n  document.close();\n  return document;\n}","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/domparsing/DOMParser-impl.js"],"names":["Document","require","applyDocumentFeatures","exports","implementation","DOMParserImpl","parseFromString","string","contentType","String","createScriptingDisabledDocument","error","document","element","createElementNS","textContent","message","appendChild","TypeError","parsingMode","createImpl","options","encoding","FetchExternalResources","SkipExternalResources","undefined","_htmlToDom","appendToDocument","close"],"mappings":"AAAA;;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,uBAAD,CAAxB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA4BD,OAAO,CAAC,gCAAD,CAAzC;;AAEAE,OAAO,CAACC,cAAR,GAAyB,MAAMC,aAAN,CAAoB;AAC3CC,EAAAA,eAAe,CAACC,MAAD,EAASC,WAAT,EAAsB;AACnC,YAAQC,MAAM,CAACD,WAAD,CAAd;AACE,WAAK,WAAL;AAAkB;AAChB,iBAAOE,+BAA+B,CAAC,MAAD,EAASF,WAAT,EAAsBD,MAAtB,CAAtC;AACD;;AAED,WAAK,UAAL;AACA,WAAK,iBAAL;AACA,WAAK,uBAAL;AACA,WAAK,eAAL;AAAsB;AACpB;AACA,cAAI;AACF,mBAAOG,+BAA+B,CAAC,KAAD,EAAQF,WAAR,EAAqBD,MAArB,CAAtC;AACD,WAFD,CAEE,OAAOI,KAAP,EAAc;AACd,kBAAMC,QAAQ,GAAGF,+BAA+B,CAAC,KAAD,EAAQF,WAAR,CAAhD;AACA,kBAAMK,OAAO,GAAGD,QAAQ,CAACE,eAAT,CAAyB,sDAAzB,EAAiF,aAAjF,CAAhB;AAEAD,YAAAA,OAAO,CAACE,WAAR,GAAsBJ,KAAK,CAACK,OAA5B;AAEAJ,YAAAA,QAAQ,CAACK,WAAT,CAAqBJ,OAArB;AACA,mBAAOD,QAAP;AACD;AACF;;AAED;AACE,cAAM,IAAIM,SAAJ,CAAc,qBAAd,CAAN;AAxBJ;AA0BD;;AA5B0C,CAA7C;;AA+BA,SAASR,+BAAT,CAAyCS,WAAzC,EAAsDX,WAAtD,EAAmED,MAAnE,EAA2E;AACzE,QAAMK,QAAQ,GAAGZ,QAAQ,CAACoB,UAAT,CAAoB,EAApB,EAAwB;AACvCC,IAAAA,OAAO,EAAE;AACPF,MAAAA,WADO;AAEPG,MAAAA,QAAQ,EAAE,OAFH;AAGPd,MAAAA,WAHO,CAIP;;AAJO;AAD8B,GAAxB,CAAjB,CADyE,CAUzE;;AACAN,EAAAA,qBAAqB,CAACU,QAAD,EAAW;AAC9BW,IAAAA,sBAAsB,EAAE,EADM;AAE9BC,IAAAA,qBAAqB,EAAE;AAFO,GAAX,CAArB;;AAKA,MAAIjB,MAAM,KAAKkB,SAAf,EAA0B;AACxBb,IAAAA,QAAQ,CAACc,UAAT,CAAoBC,gBAApB,CAAqCpB,MAArC,EAA6CK,QAA7C;AACD;;AACDA,EAAAA,QAAQ,CAACgB,KAAT;AACA,SAAOhB,QAAP;AACD","sourcesContent":["\"use strict\";\nconst Document = require(\"../generated/Document\");\nconst { applyDocumentFeatures } = require(\"../../browser/documentfeatures\");\n\nexports.implementation = class DOMParserImpl {\n  parseFromString(string, contentType) {\n    switch (String(contentType)) {\n      case \"text/html\": {\n        return createScriptingDisabledDocument(\"html\", contentType, string);\n      }\n\n      case \"text/xml\":\n      case \"application/xml\":\n      case \"application/xhtml+xml\":\n      case \"image/svg+xml\": {\n        // TODO: use a strict XML parser (sax's strict mode might work?) and create parsererror elements\n        try {\n          return createScriptingDisabledDocument(\"xml\", contentType, string);\n        } catch (error) {\n          const document = createScriptingDisabledDocument(\"xml\", contentType);\n          const element = document.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\n\n          element.textContent = error.message;\n\n          document.appendChild(element);\n          return document;\n        }\n      }\n\n      default:\n        throw new TypeError(\"Invalid contentType\");\n    }\n  }\n};\n\nfunction createScriptingDisabledDocument(parsingMode, contentType, string) {\n  const document = Document.createImpl([], {\n    options: {\n      parsingMode,\n      encoding: \"UTF-8\",\n      contentType\n      // TODO: somehow set URL to active document's URL\n    }\n  });\n\n  // \"scripting enabled\" set to false\n  applyDocumentFeatures(document, {\n    FetchExternalResources: [],\n    SkipExternalResources: false\n  });\n\n  if (string !== undefined) {\n    document._htmlToDom.appendToDocument(string, document);\n  }\n  document.close();\n  return document;\n}\n"]},"metadata":{},"sourceType":"script"}