{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst notImplemented = require(\"../../browser/not-implemented\");\n\nconst {\n  reflectURLAttribute\n} = require(\"../../utils\");\n\nfunction getTimeRangeDummy() {\n  return {\n    length: 0,\n\n    start() {\n      return 0;\n    },\n\n    end() {\n      return 0;\n    }\n\n  };\n}\n\nclass HTMLMediaElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._muted = false;\n    this._volume = 1.0;\n    this.readyState = 0;\n    this.networkState = 0;\n    this.currentTime = 0;\n    this.currentSrc = \"\";\n    this.buffered = getTimeRangeDummy();\n    this.seeking = false;\n    this.duration = 0;\n    this.paused = true;\n    this.played = getTimeRangeDummy();\n    this.seekable = getTimeRangeDummy();\n    this.ended = false;\n    this.audioTracks = [];\n    this.videoTracks = [];\n    this.textTracks = [];\n  } // Implemented accoring to W3C Draft 22 August 2012\n\n\n  set defaultPlaybackRate(v) {\n    if (v === 0.0) {\n      throw new DOMException(\"The operation is not supported.\", \"NotSupportedError\");\n    }\n\n    if (this._defaultPlaybackRate !== v) {\n      this._defaultPlaybackRate = v;\n\n      this._dispatchRateChange();\n    }\n  }\n\n  _dispatchRateChange() {\n    const ev = this._ownerDocument.createEvent(\"HTMLEvents\");\n\n    ev.initEvent(\"ratechange\", false, false);\n    this.dispatchEvent(ev);\n  }\n\n  get defaultPlaybackRate() {\n    if (this._defaultPlaybackRate === undefined) {\n      return 1.0;\n    }\n\n    return this._defaultPlaybackRate;\n  }\n\n  get playbackRate() {\n    if (this._playbackRate === undefined) {\n      return 1.0;\n    }\n\n    return this._playbackRate;\n  }\n\n  set playbackRate(v) {\n    if (v !== this._playbackRate) {\n      this._playbackRate = v;\n\n      this._dispatchRateChange();\n    }\n  }\n\n  get muted() {\n    return this._muted;\n  }\n\n  _dispatchVolumeChange() {\n    const ev = this._ownerDocument.createEvent(\"HTMLEvents\");\n\n    ev.initEvent(\"volumechange\", false, false);\n    this.dispatchEvent(ev);\n  }\n\n  set muted(v) {\n    if (v !== this._muted) {\n      this._muted = v;\n\n      this._dispatchVolumeChange();\n    }\n  }\n\n  get defaultMuted() {\n    return this.getAttribute(\"muted\") !== null;\n  }\n\n  set defaultMuted(v) {\n    if (v) {\n      this.setAttribute(\"muted\", v);\n    } else {\n      this.removeAttribute(\"muted\");\n    }\n  }\n\n  get volume() {\n    return this._volume;\n  }\n\n  set volume(v) {\n    if (v < 0 || v > 1) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    if (this._volume !== v) {\n      this._volume = v;\n\n      this._dispatchVolumeChange();\n    }\n  } // Not (yet) implemented according to spec\n  // Should return sane default values\n\n\n  load() {\n    notImplemented(\"HTMLMediaElement.prototype.load\", this._ownerDocument._defaultView);\n  }\n\n  canPlayType() {\n    return \"\";\n  }\n\n  play() {\n    notImplemented(\"HTMLMediaElement.prototype.play\", this._ownerDocument._defaultView);\n  }\n\n  pause() {\n    notImplemented(\"HTMLMediaElement.prototype.pause\", this._ownerDocument._defaultView);\n  }\n\n  addTextTrack() {\n    notImplemented(\"HTMLMediaElement.prototype.addNextTrack\", this._ownerDocument._defaultView);\n  }\n\n  get src() {\n    return reflectURLAttribute(this, \"src\");\n  }\n\n  set src(value) {\n    this.setAttribute(\"src\", value);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLMediaElementImpl\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMediaElement-impl.js"],"names":["DOMException","require","HTMLElementImpl","implementation","notImplemented","reflectURLAttribute","getTimeRangeDummy","length","start","end","HTMLMediaElementImpl","constructor","args","privateData","_muted","_volume","readyState","networkState","currentTime","currentSrc","buffered","seeking","duration","paused","played","seekable","ended","audioTracks","videoTracks","textTracks","defaultPlaybackRate","v","_defaultPlaybackRate","_dispatchRateChange","ev","_ownerDocument","createEvent","initEvent","dispatchEvent","undefined","playbackRate","_playbackRate","muted","_dispatchVolumeChange","defaultMuted","getAttribute","setAttribute","removeAttribute","volume","load","_defaultView","canPlayType","play","pause","addTextTrack","src","value","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst DOMException = require(\"domexception\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst notImplemented = require(\"../../browser/not-implemented\");\nconst { reflectURLAttribute } = require(\"../../utils\");\n\nfunction getTimeRangeDummy() {\n  return {\n    length: 0,\n    start() {\n      return 0;\n    },\n    end() {\n      return 0;\n    }\n  };\n}\n\nclass HTMLMediaElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this._muted = false;\n    this._volume = 1.0;\n    this.readyState = 0;\n    this.networkState = 0;\n    this.currentTime = 0;\n    this.currentSrc = \"\";\n    this.buffered = getTimeRangeDummy();\n    this.seeking = false;\n    this.duration = 0;\n    this.paused = true;\n    this.played = getTimeRangeDummy();\n    this.seekable = getTimeRangeDummy();\n    this.ended = false;\n    this.audioTracks = [];\n    this.videoTracks = [];\n    this.textTracks = [];\n  }\n  // Implemented accoring to W3C Draft 22 August 2012\n  set defaultPlaybackRate(v) {\n    if (v === 0.0) {\n      throw new DOMException(\"The operation is not supported.\", \"NotSupportedError\");\n    }\n    if (this._defaultPlaybackRate !== v) {\n      this._defaultPlaybackRate = v;\n      this._dispatchRateChange();\n    }\n  }\n\n  _dispatchRateChange() {\n    const ev = this._ownerDocument.createEvent(\"HTMLEvents\");\n    ev.initEvent(\"ratechange\", false, false);\n    this.dispatchEvent(ev);\n  }\n  get defaultPlaybackRate() {\n    if (this._defaultPlaybackRate === undefined) {\n      return 1.0;\n    }\n    return this._defaultPlaybackRate;\n  }\n  get playbackRate() {\n    if (this._playbackRate === undefined) {\n      return 1.0;\n    }\n    return this._playbackRate;\n  }\n  set playbackRate(v) {\n    if (v !== this._playbackRate) {\n      this._playbackRate = v;\n      this._dispatchRateChange();\n    }\n  }\n  get muted() {\n    return this._muted;\n  }\n  _dispatchVolumeChange() {\n    const ev = this._ownerDocument.createEvent(\"HTMLEvents\");\n    ev.initEvent(\"volumechange\", false, false);\n    this.dispatchEvent(ev);\n  }\n  set muted(v) {\n    if (v !== this._muted) {\n      this._muted = v;\n      this._dispatchVolumeChange();\n    }\n  }\n  get defaultMuted() {\n    return this.getAttribute(\"muted\") !== null;\n  }\n  set defaultMuted(v) {\n    if (v) {\n      this.setAttribute(\"muted\", v);\n    } else {\n      this.removeAttribute(\"muted\");\n    }\n  }\n  get volume() {\n    return this._volume;\n  }\n  set volume(v) {\n    if (v < 0 || v > 1) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n    if (this._volume !== v) {\n      this._volume = v;\n      this._dispatchVolumeChange();\n    }\n  }\n\n  // Not (yet) implemented according to spec\n  // Should return sane default values\n  load() {\n    notImplemented(\"HTMLMediaElement.prototype.load\", this._ownerDocument._defaultView);\n  }\n  canPlayType() {\n    return \"\";\n  }\n  play() {\n    notImplemented(\"HTMLMediaElement.prototype.play\", this._ownerDocument._defaultView);\n  }\n  pause() {\n    notImplemented(\"HTMLMediaElement.prototype.pause\", this._ownerDocument._defaultView);\n  }\n  addTextTrack() {\n    notImplemented(\"HTMLMediaElement.prototype.addNextTrack\", this._ownerDocument._defaultView);\n  }\n\n  get src() {\n    return reflectURLAttribute(this, \"src\");\n  }\n\n  set src(value) {\n    this.setAttribute(\"src\", value);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLMediaElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}