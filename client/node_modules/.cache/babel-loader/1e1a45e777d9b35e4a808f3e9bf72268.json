{"ast":null,"code":"/*!\n * express-session\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar cookie = require('cookie');\n\nvar crypto = require('crypto');\n\nvar debug = require('debug')('express-session');\n\nvar deprecate = require('depd')('express-session');\n\nvar onHeaders = require('on-headers');\n\nvar parseUrl = require('parseurl');\n\nvar signature = require('cookie-signature');\n\nvar uid = require('uid-safe').sync;\n\nvar Cookie = require('./session/cookie');\n\nvar MemoryStore = require('./session/memory');\n\nvar Session = require('./session/session');\n\nvar Store = require('./session/store'); // environment\n\n\nvar env = process.env.NODE_ENV;\n/**\n * Expose the middleware.\n */\n\nexports = module.exports = session;\n/**\n * Expose constructors.\n */\n\nexports.Store = Store;\nexports.Cookie = Cookie;\nexports.Session = Session;\nexports.MemoryStore = MemoryStore;\n/**\n * Warning message for `MemoryStore` usage in production.\n * @private\n */\n\nvar warning = 'Warning: connect.session() MemoryStore is not\\n' + 'designed for a production environment, as it will leak\\n' + 'memory, and will not scale past a single process.';\n/**\n * Node.js 0.8+ async implementation.\n * @private\n */\n\n/* istanbul ignore next */\n\nvar defer = typeof setImmediate === 'function' ? setImmediate : function (fn) {\n  process.nextTick(fn.bind.apply(fn, arguments));\n};\n/**\n * Setup session store with the given `options`.\n *\n * @param {Object} [options]\n * @param {Object} [options.cookie] Options for cookie\n * @param {Function} [options.genid]\n * @param {String} [options.name=connect.sid] Session ID cookie name\n * @param {Boolean} [options.proxy]\n * @param {Boolean} [options.resave] Resave unmodified sessions back to the store\n * @param {Boolean} [options.rolling] Enable/disable rolling session expiration\n * @param {Boolean} [options.saveUninitialized] Save uninitialized sessions to the store\n * @param {String|Array} [options.secret] Secret for signing session ID\n * @param {Object} [options.store=MemoryStore] Session store\n * @param {String} [options.unset]\n * @return {Function} middleware\n * @public\n */\n\nfunction session(options) {\n  var opts = options || {}; // get the cookie options\n\n  var cookieOptions = opts.cookie || {}; // get the session id generate function\n\n  var generateId = opts.genid || generateSessionId; // get the session cookie name\n\n  var name = opts.name || opts.key || 'connect.sid'; // get the session store\n\n  var store = opts.store || new MemoryStore(); // get the trust proxy setting\n\n  var trustProxy = opts.proxy; // get the resave session option\n\n  var resaveSession = opts.resave; // get the rolling session option\n\n  var rollingSessions = Boolean(opts.rolling); // get the save uninitialized session option\n\n  var saveUninitializedSession = opts.saveUninitialized; // get the cookie signing secret\n\n  var secret = opts.secret;\n\n  if (typeof generateId !== 'function') {\n    throw new TypeError('genid option must be a function');\n  }\n\n  if (resaveSession === undefined) {\n    deprecate('undefined resave option; provide resave option');\n    resaveSession = true;\n  }\n\n  if (saveUninitializedSession === undefined) {\n    deprecate('undefined saveUninitialized option; provide saveUninitialized option');\n    saveUninitializedSession = true;\n  }\n\n  if (opts.unset && opts.unset !== 'destroy' && opts.unset !== 'keep') {\n    throw new TypeError('unset option must be \"destroy\" or \"keep\"');\n  } // TODO: switch to \"destroy\" on next major\n\n\n  var unsetDestroy = opts.unset === 'destroy';\n\n  if (Array.isArray(secret) && secret.length === 0) {\n    throw new TypeError('secret option array must contain one or more strings');\n  }\n\n  if (secret && !Array.isArray(secret)) {\n    secret = [secret];\n  }\n\n  if (!secret) {\n    deprecate('req.secret; provide secret option');\n  } // notify user that this store is not\n  // meant for a production environment\n\n  /* istanbul ignore next: not tested */\n\n\n  if (env === 'production' && store instanceof MemoryStore) {\n    console.warn(warning);\n  } // generates the new session\n\n\n  store.generate = function (req) {\n    req.sessionID = generateId(req);\n    req.session = new Session(req);\n    req.session.cookie = new Cookie(cookieOptions);\n\n    if (cookieOptions.secure === 'auto') {\n      req.session.cookie.secure = issecure(req, trustProxy);\n    }\n  };\n\n  var storeImplementsTouch = typeof store.touch === 'function'; // register event listeners for the store to track readiness\n\n  var storeReady = true;\n  store.on('disconnect', function ondisconnect() {\n    storeReady = false;\n  });\n  store.on('connect', function onconnect() {\n    storeReady = true;\n  });\n  return function session(req, res, next) {\n    // self-awareness\n    if (req.session) {\n      next();\n      return;\n    } // Handle connection as if there is no session if\n    // the store has temporarily disconnected etc\n\n\n    if (!storeReady) {\n      debug('store is disconnected');\n      next();\n      return;\n    } // pathname mismatch\n\n\n    var originalPath = parseUrl.original(req).pathname || '/';\n    if (originalPath.indexOf(cookieOptions.path || '/') !== 0) return next(); // ensure a secret is available or bail\n\n    if (!secret && !req.secret) {\n      next(new Error('secret option required for sessions'));\n      return;\n    } // backwards compatibility for signed cookies\n    // req.secret is passed from the cookie parser middleware\n\n\n    var secrets = secret || [req.secret];\n    var originalHash;\n    var originalId;\n    var savedHash;\n    var touched = false; // expose store\n\n    req.sessionStore = store; // get the session ID from the cookie\n\n    var cookieId = req.sessionID = getcookie(req, name, secrets); // set-cookie\n\n    onHeaders(res, function () {\n      if (!req.session) {\n        debug('no session');\n        return;\n      }\n\n      if (!shouldSetCookie(req)) {\n        return;\n      } // only send secure cookies via https\n\n\n      if (req.session.cookie.secure && !issecure(req, trustProxy)) {\n        debug('not secured');\n        return;\n      }\n\n      if (!touched) {\n        // touch session\n        req.session.touch();\n        touched = true;\n      } // set cookie\n\n\n      setcookie(res, name, req.sessionID, secrets[0], req.session.cookie.data);\n    }); // proxy end() to commit the session\n\n    var _end = res.end;\n    var _write = res.write;\n    var ended = false;\n\n    res.end = function end(chunk, encoding) {\n      if (ended) {\n        return false;\n      }\n\n      ended = true;\n      var ret;\n      var sync = true;\n\n      function writeend() {\n        if (sync) {\n          ret = _end.call(res, chunk, encoding);\n          sync = false;\n          return;\n        }\n\n        _end.call(res);\n      }\n\n      function writetop() {\n        if (!sync) {\n          return ret;\n        }\n\n        if (chunk == null) {\n          ret = true;\n          return ret;\n        }\n\n        var contentLength = Number(res.getHeader('Content-Length'));\n\n        if (!isNaN(contentLength) && contentLength > 0) {\n          // measure chunk\n          chunk = !Buffer.isBuffer(chunk) ? Buffer.from(chunk, encoding) : chunk;\n          encoding = undefined;\n\n          if (chunk.length !== 0) {\n            debug('split response');\n            ret = _write.call(res, chunk.slice(0, chunk.length - 1));\n            chunk = chunk.slice(chunk.length - 1, chunk.length);\n            return ret;\n          }\n        }\n\n        ret = _write.call(res, chunk, encoding);\n        sync = false;\n        return ret;\n      }\n\n      if (shouldDestroy(req)) {\n        // destroy session\n        debug('destroying');\n        store.destroy(req.sessionID, function ondestroy(err) {\n          if (err) {\n            defer(next, err);\n          }\n\n          debug('destroyed');\n          writeend();\n        });\n        return writetop();\n      } // no session to save\n\n\n      if (!req.session) {\n        debug('no session');\n        return _end.call(res, chunk, encoding);\n      }\n\n      if (!touched) {\n        // touch session\n        req.session.touch();\n        touched = true;\n      }\n\n      if (shouldSave(req)) {\n        req.session.save(function onsave(err) {\n          if (err) {\n            defer(next, err);\n          }\n\n          writeend();\n        });\n        return writetop();\n      } else if (storeImplementsTouch && shouldTouch(req)) {\n        // store implements touch method\n        debug('touching');\n        store.touch(req.sessionID, req.session, function ontouch(err) {\n          if (err) {\n            defer(next, err);\n          }\n\n          debug('touched');\n          writeend();\n        });\n        return writetop();\n      }\n\n      return _end.call(res, chunk, encoding);\n    }; // generate the session\n\n\n    function generate() {\n      store.generate(req);\n      originalId = req.sessionID;\n      originalHash = hash(req.session);\n      wrapmethods(req.session);\n    } // inflate the session\n\n\n    function inflate(req, sess) {\n      store.createSession(req, sess);\n      originalId = req.sessionID;\n      originalHash = hash(sess);\n\n      if (!resaveSession) {\n        savedHash = originalHash;\n      }\n\n      wrapmethods(req.session);\n    } // wrap session methods\n\n\n    function wrapmethods(sess) {\n      var _reload = sess.reload;\n      var _save = sess.save;\n\n      function reload(callback) {\n        debug('reloading %s', this.id);\n\n        _reload.call(this, function () {\n          wrapmethods(req.session);\n          callback.apply(this, arguments);\n        });\n      }\n\n      function save() {\n        debug('saving %s', this.id);\n        savedHash = hash(this);\n\n        _save.apply(this, arguments);\n      }\n\n      Object.defineProperty(sess, 'reload', {\n        configurable: true,\n        enumerable: false,\n        value: reload,\n        writable: true\n      });\n      Object.defineProperty(sess, 'save', {\n        configurable: true,\n        enumerable: false,\n        value: save,\n        writable: true\n      });\n    } // check if session has been modified\n\n\n    function isModified(sess) {\n      return originalId !== sess.id || originalHash !== hash(sess);\n    } // check if session has been saved\n\n\n    function isSaved(sess) {\n      return originalId === sess.id && savedHash === hash(sess);\n    } // determine if session should be destroyed\n\n\n    function shouldDestroy(req) {\n      return req.sessionID && unsetDestroy && req.session == null;\n    } // determine if session should be saved to store\n\n\n    function shouldSave(req) {\n      // cannot set cookie without a session ID\n      if (typeof req.sessionID !== 'string') {\n        debug('session ignored because of bogus req.sessionID %o', req.sessionID);\n        return false;\n      }\n\n      return !saveUninitializedSession && cookieId !== req.sessionID ? isModified(req.session) : !isSaved(req.session);\n    } // determine if session should be touched\n\n\n    function shouldTouch(req) {\n      // cannot set cookie without a session ID\n      if (typeof req.sessionID !== 'string') {\n        debug('session ignored because of bogus req.sessionID %o', req.sessionID);\n        return false;\n      }\n\n      return cookieId === req.sessionID && !shouldSave(req);\n    } // determine if cookie should be set on response\n\n\n    function shouldSetCookie(req) {\n      // cannot set cookie without a session ID\n      if (typeof req.sessionID !== 'string') {\n        return false;\n      }\n\n      return cookieId !== req.sessionID ? saveUninitializedSession || isModified(req.session) : rollingSessions || req.session.cookie.expires != null && isModified(req.session);\n    } // generate a session if the browser doesn't send a sessionID\n\n\n    if (!req.sessionID) {\n      debug('no SID sent, generating session');\n      generate();\n      next();\n      return;\n    } // generate the session object\n\n\n    debug('fetching %s', req.sessionID);\n    store.get(req.sessionID, function (err, sess) {\n      // error handling\n      if (err && err.code !== 'ENOENT') {\n        debug('error %j', err);\n        next(err);\n        return;\n      }\n\n      try {\n        if (err || !sess) {\n          debug('no session found');\n          generate();\n        } else {\n          debug('session found');\n          inflate(req, sess);\n        }\n      } catch (e) {\n        next(e);\n        return;\n      }\n\n      next();\n    });\n  };\n}\n\n;\n/**\n * Generate a session ID for a new session.\n *\n * @return {String}\n * @private\n */\n\nfunction generateSessionId(sess) {\n  return uid(24);\n}\n/**\n * Get the session ID cookie from request.\n *\n * @return {string}\n * @private\n */\n\n\nfunction getcookie(req, name, secrets) {\n  var header = req.headers.cookie;\n  var raw;\n  var val; // read from cookie header\n\n  if (header) {\n    var cookies = cookie.parse(header);\n    raw = cookies[name];\n\n    if (raw) {\n      if (raw.substr(0, 2) === 's:') {\n        val = unsigncookie(raw.slice(2), secrets);\n\n        if (val === false) {\n          debug('cookie signature invalid');\n          val = undefined;\n        }\n      } else {\n        debug('cookie unsigned');\n      }\n    }\n  } // back-compat read from cookieParser() signedCookies data\n\n\n  if (!val && req.signedCookies) {\n    val = req.signedCookies[name];\n\n    if (val) {\n      deprecate('cookie should be available in req.headers.cookie');\n    }\n  } // back-compat read from cookieParser() cookies data\n\n\n  if (!val && req.cookies) {\n    raw = req.cookies[name];\n\n    if (raw) {\n      if (raw.substr(0, 2) === 's:') {\n        val = unsigncookie(raw.slice(2), secrets);\n\n        if (val) {\n          deprecate('cookie should be available in req.headers.cookie');\n        }\n\n        if (val === false) {\n          debug('cookie signature invalid');\n          val = undefined;\n        }\n      } else {\n        debug('cookie unsigned');\n      }\n    }\n  }\n\n  return val;\n}\n/**\n * Hash the given `sess` object omitting changes to `.cookie`.\n *\n * @param {Object} sess\n * @return {String}\n * @private\n */\n\n\nfunction hash(sess) {\n  // serialize\n  var str = JSON.stringify(sess, function (key, val) {\n    // ignore sess.cookie property\n    if (this === sess && key === 'cookie') {\n      return;\n    }\n\n    return val;\n  }); // hash\n\n  return crypto.createHash('sha1').update(str, 'utf8').digest('hex');\n}\n/**\n * Determine if request is secure.\n *\n * @param {Object} req\n * @param {Boolean} [trustProxy]\n * @return {Boolean}\n * @private\n */\n\n\nfunction issecure(req, trustProxy) {\n  // socket is https server\n  if (req.connection && req.connection.encrypted) {\n    return true;\n  } // do not trust proxy\n\n\n  if (trustProxy === false) {\n    return false;\n  } // no explicit trust; try req.secure from express\n\n\n  if (trustProxy !== true) {\n    return req.secure === true;\n  } // read the proto from x-forwarded-proto header\n\n\n  var header = req.headers['x-forwarded-proto'] || '';\n  var index = header.indexOf(',');\n  var proto = index !== -1 ? header.substr(0, index).toLowerCase().trim() : header.toLowerCase().trim();\n  return proto === 'https';\n}\n/**\n * Set cookie on response.\n *\n * @private\n */\n\n\nfunction setcookie(res, name, val, secret, options) {\n  var signed = 's:' + signature.sign(val, secret);\n  var data = cookie.serialize(name, signed, options);\n  debug('set-cookie %s', data);\n  var prev = res.getHeader('Set-Cookie') || [];\n  var header = Array.isArray(prev) ? prev.concat(data) : [prev, data];\n  res.setHeader('Set-Cookie', header);\n}\n/**\n * Verify and decode the given `val` with `secrets`.\n *\n * @param {String} val\n * @param {Array} secrets\n * @returns {String|Boolean}\n * @private\n */\n\n\nfunction unsigncookie(val, secrets) {\n  for (var i = 0; i < secrets.length; i++) {\n    var result = signature.unsign(val, secrets[i]);\n\n    if (result !== false) {\n      return result;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/node_modules/express-session/index.js"],"names":["Buffer","require","cookie","crypto","debug","deprecate","onHeaders","parseUrl","signature","uid","sync","Cookie","MemoryStore","Session","Store","env","process","NODE_ENV","exports","module","session","warning","defer","setImmediate","fn","nextTick","bind","apply","arguments","options","opts","cookieOptions","generateId","genid","generateSessionId","name","key","store","trustProxy","proxy","resaveSession","resave","rollingSessions","Boolean","rolling","saveUninitializedSession","saveUninitialized","secret","TypeError","undefined","unset","unsetDestroy","Array","isArray","length","console","warn","generate","req","sessionID","secure","issecure","storeImplementsTouch","touch","storeReady","on","ondisconnect","onconnect","res","next","originalPath","original","pathname","indexOf","path","Error","secrets","originalHash","originalId","savedHash","touched","sessionStore","cookieId","getcookie","shouldSetCookie","setcookie","data","_end","end","_write","write","ended","chunk","encoding","ret","writeend","call","writetop","contentLength","Number","getHeader","isNaN","isBuffer","from","slice","shouldDestroy","destroy","ondestroy","err","shouldSave","save","onsave","shouldTouch","ontouch","hash","wrapmethods","inflate","sess","createSession","_reload","reload","_save","callback","id","Object","defineProperty","configurable","enumerable","value","writable","isModified","isSaved","expires","get","code","e","header","headers","raw","val","cookies","parse","substr","unsigncookie","signedCookies","str","JSON","stringify","createHash","update","digest","connection","encrypted","index","proto","toLowerCase","trim","signed","sign","serialize","prev","concat","setHeader","i","result","unsign"],"mappings":"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","sourcesContent":["/*!\n * express-session\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar Buffer = require('safe-buffer').Buffer\nvar cookie = require('cookie');\nvar crypto = require('crypto')\nvar debug = require('debug')('express-session');\nvar deprecate = require('depd')('express-session');\nvar onHeaders = require('on-headers')\nvar parseUrl = require('parseurl');\nvar signature = require('cookie-signature')\nvar uid = require('uid-safe').sync\n\nvar Cookie = require('./session/cookie')\nvar MemoryStore = require('./session/memory')\nvar Session = require('./session/session')\nvar Store = require('./session/store')\n\n// environment\n\nvar env = process.env.NODE_ENV;\n\n/**\n * Expose the middleware.\n */\n\nexports = module.exports = session;\n\n/**\n * Expose constructors.\n */\n\nexports.Store = Store;\nexports.Cookie = Cookie;\nexports.Session = Session;\nexports.MemoryStore = MemoryStore;\n\n/**\n * Warning message for `MemoryStore` usage in production.\n * @private\n */\n\nvar warning = 'Warning: connect.session() MemoryStore is not\\n'\n  + 'designed for a production environment, as it will leak\\n'\n  + 'memory, and will not scale past a single process.';\n\n/**\n * Node.js 0.8+ async implementation.\n * @private\n */\n\n/* istanbul ignore next */\nvar defer = typeof setImmediate === 'function'\n  ? setImmediate\n  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }\n\n/**\n * Setup session store with the given `options`.\n *\n * @param {Object} [options]\n * @param {Object} [options.cookie] Options for cookie\n * @param {Function} [options.genid]\n * @param {String} [options.name=connect.sid] Session ID cookie name\n * @param {Boolean} [options.proxy]\n * @param {Boolean} [options.resave] Resave unmodified sessions back to the store\n * @param {Boolean} [options.rolling] Enable/disable rolling session expiration\n * @param {Boolean} [options.saveUninitialized] Save uninitialized sessions to the store\n * @param {String|Array} [options.secret] Secret for signing session ID\n * @param {Object} [options.store=MemoryStore] Session store\n * @param {String} [options.unset]\n * @return {Function} middleware\n * @public\n */\n\nfunction session(options) {\n  var opts = options || {}\n\n  // get the cookie options\n  var cookieOptions = opts.cookie || {}\n\n  // get the session id generate function\n  var generateId = opts.genid || generateSessionId\n\n  // get the session cookie name\n  var name = opts.name || opts.key || 'connect.sid'\n\n  // get the session store\n  var store = opts.store || new MemoryStore()\n\n  // get the trust proxy setting\n  var trustProxy = opts.proxy\n\n  // get the resave session option\n  var resaveSession = opts.resave;\n\n  // get the rolling session option\n  var rollingSessions = Boolean(opts.rolling)\n\n  // get the save uninitialized session option\n  var saveUninitializedSession = opts.saveUninitialized\n\n  // get the cookie signing secret\n  var secret = opts.secret\n\n  if (typeof generateId !== 'function') {\n    throw new TypeError('genid option must be a function');\n  }\n\n  if (resaveSession === undefined) {\n    deprecate('undefined resave option; provide resave option');\n    resaveSession = true;\n  }\n\n  if (saveUninitializedSession === undefined) {\n    deprecate('undefined saveUninitialized option; provide saveUninitialized option');\n    saveUninitializedSession = true;\n  }\n\n  if (opts.unset && opts.unset !== 'destroy' && opts.unset !== 'keep') {\n    throw new TypeError('unset option must be \"destroy\" or \"keep\"');\n  }\n\n  // TODO: switch to \"destroy\" on next major\n  var unsetDestroy = opts.unset === 'destroy'\n\n  if (Array.isArray(secret) && secret.length === 0) {\n    throw new TypeError('secret option array must contain one or more strings');\n  }\n\n  if (secret && !Array.isArray(secret)) {\n    secret = [secret];\n  }\n\n  if (!secret) {\n    deprecate('req.secret; provide secret option');\n  }\n\n  // notify user that this store is not\n  // meant for a production environment\n  /* istanbul ignore next: not tested */\n  if (env === 'production' && store instanceof MemoryStore) {\n    console.warn(warning);\n  }\n\n  // generates the new session\n  store.generate = function(req){\n    req.sessionID = generateId(req);\n    req.session = new Session(req);\n    req.session.cookie = new Cookie(cookieOptions);\n\n    if (cookieOptions.secure === 'auto') {\n      req.session.cookie.secure = issecure(req, trustProxy);\n    }\n  };\n\n  var storeImplementsTouch = typeof store.touch === 'function';\n\n  // register event listeners for the store to track readiness\n  var storeReady = true\n  store.on('disconnect', function ondisconnect() {\n    storeReady = false\n  })\n  store.on('connect', function onconnect() {\n    storeReady = true\n  })\n\n  return function session(req, res, next) {\n    // self-awareness\n    if (req.session) {\n      next()\n      return\n    }\n\n    // Handle connection as if there is no session if\n    // the store has temporarily disconnected etc\n    if (!storeReady) {\n      debug('store is disconnected')\n      next()\n      return\n    }\n\n    // pathname mismatch\n    var originalPath = parseUrl.original(req).pathname || '/'\n    if (originalPath.indexOf(cookieOptions.path || '/') !== 0) return next();\n\n    // ensure a secret is available or bail\n    if (!secret && !req.secret) {\n      next(new Error('secret option required for sessions'));\n      return;\n    }\n\n    // backwards compatibility for signed cookies\n    // req.secret is passed from the cookie parser middleware\n    var secrets = secret || [req.secret];\n\n    var originalHash;\n    var originalId;\n    var savedHash;\n    var touched = false\n\n    // expose store\n    req.sessionStore = store;\n\n    // get the session ID from the cookie\n    var cookieId = req.sessionID = getcookie(req, name, secrets);\n\n    // set-cookie\n    onHeaders(res, function(){\n      if (!req.session) {\n        debug('no session');\n        return;\n      }\n\n      if (!shouldSetCookie(req)) {\n        return;\n      }\n\n      // only send secure cookies via https\n      if (req.session.cookie.secure && !issecure(req, trustProxy)) {\n        debug('not secured');\n        return;\n      }\n\n      if (!touched) {\n        // touch session\n        req.session.touch()\n        touched = true\n      }\n\n      // set cookie\n      setcookie(res, name, req.sessionID, secrets[0], req.session.cookie.data);\n    });\n\n    // proxy end() to commit the session\n    var _end = res.end;\n    var _write = res.write;\n    var ended = false;\n    res.end = function end(chunk, encoding) {\n      if (ended) {\n        return false;\n      }\n\n      ended = true;\n\n      var ret;\n      var sync = true;\n\n      function writeend() {\n        if (sync) {\n          ret = _end.call(res, chunk, encoding);\n          sync = false;\n          return;\n        }\n\n        _end.call(res);\n      }\n\n      function writetop() {\n        if (!sync) {\n          return ret;\n        }\n\n        if (chunk == null) {\n          ret = true;\n          return ret;\n        }\n\n        var contentLength = Number(res.getHeader('Content-Length'));\n\n        if (!isNaN(contentLength) && contentLength > 0) {\n          // measure chunk\n          chunk = !Buffer.isBuffer(chunk)\n            ? Buffer.from(chunk, encoding)\n            : chunk;\n          encoding = undefined;\n\n          if (chunk.length !== 0) {\n            debug('split response');\n            ret = _write.call(res, chunk.slice(0, chunk.length - 1));\n            chunk = chunk.slice(chunk.length - 1, chunk.length);\n            return ret;\n          }\n        }\n\n        ret = _write.call(res, chunk, encoding);\n        sync = false;\n\n        return ret;\n      }\n\n      if (shouldDestroy(req)) {\n        // destroy session\n        debug('destroying');\n        store.destroy(req.sessionID, function ondestroy(err) {\n          if (err) {\n            defer(next, err);\n          }\n\n          debug('destroyed');\n          writeend();\n        });\n\n        return writetop();\n      }\n\n      // no session to save\n      if (!req.session) {\n        debug('no session');\n        return _end.call(res, chunk, encoding);\n      }\n\n      if (!touched) {\n        // touch session\n        req.session.touch()\n        touched = true\n      }\n\n      if (shouldSave(req)) {\n        req.session.save(function onsave(err) {\n          if (err) {\n            defer(next, err);\n          }\n\n          writeend();\n        });\n\n        return writetop();\n      } else if (storeImplementsTouch && shouldTouch(req)) {\n        // store implements touch method\n        debug('touching');\n        store.touch(req.sessionID, req.session, function ontouch(err) {\n          if (err) {\n            defer(next, err);\n          }\n\n          debug('touched');\n          writeend();\n        });\n\n        return writetop();\n      }\n\n      return _end.call(res, chunk, encoding);\n    };\n\n    // generate the session\n    function generate() {\n      store.generate(req);\n      originalId = req.sessionID;\n      originalHash = hash(req.session);\n      wrapmethods(req.session);\n    }\n\n    // inflate the session\n    function inflate (req, sess) {\n      store.createSession(req, sess)\n      originalId = req.sessionID\n      originalHash = hash(sess)\n\n      if (!resaveSession) {\n        savedHash = originalHash\n      }\n\n      wrapmethods(req.session)\n    }\n\n    // wrap session methods\n    function wrapmethods(sess) {\n      var _reload = sess.reload\n      var _save = sess.save;\n\n      function reload(callback) {\n        debug('reloading %s', this.id)\n        _reload.call(this, function () {\n          wrapmethods(req.session)\n          callback.apply(this, arguments)\n        })\n      }\n\n      function save() {\n        debug('saving %s', this.id);\n        savedHash = hash(this);\n        _save.apply(this, arguments);\n      }\n\n      Object.defineProperty(sess, 'reload', {\n        configurable: true,\n        enumerable: false,\n        value: reload,\n        writable: true\n      })\n\n      Object.defineProperty(sess, 'save', {\n        configurable: true,\n        enumerable: false,\n        value: save,\n        writable: true\n      });\n    }\n\n    // check if session has been modified\n    function isModified(sess) {\n      return originalId !== sess.id || originalHash !== hash(sess);\n    }\n\n    // check if session has been saved\n    function isSaved(sess) {\n      return originalId === sess.id && savedHash === hash(sess);\n    }\n\n    // determine if session should be destroyed\n    function shouldDestroy(req) {\n      return req.sessionID && unsetDestroy && req.session == null;\n    }\n\n    // determine if session should be saved to store\n    function shouldSave(req) {\n      // cannot set cookie without a session ID\n      if (typeof req.sessionID !== 'string') {\n        debug('session ignored because of bogus req.sessionID %o', req.sessionID);\n        return false;\n      }\n\n      return !saveUninitializedSession && cookieId !== req.sessionID\n        ? isModified(req.session)\n        : !isSaved(req.session)\n    }\n\n    // determine if session should be touched\n    function shouldTouch(req) {\n      // cannot set cookie without a session ID\n      if (typeof req.sessionID !== 'string') {\n        debug('session ignored because of bogus req.sessionID %o', req.sessionID);\n        return false;\n      }\n\n      return cookieId === req.sessionID && !shouldSave(req);\n    }\n\n    // determine if cookie should be set on response\n    function shouldSetCookie(req) {\n      // cannot set cookie without a session ID\n      if (typeof req.sessionID !== 'string') {\n        return false;\n      }\n\n      return cookieId !== req.sessionID\n        ? saveUninitializedSession || isModified(req.session)\n        : rollingSessions || req.session.cookie.expires != null && isModified(req.session);\n    }\n\n    // generate a session if the browser doesn't send a sessionID\n    if (!req.sessionID) {\n      debug('no SID sent, generating session');\n      generate();\n      next();\n      return;\n    }\n\n    // generate the session object\n    debug('fetching %s', req.sessionID);\n    store.get(req.sessionID, function(err, sess){\n      // error handling\n      if (err && err.code !== 'ENOENT') {\n        debug('error %j', err);\n        next(err)\n        return\n      }\n\n      try {\n        if (err || !sess) {\n          debug('no session found')\n          generate()\n        } else {\n          debug('session found')\n          inflate(req, sess)\n        }\n      } catch (e) {\n        next(e)\n        return\n      }\n\n      next()\n    });\n  };\n};\n\n/**\n * Generate a session ID for a new session.\n *\n * @return {String}\n * @private\n */\n\nfunction generateSessionId(sess) {\n  return uid(24);\n}\n\n/**\n * Get the session ID cookie from request.\n *\n * @return {string}\n * @private\n */\n\nfunction getcookie(req, name, secrets) {\n  var header = req.headers.cookie;\n  var raw;\n  var val;\n\n  // read from cookie header\n  if (header) {\n    var cookies = cookie.parse(header);\n\n    raw = cookies[name];\n\n    if (raw) {\n      if (raw.substr(0, 2) === 's:') {\n        val = unsigncookie(raw.slice(2), secrets);\n\n        if (val === false) {\n          debug('cookie signature invalid');\n          val = undefined;\n        }\n      } else {\n        debug('cookie unsigned')\n      }\n    }\n  }\n\n  // back-compat read from cookieParser() signedCookies data\n  if (!val && req.signedCookies) {\n    val = req.signedCookies[name];\n\n    if (val) {\n      deprecate('cookie should be available in req.headers.cookie');\n    }\n  }\n\n  // back-compat read from cookieParser() cookies data\n  if (!val && req.cookies) {\n    raw = req.cookies[name];\n\n    if (raw) {\n      if (raw.substr(0, 2) === 's:') {\n        val = unsigncookie(raw.slice(2), secrets);\n\n        if (val) {\n          deprecate('cookie should be available in req.headers.cookie');\n        }\n\n        if (val === false) {\n          debug('cookie signature invalid');\n          val = undefined;\n        }\n      } else {\n        debug('cookie unsigned')\n      }\n    }\n  }\n\n  return val;\n}\n\n/**\n * Hash the given `sess` object omitting changes to `.cookie`.\n *\n * @param {Object} sess\n * @return {String}\n * @private\n */\n\nfunction hash(sess) {\n  // serialize\n  var str = JSON.stringify(sess, function (key, val) {\n    // ignore sess.cookie property\n    if (this === sess && key === 'cookie') {\n      return\n    }\n\n    return val\n  })\n\n  // hash\n  return crypto\n    .createHash('sha1')\n    .update(str, 'utf8')\n    .digest('hex')\n}\n\n/**\n * Determine if request is secure.\n *\n * @param {Object} req\n * @param {Boolean} [trustProxy]\n * @return {Boolean}\n * @private\n */\n\nfunction issecure(req, trustProxy) {\n  // socket is https server\n  if (req.connection && req.connection.encrypted) {\n    return true;\n  }\n\n  // do not trust proxy\n  if (trustProxy === false) {\n    return false;\n  }\n\n  // no explicit trust; try req.secure from express\n  if (trustProxy !== true) {\n    return req.secure === true\n  }\n\n  // read the proto from x-forwarded-proto header\n  var header = req.headers['x-forwarded-proto'] || '';\n  var index = header.indexOf(',');\n  var proto = index !== -1\n    ? header.substr(0, index).toLowerCase().trim()\n    : header.toLowerCase().trim()\n\n  return proto === 'https';\n}\n\n/**\n * Set cookie on response.\n *\n * @private\n */\n\nfunction setcookie(res, name, val, secret, options) {\n  var signed = 's:' + signature.sign(val, secret);\n  var data = cookie.serialize(name, signed, options);\n\n  debug('set-cookie %s', data);\n\n  var prev = res.getHeader('Set-Cookie') || []\n  var header = Array.isArray(prev) ? prev.concat(data) : [prev, data];\n\n  res.setHeader('Set-Cookie', header)\n}\n\n/**\n * Verify and decode the given `val` with `secrets`.\n *\n * @param {String} val\n * @param {Array} secrets\n * @returns {String|Boolean}\n * @private\n */\nfunction unsigncookie(val, secrets) {\n  for (var i = 0; i < secrets.length; i++) {\n    var result = signature.unsign(val, secrets[i]);\n\n    if (result !== false) {\n      return result;\n    }\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"script"}