{"ast":null,"code":"\"use strict\"; // TODO: use String.prototype.padStart instead when Node.js v8+ is required.\n\nconst leftPad = require(\"left-pad\");\n\nfunction isLeapYear(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#number-of-days-in-month-month-of-year-year\n\n\nconst daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction numberOfDaysInMonthOfYear(month, year) {\n  if (month === 2 && isLeapYear(year)) {\n    return 29;\n  }\n\n  return daysInMonth[month - 1];\n}\n\nconst monthRe = /^([0-9]{4,})-([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-month-string\n\nfunction parseMonthString(str) {\n  const matches = monthRe.exec(str);\n\n  if (!matches) {\n    return null;\n  }\n\n  const year = Number(matches[1]);\n\n  if (year <= 0) {\n    return null;\n  }\n\n  const month = Number(matches[2]);\n\n  if (month < 1 || month > 12) {\n    return null;\n  }\n\n  return {\n    year,\n    month\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-month-string\n\n\nfunction isValidMonthString(str) {\n  return parseMonthString(str) !== null;\n}\n\nfunction serializeMonth({\n  year,\n  month\n}) {\n  const yearStr = leftPad(`${year}`, 4, \"0\");\n  const monthStr = leftPad(`${month}`, 2, \"0\");\n  return `${yearStr}-${monthStr}`;\n}\n\nconst dateRe = /^([0-9]{4,})-([0-9]{2})-([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-date-string\n\nfunction parseDateString(str) {\n  const matches = dateRe.exec(str);\n\n  if (!matches) {\n    return null;\n  }\n\n  const year = Number(matches[1]);\n\n  if (year <= 0) {\n    return null;\n  }\n\n  const month = Number(matches[2]);\n\n  if (month < 1 || month > 12) {\n    return null;\n  }\n\n  const day = Number(matches[3]);\n\n  if (day < 1 || day > numberOfDaysInMonthOfYear(month, year)) {\n    return null;\n  }\n\n  return {\n    year,\n    month,\n    day\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-date-string\n\n\nfunction isValidDateString(str) {\n  return parseDateString(str) !== null;\n}\n\nfunction serializeDate(date) {\n  const dayStr = leftPad(`${date.day}`, 2, \"0\");\n  return `${serializeMonth(date)}-${dayStr}`;\n}\n\nconst yearlessDateRe = /^(?:--)?([0-9]{2})-([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-yearless-date-string\n\nfunction parseYearlessDateString(str) {\n  const matches = yearlessDateRe.exec(str);\n\n  if (!matches) {\n    return null;\n  }\n\n  const month = Number(matches[1]);\n\n  if (month < 1 || month > 12) {\n    return null;\n  }\n\n  const day = Number(matches[2]);\n\n  if (day < 1 || day > numberOfDaysInMonthOfYear(month, 4)) {\n    return null;\n  }\n\n  return {\n    month,\n    day\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-yearless-date-string\n\n\nfunction isValidYearlessDateString(str) {\n  return parseYearlessDateString(str) !== null;\n}\n\nfunction serializeYearlessDate({\n  month,\n  day\n}) {\n  const monthStr = leftPad(`${month}`, 2, \"0\");\n  const dayStr = leftPad(`${day}`, 2, \"0\");\n  return `${monthStr}-${dayStr}`;\n}\n\nconst timeRe = /^([0-9]{2}):([0-9]{2})(?::([0-9]{2}(?:\\.([0-9]{1,3}))?))?$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-time-string\n\nfunction parseTimeString(str) {\n  const matches = timeRe.exec(str);\n\n  if (!matches) {\n    return null;\n  }\n\n  const hour = Number(matches[1]);\n\n  if (hour < 0 || hour > 23) {\n    return null;\n  }\n\n  const minute = Number(matches[2]);\n\n  if (minute < 0 || minute > 59) {\n    return null;\n  }\n\n  const second = matches[3] !== undefined ? Math.trunc(Number(matches[3])) : 0;\n\n  if (second < 0 || second >= 60) {\n    return null;\n  }\n\n  const millisecond = matches[4] !== undefined ? Number(matches[4]) : 0;\n  return {\n    hour,\n    minute,\n    second,\n    millisecond\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-time-string\n\n\nfunction isValidTimeString(str) {\n  return parseTimeString(str) !== null;\n}\n\nfunction serializeTime({\n  hour,\n  minute,\n  second,\n  millisecond\n}) {\n  const hourStr = leftPad(`${hour}`, 2, \"0\");\n  const minuteStr = leftPad(`${minute}`, 2, \"0\");\n\n  if (millisecond === 0) {\n    return `${hourStr}:${minuteStr}`;\n  }\n\n  const secondStr = leftPad(second, 2, \"0\");\n  const millisecondStr = leftPad(millisecond, 3, \"0\");\n  return `${hourStr}:${minuteStr}:${secondStr}.${millisecondStr}`;\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-local-date-and-time-string\n\n\nfunction parseLocalDateAndTimeString(str, normalized = false) {\n  let separatorIdx = str.indexOf(\"T\");\n\n  if (separatorIdx < 0 && !normalized) {\n    separatorIdx = str.indexOf(\" \");\n  }\n\n  if (separatorIdx < 0) {\n    return null;\n  }\n\n  const date = parseDateString(str.slice(0, separatorIdx));\n\n  if (date === null) {\n    return null;\n  }\n\n  const time = parseTimeString(str.slice(separatorIdx + 1));\n\n  if (time === null) {\n    return null;\n  }\n\n  return {\n    date,\n    time\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-local-date-and-time-string\n\n\nfunction isValidLocalDateAndTimeString(str) {\n  return parseLocalDateAndTimeString(str) !== null;\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-normalised-local-date-and-time-string\n\n\nfunction isValidNormalizedLocalDateAndTimeString(str) {\n  return parseLocalDateAndTimeString(str, true) !== null;\n}\n\nfunction serializeNormalizedDateAndTime({\n  date,\n  time\n}) {\n  return `${serializeDate(date)}T${serializeTime(time)}`;\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#week-number-of-the-last-day\n// https://stackoverflow.com/a/18538272/1937836\n\n\nfunction weekNumberOfLastDay(year) {\n  const jan1 = new Date(year, 0);\n  return jan1.getDay() === 4 || isLeapYear(year) && jan1.getDay() === 3 ? 53 : 52;\n}\n\nconst weekRe = /^([0-9]{4,5})-W([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-week-string\n\nfunction parseWeekString(str) {\n  const matches = weekRe.exec(str);\n\n  if (!matches) {\n    return null;\n  }\n\n  const year = Number(matches[1]);\n\n  if (year <= 0) {\n    return null;\n  }\n\n  const week = Number(matches[2]);\n\n  if (week < 1 || week > weekNumberOfLastDay(year)) {\n    return null;\n  }\n\n  return {\n    year,\n    week\n  };\n} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-week-string\n\n\nfunction isValidWeekString(str) {\n  return parseWeekString(str) !== null;\n}\n\nfunction serializeWeek({\n  year,\n  week\n}) {\n  const yearStr = leftPad(`${year}`, 4, \"0\");\n  const weekStr = leftPad(`${week}`, 2, \"0\");\n  return `${yearStr}-W${weekStr}`;\n}\n\nmodule.exports = {\n  numberOfDaysInMonthOfYear,\n  parseMonthString,\n  isValidMonthString,\n  serializeMonth,\n  parseDateString,\n  isValidDateString,\n  serializeDate,\n  parseYearlessDateString,\n  isValidYearlessDateString,\n  serializeYearlessDate,\n  parseTimeString,\n  isValidTimeString,\n  serializeTime,\n  parseLocalDateAndTimeString,\n  isValidLocalDateAndTimeString,\n  isValidNormalizedLocalDateAndTimeString,\n  serializeNormalizedDateAndTime,\n  weekNumberOfLastDay,\n  parseWeekString,\n  isValidWeekString,\n  serializeWeek\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/helpers/dates-and-times.js"],"names":["leftPad","require","isLeapYear","year","daysInMonth","numberOfDaysInMonthOfYear","month","monthRe","parseMonthString","str","matches","exec","Number","isValidMonthString","serializeMonth","yearStr","monthStr","dateRe","parseDateString","day","isValidDateString","serializeDate","date","dayStr","yearlessDateRe","parseYearlessDateString","isValidYearlessDateString","serializeYearlessDate","timeRe","parseTimeString","hour","minute","second","undefined","Math","trunc","millisecond","isValidTimeString","serializeTime","hourStr","minuteStr","secondStr","millisecondStr","parseLocalDateAndTimeString","normalized","separatorIdx","indexOf","slice","time","isValidLocalDateAndTimeString","isValidNormalizedLocalDateAndTimeString","serializeNormalizedDateAndTime","weekNumberOfLastDay","jan1","Date","getDay","weekRe","parseWeekString","week","isValidWeekString","serializeWeek","weekStr","module","exports"],"mappings":"AAAA,a,CAEA;;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOA,IAAI,GAAG,GAAP,KAAe,CAAf,IAAqBA,IAAI,GAAG,CAAP,KAAa,CAAb,IAAkBA,IAAI,GAAG,GAAP,KAAe,CAA7D;AACD,C,CAED;;;AACA,MAAMC,WAAW,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAApB;;AACA,SAASC,yBAAT,CAAmCC,KAAnC,EAA0CH,IAA1C,EAAgD;AAC9C,MAAIG,KAAK,KAAK,CAAV,IAAeJ,UAAU,CAACC,IAAD,CAA7B,EAAqC;AACnC,WAAO,EAAP;AACD;;AACD,SAAOC,WAAW,CAACE,KAAK,GAAG,CAAT,CAAlB;AACD;;AAED,MAAMC,OAAO,GAAG,0BAAhB,C,CAEA;;AACA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC7B,QAAMC,OAAO,GAAGH,OAAO,CAACI,IAAR,CAAaF,GAAb,CAAhB;;AACA,MAAI,CAACC,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AACD,QAAMP,IAAI,GAAGS,MAAM,CAACF,OAAO,CAAC,CAAD,CAAR,CAAnB;;AACA,MAAIP,IAAI,IAAI,CAAZ,EAAe;AACb,WAAO,IAAP;AACD;;AACD,QAAMG,KAAK,GAAGM,MAAM,CAACF,OAAO,CAAC,CAAD,CAAR,CAApB;;AACA,MAAIJ,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,EAAzB,EAA6B;AAC3B,WAAO,IAAP;AACD;;AACD,SAAO;AAAEH,IAAAA,IAAF;AAAQG,IAAAA;AAAR,GAAP;AACD,C,CAED;;;AACA,SAASO,kBAAT,CAA4BJ,GAA5B,EAAiC;AAC/B,SAAOD,gBAAgB,CAACC,GAAD,CAAhB,KAA0B,IAAjC;AACD;;AACD,SAASK,cAAT,CAAwB;AAAEX,EAAAA,IAAF;AAAQG,EAAAA;AAAR,CAAxB,EAAyC;AACvC,QAAMS,OAAO,GAAGf,OAAO,CAAE,GAAEG,IAAK,EAAT,EAAY,CAAZ,EAAe,GAAf,CAAvB;AACA,QAAMa,QAAQ,GAAGhB,OAAO,CAAE,GAAEM,KAAM,EAAV,EAAa,CAAb,EAAgB,GAAhB,CAAxB;AACA,SAAQ,GAAES,OAAQ,IAAGC,QAAS,EAA9B;AACD;;AAED,MAAMC,MAAM,GAAG,qCAAf,C,CAEA;;AACA,SAASC,eAAT,CAAyBT,GAAzB,EAA8B;AAC5B,QAAMC,OAAO,GAAGO,MAAM,CAACN,IAAP,CAAYF,GAAZ,CAAhB;;AACA,MAAI,CAACC,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AACD,QAAMP,IAAI,GAAGS,MAAM,CAACF,OAAO,CAAC,CAAD,CAAR,CAAnB;;AACA,MAAIP,IAAI,IAAI,CAAZ,EAAe;AACb,WAAO,IAAP;AACD;;AACD,QAAMG,KAAK,GAAGM,MAAM,CAACF,OAAO,CAAC,CAAD,CAAR,CAApB;;AACA,MAAIJ,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,EAAzB,EAA6B;AAC3B,WAAO,IAAP;AACD;;AACD,QAAMa,GAAG,GAAGP,MAAM,CAACF,OAAO,CAAC,CAAD,CAAR,CAAlB;;AACA,MAAIS,GAAG,GAAG,CAAN,IAAWA,GAAG,GAAGd,yBAAyB,CAACC,KAAD,EAAQH,IAAR,CAA9C,EAA6D;AAC3D,WAAO,IAAP;AACD;;AACD,SAAO;AAAEA,IAAAA,IAAF;AAAQG,IAAAA,KAAR;AAAea,IAAAA;AAAf,GAAP;AACD,C,CAED;;;AACA,SAASC,iBAAT,CAA2BX,GAA3B,EAAgC;AAC9B,SAAOS,eAAe,CAACT,GAAD,CAAf,KAAyB,IAAhC;AACD;;AACD,SAASY,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,QAAMC,MAAM,GAAGvB,OAAO,CAAE,GAAEsB,IAAI,CAACH,GAAI,EAAb,EAAgB,CAAhB,EAAmB,GAAnB,CAAtB;AACA,SAAQ,GAAEL,cAAc,CAACQ,IAAD,CAAO,IAAGC,MAAO,EAAzC;AACD;;AAED,MAAMC,cAAc,GAAG,gCAAvB,C,CAEA;;AACA,SAASC,uBAAT,CAAiChB,GAAjC,EAAsC;AACpC,QAAMC,OAAO,GAAGc,cAAc,CAACb,IAAf,CAAoBF,GAApB,CAAhB;;AACA,MAAI,CAACC,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AACD,QAAMJ,KAAK,GAAGM,MAAM,CAACF,OAAO,CAAC,CAAD,CAAR,CAApB;;AACA,MAAIJ,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,EAAzB,EAA6B;AAC3B,WAAO,IAAP;AACD;;AACD,QAAMa,GAAG,GAAGP,MAAM,CAACF,OAAO,CAAC,CAAD,CAAR,CAAlB;;AACA,MAAIS,GAAG,GAAG,CAAN,IAAWA,GAAG,GAAGd,yBAAyB,CAACC,KAAD,EAAQ,CAAR,CAA9C,EAA0D;AACxD,WAAO,IAAP;AACD;;AACD,SAAO;AAAEA,IAAAA,KAAF;AAASa,IAAAA;AAAT,GAAP;AACD,C,CAED;;;AACA,SAASO,yBAAT,CAAmCjB,GAAnC,EAAwC;AACtC,SAAOgB,uBAAuB,CAAChB,GAAD,CAAvB,KAAiC,IAAxC;AACD;;AACD,SAASkB,qBAAT,CAA+B;AAAErB,EAAAA,KAAF;AAASa,EAAAA;AAAT,CAA/B,EAA+C;AAC7C,QAAMH,QAAQ,GAAGhB,OAAO,CAAE,GAAEM,KAAM,EAAV,EAAa,CAAb,EAAgB,GAAhB,CAAxB;AACA,QAAMiB,MAAM,GAAGvB,OAAO,CAAE,GAAEmB,GAAI,EAAR,EAAW,CAAX,EAAc,GAAd,CAAtB;AACA,SAAQ,GAAEH,QAAS,IAAGO,MAAO,EAA7B;AACD;;AAED,MAAMK,MAAM,GAAG,4DAAf,C,CAEA;;AACA,SAASC,eAAT,CAAyBpB,GAAzB,EAA8B;AAC5B,QAAMC,OAAO,GAAGkB,MAAM,CAACjB,IAAP,CAAYF,GAAZ,CAAhB;;AACA,MAAI,CAACC,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AACD,QAAMoB,IAAI,GAAGlB,MAAM,CAACF,OAAO,CAAC,CAAD,CAAR,CAAnB;;AACA,MAAIoB,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAG,EAAvB,EAA2B;AACzB,WAAO,IAAP;AACD;;AACD,QAAMC,MAAM,GAAGnB,MAAM,CAACF,OAAO,CAAC,CAAD,CAAR,CAArB;;AACA,MAAIqB,MAAM,GAAG,CAAT,IAAcA,MAAM,GAAG,EAA3B,EAA+B;AAC7B,WAAO,IAAP;AACD;;AACD,QAAMC,MAAM,GAAGtB,OAAO,CAAC,CAAD,CAAP,KAAeuB,SAAf,GAA2BC,IAAI,CAACC,KAAL,CAAWvB,MAAM,CAACF,OAAO,CAAC,CAAD,CAAR,CAAjB,CAA3B,GAA4D,CAA3E;;AACA,MAAIsB,MAAM,GAAG,CAAT,IAAcA,MAAM,IAAI,EAA5B,EAAgC;AAC9B,WAAO,IAAP;AACD;;AACD,QAAMI,WAAW,GAAG1B,OAAO,CAAC,CAAD,CAAP,KAAeuB,SAAf,GAA2BrB,MAAM,CAACF,OAAO,CAAC,CAAD,CAAR,CAAjC,GAAgD,CAApE;AACA,SAAO;AAAEoB,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA,MAAhB;AAAwBI,IAAAA;AAAxB,GAAP;AACD,C,CAED;;;AACA,SAASC,iBAAT,CAA2B5B,GAA3B,EAAgC;AAC9B,SAAOoB,eAAe,CAACpB,GAAD,CAAf,KAAyB,IAAhC;AACD;;AAED,SAAS6B,aAAT,CAAuB;AAAER,EAAAA,IAAF;AAAQC,EAAAA,MAAR;AAAgBC,EAAAA,MAAhB;AAAwBI,EAAAA;AAAxB,CAAvB,EAA8D;AAC5D,QAAMG,OAAO,GAAGvC,OAAO,CAAE,GAAE8B,IAAK,EAAT,EAAY,CAAZ,EAAe,GAAf,CAAvB;AACA,QAAMU,SAAS,GAAGxC,OAAO,CAAE,GAAE+B,MAAO,EAAX,EAAc,CAAd,EAAiB,GAAjB,CAAzB;;AACA,MAAIK,WAAW,KAAK,CAApB,EAAuB;AACrB,WAAQ,GAAEG,OAAQ,IAAGC,SAAU,EAA/B;AACD;;AACD,QAAMC,SAAS,GAAGzC,OAAO,CAACgC,MAAD,EAAS,CAAT,EAAY,GAAZ,CAAzB;AACA,QAAMU,cAAc,GAAG1C,OAAO,CAACoC,WAAD,EAAc,CAAd,EAAiB,GAAjB,CAA9B;AACA,SAAQ,GAAEG,OAAQ,IAAGC,SAAU,IAAGC,SAAU,IAAGC,cAAe,EAA9D;AACD,C,CAED;;;AACA,SAASC,2BAAT,CAAqClC,GAArC,EAA0CmC,UAAU,GAAG,KAAvD,EAA8D;AAC5D,MAAIC,YAAY,GAAGpC,GAAG,CAACqC,OAAJ,CAAY,GAAZ,CAAnB;;AACA,MAAID,YAAY,GAAG,CAAf,IAAoB,CAACD,UAAzB,EAAqC;AACnCC,IAAAA,YAAY,GAAGpC,GAAG,CAACqC,OAAJ,CAAY,GAAZ,CAAf;AACD;;AACD,MAAID,YAAY,GAAG,CAAnB,EAAsB;AACpB,WAAO,IAAP;AACD;;AACD,QAAMvB,IAAI,GAAGJ,eAAe,CAACT,GAAG,CAACsC,KAAJ,CAAU,CAAV,EAAaF,YAAb,CAAD,CAA5B;;AACA,MAAIvB,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAO,IAAP;AACD;;AACD,QAAM0B,IAAI,GAAGnB,eAAe,CAACpB,GAAG,CAACsC,KAAJ,CAAUF,YAAY,GAAG,CAAzB,CAAD,CAA5B;;AACA,MAAIG,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAO,IAAP;AACD;;AACD,SAAO;AAAE1B,IAAAA,IAAF;AAAQ0B,IAAAA;AAAR,GAAP;AACD,C,CAED;;;AACA,SAASC,6BAAT,CAAuCxC,GAAvC,EAA4C;AAC1C,SAAOkC,2BAA2B,CAAClC,GAAD,CAA3B,KAAqC,IAA5C;AACD,C,CAED;;;AACA,SAASyC,uCAAT,CAAiDzC,GAAjD,EAAsD;AACpD,SAAOkC,2BAA2B,CAAClC,GAAD,EAAM,IAAN,CAA3B,KAA2C,IAAlD;AACD;;AACD,SAAS0C,8BAAT,CAAwC;AAAE7B,EAAAA,IAAF;AAAQ0B,EAAAA;AAAR,CAAxC,EAAwD;AACtD,SAAQ,GAAE3B,aAAa,CAACC,IAAD,CAAO,IAAGgB,aAAa,CAACU,IAAD,CAAO,EAArD;AACD,C,CAED;AACA;;;AACA,SAASI,mBAAT,CAA6BjD,IAA7B,EAAmC;AACjC,QAAMkD,IAAI,GAAG,IAAIC,IAAJ,CAASnD,IAAT,EAAe,CAAf,CAAb;AACA,SAAOkD,IAAI,CAACE,MAAL,OAAkB,CAAlB,IAAwBrD,UAAU,CAACC,IAAD,CAAV,IAAoBkD,IAAI,CAACE,MAAL,OAAkB,CAA9D,GAAmE,EAAnE,GAAwE,EAA/E;AACD;;AAED,MAAMC,MAAM,GAAG,4BAAf,C,CAEA;;AACA,SAASC,eAAT,CAAyBhD,GAAzB,EAA8B;AAC5B,QAAMC,OAAO,GAAG8C,MAAM,CAAC7C,IAAP,CAAYF,GAAZ,CAAhB;;AACA,MAAI,CAACC,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AACD,QAAMP,IAAI,GAAGS,MAAM,CAACF,OAAO,CAAC,CAAD,CAAR,CAAnB;;AACA,MAAIP,IAAI,IAAI,CAAZ,EAAe;AACb,WAAO,IAAP;AACD;;AACD,QAAMuD,IAAI,GAAG9C,MAAM,CAACF,OAAO,CAAC,CAAD,CAAR,CAAnB;;AACA,MAAIgD,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAGN,mBAAmB,CAACjD,IAAD,CAA1C,EAAkD;AAChD,WAAO,IAAP;AACD;;AACD,SAAO;AAAEA,IAAAA,IAAF;AAAQuD,IAAAA;AAAR,GAAP;AACD,C,CAED;;;AACA,SAASC,iBAAT,CAA2BlD,GAA3B,EAAgC;AAC9B,SAAOgD,eAAe,CAAChD,GAAD,CAAf,KAAyB,IAAhC;AACD;;AACD,SAASmD,aAAT,CAAuB;AAAEzD,EAAAA,IAAF;AAAQuD,EAAAA;AAAR,CAAvB,EAAuC;AACrC,QAAM3C,OAAO,GAAGf,OAAO,CAAE,GAAEG,IAAK,EAAT,EAAY,CAAZ,EAAe,GAAf,CAAvB;AACA,QAAM0D,OAAO,GAAG7D,OAAO,CAAE,GAAE0D,IAAK,EAAT,EAAY,CAAZ,EAAe,GAAf,CAAvB;AACA,SAAQ,GAAE3C,OAAQ,KAAI8C,OAAQ,EAA9B;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACf1D,EAAAA,yBADe;AAGfG,EAAAA,gBAHe;AAIfK,EAAAA,kBAJe;AAKfC,EAAAA,cALe;AAOfI,EAAAA,eAPe;AAQfE,EAAAA,iBARe;AASfC,EAAAA,aATe;AAWfI,EAAAA,uBAXe;AAYfC,EAAAA,yBAZe;AAafC,EAAAA,qBAbe;AAefE,EAAAA,eAfe;AAgBfQ,EAAAA,iBAhBe;AAiBfC,EAAAA,aAjBe;AAmBfK,EAAAA,2BAnBe;AAoBfM,EAAAA,6BApBe;AAqBfC,EAAAA,uCArBe;AAsBfC,EAAAA,8BAtBe;AAwBfC,EAAAA,mBAxBe;AAyBfK,EAAAA,eAzBe;AA0BfE,EAAAA,iBA1Be;AA2BfC,EAAAA;AA3Be,CAAjB","sourcesContent":["\"use strict\";\n\n// TODO: use String.prototype.padStart instead when Node.js v8+ is required.\nconst leftPad = require(\"left-pad\");\n\nfunction isLeapYear(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#number-of-days-in-month-month-of-year-year\nconst daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nfunction numberOfDaysInMonthOfYear(month, year) {\n  if (month === 2 && isLeapYear(year)) {\n    return 29;\n  }\n  return daysInMonth[month - 1];\n}\n\nconst monthRe = /^([0-9]{4,})-([0-9]{2})$/;\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-month-string\nfunction parseMonthString(str) {\n  const matches = monthRe.exec(str);\n  if (!matches) {\n    return null;\n  }\n  const year = Number(matches[1]);\n  if (year <= 0) {\n    return null;\n  }\n  const month = Number(matches[2]);\n  if (month < 1 || month > 12) {\n    return null;\n  }\n  return { year, month };\n}\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-month-string\nfunction isValidMonthString(str) {\n  return parseMonthString(str) !== null;\n}\nfunction serializeMonth({ year, month }) {\n  const yearStr = leftPad(`${year}`, 4, \"0\");\n  const monthStr = leftPad(`${month}`, 2, \"0\");\n  return `${yearStr}-${monthStr}`;\n}\n\nconst dateRe = /^([0-9]{4,})-([0-9]{2})-([0-9]{2})$/;\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-date-string\nfunction parseDateString(str) {\n  const matches = dateRe.exec(str);\n  if (!matches) {\n    return null;\n  }\n  const year = Number(matches[1]);\n  if (year <= 0) {\n    return null;\n  }\n  const month = Number(matches[2]);\n  if (month < 1 || month > 12) {\n    return null;\n  }\n  const day = Number(matches[3]);\n  if (day < 1 || day > numberOfDaysInMonthOfYear(month, year)) {\n    return null;\n  }\n  return { year, month, day };\n}\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-date-string\nfunction isValidDateString(str) {\n  return parseDateString(str) !== null;\n}\nfunction serializeDate(date) {\n  const dayStr = leftPad(`${date.day}`, 2, \"0\");\n  return `${serializeMonth(date)}-${dayStr}`;\n}\n\nconst yearlessDateRe = /^(?:--)?([0-9]{2})-([0-9]{2})$/;\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-yearless-date-string\nfunction parseYearlessDateString(str) {\n  const matches = yearlessDateRe.exec(str);\n  if (!matches) {\n    return null;\n  }\n  const month = Number(matches[1]);\n  if (month < 1 || month > 12) {\n    return null;\n  }\n  const day = Number(matches[2]);\n  if (day < 1 || day > numberOfDaysInMonthOfYear(month, 4)) {\n    return null;\n  }\n  return { month, day };\n}\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-yearless-date-string\nfunction isValidYearlessDateString(str) {\n  return parseYearlessDateString(str) !== null;\n}\nfunction serializeYearlessDate({ month, day }) {\n  const monthStr = leftPad(`${month}`, 2, \"0\");\n  const dayStr = leftPad(`${day}`, 2, \"0\");\n  return `${monthStr}-${dayStr}`;\n}\n\nconst timeRe = /^([0-9]{2}):([0-9]{2})(?::([0-9]{2}(?:\\.([0-9]{1,3}))?))?$/;\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-time-string\nfunction parseTimeString(str) {\n  const matches = timeRe.exec(str);\n  if (!matches) {\n    return null;\n  }\n  const hour = Number(matches[1]);\n  if (hour < 0 || hour > 23) {\n    return null;\n  }\n  const minute = Number(matches[2]);\n  if (minute < 0 || minute > 59) {\n    return null;\n  }\n  const second = matches[3] !== undefined ? Math.trunc(Number(matches[3])) : 0;\n  if (second < 0 || second >= 60) {\n    return null;\n  }\n  const millisecond = matches[4] !== undefined ? Number(matches[4]) : 0;\n  return { hour, minute, second, millisecond };\n}\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-time-string\nfunction isValidTimeString(str) {\n  return parseTimeString(str) !== null;\n}\n\nfunction serializeTime({ hour, minute, second, millisecond }) {\n  const hourStr = leftPad(`${hour}`, 2, \"0\");\n  const minuteStr = leftPad(`${minute}`, 2, \"0\");\n  if (millisecond === 0) {\n    return `${hourStr}:${minuteStr}`;\n  }\n  const secondStr = leftPad(second, 2, \"0\");\n  const millisecondStr = leftPad(millisecond, 3, \"0\");\n  return `${hourStr}:${minuteStr}:${secondStr}.${millisecondStr}`;\n}\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-local-date-and-time-string\nfunction parseLocalDateAndTimeString(str, normalized = false) {\n  let separatorIdx = str.indexOf(\"T\");\n  if (separatorIdx < 0 && !normalized) {\n    separatorIdx = str.indexOf(\" \");\n  }\n  if (separatorIdx < 0) {\n    return null;\n  }\n  const date = parseDateString(str.slice(0, separatorIdx));\n  if (date === null) {\n    return null;\n  }\n  const time = parseTimeString(str.slice(separatorIdx + 1));\n  if (time === null) {\n    return null;\n  }\n  return { date, time };\n}\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-local-date-and-time-string\nfunction isValidLocalDateAndTimeString(str) {\n  return parseLocalDateAndTimeString(str) !== null;\n}\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-normalised-local-date-and-time-string\nfunction isValidNormalizedLocalDateAndTimeString(str) {\n  return parseLocalDateAndTimeString(str, true) !== null;\n}\nfunction serializeNormalizedDateAndTime({ date, time }) {\n  return `${serializeDate(date)}T${serializeTime(time)}`;\n}\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#week-number-of-the-last-day\n// https://stackoverflow.com/a/18538272/1937836\nfunction weekNumberOfLastDay(year) {\n  const jan1 = new Date(year, 0);\n  return jan1.getDay() === 4 || (isLeapYear(year) && jan1.getDay() === 3) ? 53 : 52;\n}\n\nconst weekRe = /^([0-9]{4,5})-W([0-9]{2})$/;\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-week-string\nfunction parseWeekString(str) {\n  const matches = weekRe.exec(str);\n  if (!matches) {\n    return null;\n  }\n  const year = Number(matches[1]);\n  if (year <= 0) {\n    return null;\n  }\n  const week = Number(matches[2]);\n  if (week < 1 || week > weekNumberOfLastDay(year)) {\n    return null;\n  }\n  return { year, week };\n}\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-week-string\nfunction isValidWeekString(str) {\n  return parseWeekString(str) !== null;\n}\nfunction serializeWeek({ year, week }) {\n  const yearStr = leftPad(`${year}`, 4, \"0\");\n  const weekStr = leftPad(`${week}`, 2, \"0\");\n  return `${yearStr}-W${weekStr}`;\n}\n\nmodule.exports = {\n  numberOfDaysInMonthOfYear,\n\n  parseMonthString,\n  isValidMonthString,\n  serializeMonth,\n\n  parseDateString,\n  isValidDateString,\n  serializeDate,\n\n  parseYearlessDateString,\n  isValidYearlessDateString,\n  serializeYearlessDate,\n\n  parseTimeString,\n  isValidTimeString,\n  serializeTime,\n\n  parseLocalDateAndTimeString,\n  isValidLocalDateAndTimeString,\n  isValidNormalizedLocalDateAndTimeString,\n  serializeNormalizedDateAndTime,\n\n  weekNumberOfLastDay,\n  parseWeekString,\n  isValidWeekString,\n  serializeWeek\n};\n"]},"metadata":{},"sourceType":"script"}