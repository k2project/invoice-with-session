{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/invoiceDoc/InvoiceDocFooter.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport './InvoiceDoc.scss';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { updateInvoiceNotes, updateInvoiceDiscount, updateInvoiceCurrency, updateInvoiceTaxRate, updateInvoiceOtherFees } from '../../../../redux/actions/invoice';\nimport { toNumberWithCommas, validateRateInputToObj, validateTaxInputValueToNum } from '../../../../components/form/utils/validations';\nimport notesIcon from '../../../../imgs/icons/notesIcon.png';\nimport discountIcon from '../../../../imgs/icons/discountIcon.png';\nimport waletIcon from '../../../../imgs/icons/waletIcon.png';\n\nconst InvoiceDocFooter = ({\n  invoice,\n  updateInvoiceNotes,\n  updateInvoiceDiscount,\n  updateInvoiceCurrency,\n  updateInvoiceTaxRate,\n  updateInvoiceOtherFees,\n  tasks\n}) => {\n  const [errors, setErrors] = useState(null);\n  useEffect(() => {\n    const itemWithCurrency = tasks.filter(t => t.addToInvoice).find(t => t.amount.currency);\n\n    if (itemWithCurrency) {\n      let currency = itemWithCurrency.amount.currency;\n      updateInvoiceCurrency(currency);\n    } else {\n      updateInvoiceCurrency('');\n    }\n  }, [tasks]); //update forms default inputs value\n\n  useEffect(() => {\n    // document.getElementById('invoice-notes').value = invoice.notes;\n    document.getElementById('invoice-discount').value = invoice.currency + toNumberWithCommas(invoice.discount);\n    document.getElementById('invoice-fees').value = invoice.currency + toNumberWithCommas(invoice.fees);\n  }, [invoice.notes, invoice.discount, invoice.fees]);\n  const [notes, setNotes] = useState('Thank you for your business.');\n\n  const handle_notes_edit = e => {\n    let notes = e.target.value;\n    setNotes(notes);\n    updateInvoiceNotes(notes);\n  };\n\n  let default_discount = invoice.currency;\n  default_discount += invoice.discount ? toNumberWithCommas(invoice.discount) : '0.00';\n  const [discount, setDiscount] = useState(default_discount);\n\n  const handle_discount_edit = e => {\n    setErrors(null);\n    let discount = e.target.value; //return {invoice.currency, numValue}\n\n    discount = validateRateInputToObj(discount);\n\n    if (discount) {\n      //alert when discount > net total\n      if (discount.numValue > net_total_num) {\n        discount = 0;\n        setErrors('Discount value is greater than the subtotal.');\n      } else {\n        discount = discount.numValue;\n      }\n    } else {\n      // invalid input\n      // e.target.value = `${invoice.currency}0.00`;\n      setErrors('Inavalid discount input. Please enter the value in format £100.00 !'); //disable when no items in the arr\n    }\n\n    setDiscount(discount);\n    updateInvoiceDiscount(discount);\n  };\n\n  const edit_input = (input, stateValue) => {\n    if (input === 'textarea') input = document.getElementById('invoice-notes');\n    if (input === 'discount') input = document.getElementById('invoice-discount');\n    if (input === 'fees') input = document.getElementById('invoice-fees'); //move cursor to the end of text by reseting value to empty string befor setting focus on the el\n\n    input.value = '';\n    input.focus();\n    input.value = stateValue || `${invoice.currency}0.00`;\n  };\n\n  let default_tax = invoice.tax ? invoice.tax : 0;\n  const [tax, setTax] = useState(default_tax);\n\n  const handle_tax_edit = e => {\n    setErrors(null);\n    let tax_rate = e.target.value;\n    tax_rate = validateTaxInputValueToNum(tax_rate);\n    if (tax_rate === null) setErrors('Inavalid tax rate input. Please enter the value in format 0-100%.');\n    setTax(tax_rate);\n    updateInvoiceTaxRate(tax_rate);\n  };\n\n  let default_fees = invoice.currency;\n  default_fees += invoice.fees ? toNumberWithCommas(invoice.fees) : '0.00';\n  const [fees, setFees] = useState(default_fees);\n\n  const handle_fees_edit = e => {\n    setErrors(null);\n    let fees = e.target.value;\n    fees = validateRateInputToObj(fees);\n    if (fees === null) return setErrors('Inavalid discount input. Please enter the value in format £100.00 !');\n    setFees(fees.numValue);\n    updateInvoiceOtherFees(fees.numValue);\n  }; //TOTAL CALCULATION\n\n\n  let net_total_num = tasks.filter(t => t.addToInvoice).reduce((sum, t) => {\n    if (t.amount.amountNet) return sum + t.amount.amountNet;\n    return sum;\n  }, 0);\n  const net_total_str = toNumberWithCommas(net_total_num) || '0.00';\n  net_total_num = net_total_num - invoice.discount;\n  const tax_total_num = net_total_num * (invoice.tax / 100);\n  const tax_total_str = toNumberWithCommas(tax_total_num) || '0%';\n  const invoice_total_num = net_total_num + tax_total_num + invoice.fees;\n  const invoice_total_str = toNumberWithCommas(invoice_total_num);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"invoice__footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"invoice__btn icon_iNotes\",\n    title: \"Edit notes\",\n    onMouseDown: e => e.preventDefault(),\n    onClick: () => edit_input('textarea', notes),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: notesIcon,\n    alt: \"Edit notes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"invoice__btn icon_iDiscount\",\n    title: \"Add discount\",\n    onMouseDown: e => e.preventDefault(),\n    onClick: () => edit_input('discount', discount),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: discountIcon,\n    alt: \"Add discount\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"invoice__btn icon_iFees\",\n    title: \"Add other fees\",\n    onMouseDown: e => e.preventDefault(),\n    onClick: () => edit_input('fees', fees),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: waletIcon,\n    alt: \"Add other fees\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"invoice__notes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invoice__notes-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 29\n    }\n  }, \"Notes:\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 25\n    }\n  }, invoice.notes)), /*#__PURE__*/React.createElement(\"div\", {\n    className: `bg-${invoice.bg_color}  invoice__cover`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invoice__notes-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"invoice-notes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 33\n    }\n  }, \" Notes:\")), /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"invoice-notes\",\n    onChange: handle_notes_edit,\n    defaultValue: notes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(\"section\", {\n    className: `bg-${invoice.bg_color} txt-${invoice.text_color} invoice__total`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 21\n    }\n  }, \"Net and gross amount.\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 25\n    }\n  }, \"Subtotal:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 25\n    }\n  }, invoice.currency, net_total_str)), /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invoice__discount-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 29\n    }\n  }, \"Discount:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 29\n    }\n  }, invoice.currency, toNumberWithCommas(invoice.discount))), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"invoice__discount-form\",\n    onSubmit: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"invoice-discount\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 29\n    }\n  }, \"Discount:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"invoice-discount\",\n    autoComplete: \"off\",\n    onChange: handle_discount_edit,\n    defaultValue: default_discount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invoice__tax-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 25\n    }\n  }, \"Tax rate:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 25\n    }\n  }, tax, \"%\")), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"invoice__tax-form\",\n    onSubmit: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"invoice-tax\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 25\n    }\n  }, \"Tax Rate:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"invoice-tax\",\n    onChange: handle_tax_edit,\n    autoComplete: \"off\",\n    defaultValue: default_tax + '%',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 25\n    }\n  })), invoice.tax > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 29\n    }\n  }, \"Tax Amount:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 29\n    }\n  }, invoice.currency, tax_total_str)), /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"invoice__fees-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 29\n    }\n  }, \"Other*:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 29\n    }\n  }, invoice.currency, toNumberWithCommas(invoice.fees))), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"invoice__fees-form\",\n    onSubmit: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"invoice-fees\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 29\n    }\n  }, \"Other*:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"invoice-fees\",\n    autoComplete: \"off\",\n    onChange: handle_fees_edit,\n    defaultValue: default_fees,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 25\n    }\n  }, \"Total:\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"invoice__total-sum\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 25\n    }\n  }, invoice.currency, invoice_total_str)))), errors && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tile tile--err\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 17\n    }\n  }, \"Error: \", errors), /*#__PURE__*/React.createElement(\"footer\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }\n  }, \"Thank you for your business!\"));\n};\n\nInvoiceDocFooter.propTypes = {\n  invoice: PropTypes.object,\n  tasks: PropTypes.array,\n  updateInvoiceNotes: PropTypes.func,\n  updateInvoiceDiscount: PropTypes.func,\n  updateInvoiceCurrency: PropTypes.func,\n  updateInvoiceTaxRate: PropTypes.func,\n  updateInvoiceOtherFees: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  invoice: state.invoice,\n  tasks: state.companies.find(c => c._id === state.session.currentCompany).tasks\n});\n\nconst mapDispatchToProps = {\n  updateInvoiceNotes,\n  updateInvoiceDiscount,\n  updateInvoiceCurrency,\n  updateInvoiceTaxRate,\n  updateInvoiceOtherFees\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(InvoiceDocFooter);","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/invoiceDoc/InvoiceDocFooter.js"],"names":["React","useState","useEffect","Fragment","PropTypes","connect","updateInvoiceNotes","updateInvoiceDiscount","updateInvoiceCurrency","updateInvoiceTaxRate","updateInvoiceOtherFees","toNumberWithCommas","validateRateInputToObj","validateTaxInputValueToNum","notesIcon","discountIcon","waletIcon","InvoiceDocFooter","invoice","tasks","errors","setErrors","itemWithCurrency","filter","t","addToInvoice","find","amount","currency","document","getElementById","value","discount","fees","notes","setNotes","handle_notes_edit","e","target","default_discount","setDiscount","handle_discount_edit","numValue","net_total_num","edit_input","input","stateValue","focus","default_tax","tax","setTax","handle_tax_edit","tax_rate","default_fees","setFees","handle_fees_edit","reduce","sum","amountNet","net_total_str","tax_total_num","tax_total_str","invoice_total_num","invoice_total_str","preventDefault","bg_color","text_color","propTypes","object","array","func","mapStateToProps","state","companies","c","_id","session","currentCompany","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport './InvoiceDoc.scss';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n    updateInvoiceNotes,\n    updateInvoiceDiscount,\n    updateInvoiceCurrency,\n    updateInvoiceTaxRate,\n    updateInvoiceOtherFees,\n} from '../../../../redux/actions/invoice';\nimport {\n    toNumberWithCommas,\n    validateRateInputToObj,\n    validateTaxInputValueToNum,\n} from '../../../../components/form/utils/validations';\nimport notesIcon from '../../../../imgs/icons/notesIcon.png';\nimport discountIcon from '../../../../imgs/icons/discountIcon.png';\nimport waletIcon from '../../../../imgs/icons/waletIcon.png';\n\nconst InvoiceDocFooter = ({\n    invoice,\n    updateInvoiceNotes,\n    updateInvoiceDiscount,\n    updateInvoiceCurrency,\n    updateInvoiceTaxRate,\n    updateInvoiceOtherFees,\n    tasks,\n}) => {\n    const [errors, setErrors] = useState(null);\n    useEffect(() => {\n        const itemWithCurrency = tasks\n            .filter((t) => t.addToInvoice)\n            .find((t) => t.amount.currency);\n        if (itemWithCurrency) {\n            let currency = itemWithCurrency.amount.currency;\n            updateInvoiceCurrency(currency);\n        } else {\n            updateInvoiceCurrency('');\n        }\n    }, [tasks]);\n    //update forms default inputs value\n    useEffect(() => {\n        // document.getElementById('invoice-notes').value = invoice.notes;\n        document.getElementById('invoice-discount').value =\n            invoice.currency + toNumberWithCommas(invoice.discount);\n        document.getElementById('invoice-fees').value =\n            invoice.currency + toNumberWithCommas(invoice.fees);\n    }, [invoice.notes, invoice.discount, invoice.fees]);\n\n    const [notes, setNotes] = useState('Thank you for your business.');\n    const handle_notes_edit = (e) => {\n        let notes = e.target.value;\n        setNotes(notes);\n        updateInvoiceNotes(notes);\n    };\n    let default_discount = invoice.currency;\n    default_discount += invoice.discount\n        ? toNumberWithCommas(invoice.discount)\n        : '0.00';\n    const [discount, setDiscount] = useState(default_discount);\n    const handle_discount_edit = (e) => {\n        setErrors(null);\n        let discount = e.target.value;\n        //return {invoice.currency, numValue}\n        discount = validateRateInputToObj(discount);\n        if (discount) {\n            //alert when discount > net total\n            if (discount.numValue > net_total_num) {\n                discount = 0;\n                setErrors('Discount value is greater than the subtotal.');\n            } else {\n                discount = discount.numValue;\n            }\n        } else {\n            // invalid input\n            // e.target.value = `${invoice.currency}0.00`;\n            setErrors(\n                'Inavalid discount input. Please enter the value in format £100.00 !'\n            );\n\n            //disable when no items in the arr\n        }\n        setDiscount(discount);\n        updateInvoiceDiscount(discount);\n    };\n    const edit_input = (input, stateValue) => {\n        if (input === 'textarea')\n            input = document.getElementById('invoice-notes');\n        if (input === 'discount')\n            input = document.getElementById('invoice-discount');\n        if (input === 'fees') input = document.getElementById('invoice-fees');\n        //move cursor to the end of text by reseting value to empty string befor setting focus on the el\n        input.value = '';\n        input.focus();\n        input.value = stateValue || `${invoice.currency}0.00`;\n    };\n    let default_tax = invoice.tax ? invoice.tax : 0;\n    const [tax, setTax] = useState(default_tax);\n    const handle_tax_edit = (e) => {\n        setErrors(null);\n        let tax_rate = e.target.value;\n        tax_rate = validateTaxInputValueToNum(tax_rate);\n        if (tax_rate === null)\n            setErrors(\n                'Inavalid tax rate input. Please enter the value in format 0-100%.'\n            );\n        setTax(tax_rate);\n        updateInvoiceTaxRate(tax_rate);\n    };\n    let default_fees = invoice.currency;\n    default_fees += invoice.fees ? toNumberWithCommas(invoice.fees) : '0.00';\n    const [fees, setFees] = useState(default_fees);\n    const handle_fees_edit = (e) => {\n        setErrors(null);\n        let fees = e.target.value;\n        fees = validateRateInputToObj(fees);\n        if (fees === null)\n            return setErrors(\n                'Inavalid discount input. Please enter the value in format £100.00 !'\n            );\n        setFees(fees.numValue);\n        updateInvoiceOtherFees(fees.numValue);\n    };\n\n    //TOTAL CALCULATION\n\n    let net_total_num = tasks\n        .filter((t) => t.addToInvoice)\n        .reduce((sum, t) => {\n            if (t.amount.amountNet) return sum + t.amount.amountNet;\n            return sum;\n        }, 0);\n    const net_total_str = toNumberWithCommas(net_total_num) || '0.00';\n    net_total_num = net_total_num - invoice.discount;\n\n    const tax_total_num = net_total_num * (invoice.tax / 100);\n    const tax_total_str = toNumberWithCommas(tax_total_num) || '0%';\n\n    const invoice_total_num = net_total_num + tax_total_num + invoice.fees;\n    const invoice_total_str = toNumberWithCommas(invoice_total_num);\n\n    return (\n        <Fragment>\n            <section className='invoice__footer'>\n                <button\n                    type='button'\n                    className='invoice__btn icon_iNotes'\n                    title='Edit notes'\n                    onMouseDown={(e) => e.preventDefault()}\n                    onClick={() => edit_input('textarea', notes)}\n                >\n                    <img src={notesIcon} alt='Edit notes' />\n                </button>\n                <button\n                    type='button'\n                    className='invoice__btn icon_iDiscount'\n                    title='Add discount'\n                    onMouseDown={(e) => e.preventDefault()}\n                    onClick={() => edit_input('discount', discount)}\n                >\n                    <img src={discountIcon} alt='Add discount' />\n                </button>\n                <button\n                    type='button'\n                    className='invoice__btn icon_iFees'\n                    title='Add other fees'\n                    onMouseDown={(e) => e.preventDefault()}\n                    onClick={() => edit_input('fees', fees)}\n                >\n                    <img src={waletIcon} alt='Add other fees' />\n                </button>\n\n                <section className='invoice__notes'>\n                    <div className='invoice__notes-display'>\n                        <h3>\n                            <b>Notes:</b>\n                        </h3>\n                        <p>{invoice.notes}</p>\n                    </div>\n                    <div\n                        className={`bg-${invoice.bg_color}  invoice__cover`}\n                    ></div>\n                    <div className='invoice__notes-form'>\n                        <form onSubmit={(e) => e.preventDefault()}>\n                            <label htmlFor='invoice-notes'>\n                                <b> Notes:</b>\n                            </label>\n                            <textarea\n                                id='invoice-notes'\n                                onChange={handle_notes_edit}\n                                defaultValue={notes}\n                            ></textarea>\n                        </form>\n                    </div>\n                </section>\n                <section\n                    className={`bg-${invoice.bg_color} txt-${invoice.text_color} invoice__total`}\n                >\n                    <h3 className='sr-only'>Net and gross amount.</h3>\n\n                    <div>\n                        <span>Subtotal:</span>\n                        <span>\n                            {invoice.currency}\n                            {net_total_str}\n                        </span>\n                    </div>\n                    <Fragment>\n                        <div className='invoice__discount-display'>\n                            <span>Discount:</span>\n                            <span>\n                                {invoice.currency}\n                                {toNumberWithCommas(invoice.discount)}\n                            </span>\n                        </div>\n                        <form\n                            className='invoice__discount-form'\n                            onSubmit={(e) => e.preventDefault()}\n                        >\n                            <label htmlFor='invoice-discount'>Discount:</label>\n                            <input\n                                type='text'\n                                id='invoice-discount'\n                                autoComplete='off'\n                                onChange={handle_discount_edit}\n                                defaultValue={default_discount}\n                            />\n                        </form>\n                    </Fragment>\n\n                    <div className='invoice__tax-display'>\n                        <span>Tax rate:</span>\n                        <span>{tax}%</span>\n                    </div>\n                    <form\n                        className='invoice__tax-form'\n                        onSubmit={(e) => e.preventDefault()}\n                    >\n                        <label htmlFor='invoice-tax'>Tax Rate:</label>\n                        <input\n                            type='text'\n                            id='invoice-tax'\n                            onChange={handle_tax_edit}\n                            autoComplete='off'\n                            defaultValue={default_tax + '%'}\n                        />\n                    </form>\n                    {invoice.tax > 0 && (\n                        <div>\n                            <span>Tax Amount:</span>\n                            <span>\n                                {invoice.currency}\n                                {tax_total_str}\n                            </span>\n                        </div>\n                    )}\n\n                    <Fragment>\n                        <div className='invoice__fees-display'>\n                            <span>Other*:</span>\n                            <span>\n                                {invoice.currency}\n                                {toNumberWithCommas(invoice.fees)}\n                            </span>\n                        </div>\n                        <form\n                            className='invoice__fees-form'\n                            onSubmit={(e) => e.preventDefault()}\n                        >\n                            <label htmlFor='invoice-fees'>Other*:</label>\n                            <input\n                                type='text'\n                                id='invoice-fees'\n                                autoComplete='off'\n                                onChange={handle_fees_edit}\n                                defaultValue={default_fees}\n                            />\n                        </form>\n                    </Fragment>\n\n                    <div>\n                        <span className='sr-only'>Total:</span>\n                        <span className='invoice__total-sum'>\n                            {invoice.currency}\n                            {invoice_total_str}\n                        </span>\n                    </div>\n                </section>\n            </section>\n            {errors && (\n                <div className='tile tile--err' role='alert'>\n                    Error: {errors}\n                </div>\n            )}\n            <footer>Thank you for your business!</footer>\n        </Fragment>\n    );\n};\n\nInvoiceDocFooter.propTypes = {\n    invoice: PropTypes.object,\n    tasks: PropTypes.array,\n    updateInvoiceNotes: PropTypes.func,\n    updateInvoiceDiscount: PropTypes.func,\n    updateInvoiceCurrency: PropTypes.func,\n    updateInvoiceTaxRate: PropTypes.func,\n    updateInvoiceOtherFees: PropTypes.func,\n};\nconst mapStateToProps = (state) => ({\n    invoice: state.invoice,\n    tasks: state.companies.find((c) => c._id === state.session.currentCompany)\n        .tasks,\n});\nconst mapDispatchToProps = {\n    updateInvoiceNotes,\n    updateInvoiceDiscount,\n    updateInvoiceCurrency,\n    updateInvoiceTaxRate,\n    updateInvoiceOtherFees,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InvoiceDocFooter);\n"]},"metadata":{},"sourceType":"module"}