{"ast":null,"code":"'use strict';\n\nvar Parser = require('./parser'),\n    Serializer = require('./serializer'); // Shorthands\n\n\nexports.parse = function parse(html, options) {\n  var parser = new Parser(options);\n  return parser.parse(html);\n};\n\nexports.parseFragment = function parseFragment(fragmentContext, html, options) {\n  if (typeof fragmentContext === 'string') {\n    options = html;\n    html = fragmentContext;\n    fragmentContext = null;\n  }\n\n  var parser = new Parser(options);\n  return parser.parseFragment(html, fragmentContext);\n};\n\nexports.serialize = function (node, options) {\n  var serializer = new Serializer(node, options);\n  return serializer.serialize();\n}; // Tree adapters\n\n\nexports.treeAdapters = {\n  default: require('./tree_adapters/default'),\n  htmlparser2: require('./tree_adapters/htmlparser2')\n}; // Streaming\n// NOTE: streaming API is lazy loadable to enable bundling for platforms\n// that are different from Node.js.\n// See https://github.com/inikulin/parse5/issues/235.\n\nvar streamingAPI = {\n  ParserStream: './parser/parser_stream',\n  PlainTextConversionStream: './parser/plain_text_conversion_stream',\n  SerializerStream: './serializer/serializer_stream',\n  SAXParser: './sax'\n};\nObject.keys(streamingAPI).forEach(function (cls) {\n  Object.defineProperty(exports, cls, {\n    get: function () {\n      try {\n        return require(streamingAPI[cls]);\n      } catch (e) {\n        throw new Error(cls + ' is supported only for Node.js.' + 'See https://github.com/inikulin/parse5/issues/235 for the details.');\n      }\n    }\n  });\n});","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/parse5/lib/index.js"],"names":["Parser","require","Serializer","exports","parse","html","options","parser","parseFragment","fragmentContext","serialize","node","serializer","treeAdapters","default","htmlparser2","streamingAPI","ParserStream","PlainTextConversionStream","SerializerStream","SAXParser","Object","keys","forEach","cls","defineProperty","get","e","Error"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;AAAA,IACIC,UAAU,GAAGD,OAAO,CAAC,cAAD,CADxB,C,CAIA;;;AACAE,OAAO,CAACC,KAAR,GAAgB,SAASA,KAAT,CAAeC,IAAf,EAAqBC,OAArB,EAA8B;AAC1C,MAAIC,MAAM,GAAG,IAAIP,MAAJ,CAAWM,OAAX,CAAb;AAEA,SAAOC,MAAM,CAACH,KAAP,CAAaC,IAAb,CAAP;AACH,CAJD;;AAMAF,OAAO,CAACK,aAAR,GAAwB,SAASA,aAAT,CAAuBC,eAAvB,EAAwCJ,IAAxC,EAA8CC,OAA9C,EAAuD;AAC3E,MAAI,OAAOG,eAAP,KAA2B,QAA/B,EAAyC;AACrCH,IAAAA,OAAO,GAAGD,IAAV;AACAA,IAAAA,IAAI,GAAGI,eAAP;AACAA,IAAAA,eAAe,GAAG,IAAlB;AACH;;AAED,MAAIF,MAAM,GAAG,IAAIP,MAAJ,CAAWM,OAAX,CAAb;AAEA,SAAOC,MAAM,CAACC,aAAP,CAAqBH,IAArB,EAA2BI,eAA3B,CAAP;AACH,CAVD;;AAYAN,OAAO,CAACO,SAAR,GAAoB,UAAUC,IAAV,EAAgBL,OAAhB,EAAyB;AACzC,MAAIM,UAAU,GAAG,IAAIV,UAAJ,CAAeS,IAAf,EAAqBL,OAArB,CAAjB;AAEA,SAAOM,UAAU,CAACF,SAAX,EAAP;AACH,CAJD,C,CAOA;;;AACAP,OAAO,CAACU,YAAR,GAAuB;AACnBC,EAAAA,OAAO,EAAEb,OAAO,CAAC,yBAAD,CADG;AAEnBc,EAAAA,WAAW,EAAEd,OAAO,CAAC,6BAAD;AAFD,CAAvB,C,CAMA;AACA;AACA;AACA;;AACA,IAAIe,YAAY,GAAG;AACfC,EAAAA,YAAY,EAAE,wBADC;AAEfC,EAAAA,yBAAyB,EAAE,uCAFZ;AAGfC,EAAAA,gBAAgB,EAAE,gCAHH;AAIfC,EAAAA,SAAS,EAAE;AAJI,CAAnB;AAOAC,MAAM,CAACC,IAAP,CAAYN,YAAZ,EAA0BO,OAA1B,CAAkC,UAAUC,GAAV,EAAe;AAC7CH,EAAAA,MAAM,CAACI,cAAP,CAAsBtB,OAAtB,EAA+BqB,GAA/B,EAAoC;AAChCE,IAAAA,GAAG,EAAE,YAAY;AACb,UAAI;AACA,eAAOzB,OAAO,CAACe,YAAY,CAACQ,GAAD,CAAb,CAAd;AACH,OAFD,CAIA,OAAOG,CAAP,EAAU;AACN,cAAM,IAAIC,KAAJ,CACFJ,GAAG,GAAG,iCAAN,GACA,oEAFE,CAAN;AAIH;AACJ;AAZ+B,GAApC;AAcH,CAfD","sourcesContent":["'use strict';\n\nvar Parser = require('./parser'),\n    Serializer = require('./serializer');\n\n\n// Shorthands\nexports.parse = function parse(html, options) {\n    var parser = new Parser(options);\n\n    return parser.parse(html);\n};\n\nexports.parseFragment = function parseFragment(fragmentContext, html, options) {\n    if (typeof fragmentContext === 'string') {\n        options = html;\n        html = fragmentContext;\n        fragmentContext = null;\n    }\n\n    var parser = new Parser(options);\n\n    return parser.parseFragment(html, fragmentContext);\n};\n\nexports.serialize = function (node, options) {\n    var serializer = new Serializer(node, options);\n\n    return serializer.serialize();\n};\n\n\n// Tree adapters\nexports.treeAdapters = {\n    default: require('./tree_adapters/default'),\n    htmlparser2: require('./tree_adapters/htmlparser2')\n};\n\n\n// Streaming\n// NOTE: streaming API is lazy loadable to enable bundling for platforms\n// that are different from Node.js.\n// See https://github.com/inikulin/parse5/issues/235.\nvar streamingAPI = {\n    ParserStream: './parser/parser_stream',\n    PlainTextConversionStream: './parser/plain_text_conversion_stream',\n    SerializerStream: './serializer/serializer_stream',\n    SAXParser: './sax'\n};\n\nObject.keys(streamingAPI).forEach(function (cls) {\n    Object.defineProperty(exports, cls, {\n        get: function () {\n            try {\n                return require(streamingAPI[cls]);\n            }\n\n            catch (e) {\n                throw new Error(\n                    cls + ' is supported only for Node.js.' +\n                    'See https://github.com/inikulin/parse5/issues/235 for the details.'\n                );\n            }\n        }\n    });\n});\n"]},"metadata":{},"sourceType":"script"}