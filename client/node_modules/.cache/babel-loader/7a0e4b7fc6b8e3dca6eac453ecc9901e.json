{"ast":null,"code":"import axios from 'axios';\nimport { dialogBox } from '../../alerts/alertsFuns';\nexport const alertUnsavedChanges = async (initilState, state, currentPathname, setUpdates, history) => {\n  if (JSON.stringify(state) !== JSON.stringify(initilState)) {\n    const targetPathname = history.location.pathname;\n    const targetTab = history.location.search;\n    history.push(currentPathname);\n    const unblockRouting = history.block();\n    const msg = `You have some unsaved changes. What would you like to do?`;\n    const cancelBtnText = 'Discharge changes';\n    const confirmBtnText = 'Return to the form!';\n\n    const confirmCb = () => {\n      unblockRouting();\n    };\n\n    const cancelCb = async () => {\n      //discharge all changes and clear app changes status\n      // changes cleared on reload\n      if (targetPathname === currentPathname) {\n        //on clicking submenu redirect to the targeted tab\n        window.location.replace(window.location.origin + targetPathname + targetTab);\n      } else {\n        //on clicking companies tab before cancelation\n        window.location.replace(window.location.origin + targetPathname + '?tab=tasks');\n      }\n    };\n\n    dialogBox({\n      msg,\n      cancelBtnText,\n      confirmBtnText,\n      confirmCb,\n      cancelCb\n    });\n  } else {\n    //no chnages\n    if (setUpdates) setUpdates(null);\n  }\n};\nexport const saveChangesOnLeave = async (initilState, state, endSession, http //api call\n) => {\n  try {\n    if (JSON.stringify(state) !== JSON.stringify(initilState)) {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      await axios.post(http, JSON.stringify(state), config);\n    }\n  } catch (err) {\n    if (err.response.data.msg === 'AuthError') {\n      endSession('Your session has expired. Please sign back in.');\n    }\n  }\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/form/utils/handleUnsavedChanges.js"],"names":["axios","dialogBox","alertUnsavedChanges","initilState","state","currentPathname","setUpdates","history","JSON","stringify","targetPathname","location","pathname","targetTab","search","push","unblockRouting","block","msg","cancelBtnText","confirmBtnText","confirmCb","cancelCb","window","replace","origin","saveChangesOnLeave","endSession","http","config","headers","post","err","response","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,OAAO,MAAMC,mBAAmB,GAAG,OAC/BC,WAD+B,EAE/BC,KAF+B,EAG/BC,eAH+B,EAI/BC,UAJ+B,EAK/BC,OAL+B,KAM9B;AACD,MAAIC,IAAI,CAACC,SAAL,CAAeL,KAAf,MAA0BI,IAAI,CAACC,SAAL,CAAeN,WAAf,CAA9B,EAA2D;AACvD,UAAMO,cAAc,GAAGH,OAAO,CAACI,QAAR,CAAiBC,QAAxC;AACA,UAAMC,SAAS,GAAGN,OAAO,CAACI,QAAR,CAAiBG,MAAnC;AACAP,IAAAA,OAAO,CAACQ,IAAR,CAAaV,eAAb;AACA,UAAMW,cAAc,GAAGT,OAAO,CAACU,KAAR,EAAvB;AAEA,UAAMC,GAAG,GAAI,2DAAb;AACA,UAAMC,aAAa,GAAG,mBAAtB;AACA,UAAMC,cAAc,GAAG,qBAAvB;;AACA,UAAMC,SAAS,GAAG,MAAM;AACpBL,MAAAA,cAAc;AACjB,KAFD;;AAGA,UAAMM,QAAQ,GAAG,YAAY;AACzB;AACA;AACA,UAAIZ,cAAc,KAAKL,eAAvB,EAAwC;AACpC;AACAkB,QAAAA,MAAM,CAACZ,QAAP,CAAgBa,OAAhB,CACID,MAAM,CAACZ,QAAP,CAAgBc,MAAhB,GAAyBf,cAAzB,GAA0CG,SAD9C;AAGH,OALD,MAKO;AACH;AACAU,QAAAA,MAAM,CAACZ,QAAP,CAAgBa,OAAhB,CACID,MAAM,CAACZ,QAAP,CAAgBc,MAAhB,GAAyBf,cAAzB,GAA0C,YAD9C;AAGH;AACJ,KAdD;;AAgBAT,IAAAA,SAAS,CAAC;AACNiB,MAAAA,GADM;AAENC,MAAAA,aAFM;AAGNC,MAAAA,cAHM;AAINC,MAAAA,SAJM;AAKNC,MAAAA;AALM,KAAD,CAAT;AAOH,GAnCD,MAmCO;AACH;AACA,QAAIhB,UAAJ,EAAgBA,UAAU,CAAC,IAAD,CAAV;AACnB;AACJ,CA9CM;AAgDP,OAAO,MAAMoB,kBAAkB,GAAG,OAC9BvB,WAD8B,EAE9BC,KAF8B,EAG9BuB,UAH8B,EAI9BC,IAJ8B,CAIzB;AAJyB,KAK7B;AACD,MAAI;AACA,QAAIpB,IAAI,CAACC,SAAL,CAAeL,KAAf,MAA0BI,IAAI,CAACC,SAAL,CAAeN,WAAf,CAA9B,EAA2D;AACvD,YAAM0B,MAAM,GAAG;AACXC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AADE,OAAf;AAMA,YAAM9B,KAAK,CAAC+B,IAAN,CAAWH,IAAX,EAAiBpB,IAAI,CAACC,SAAL,CAAeL,KAAf,CAAjB,EAAwCyB,MAAxC,CAAN;AACH;AACJ,GAVD,CAUE,OAAOG,GAAP,EAAY;AACV,QAAIA,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkBhB,GAAlB,KAA0B,WAA9B,EAA2C;AACvCS,MAAAA,UAAU,CAAC,gDAAD,CAAV;AACH;AACJ;AACJ,CArBM","sourcesContent":["import axios from 'axios';\nimport { dialogBox } from '../../alerts/alertsFuns';\n\nexport const alertUnsavedChanges = async (\n    initilState,\n    state,\n    currentPathname,\n    setUpdates,\n    history\n) => {\n    if (JSON.stringify(state) !== JSON.stringify(initilState)) {\n        const targetPathname = history.location.pathname;\n        const targetTab = history.location.search;\n        history.push(currentPathname);\n        const unblockRouting = history.block();\n\n        const msg = `You have some unsaved changes. What would you like to do?`;\n        const cancelBtnText = 'Discharge changes';\n        const confirmBtnText = 'Return to the form!';\n        const confirmCb = () => {\n            unblockRouting();\n        };\n        const cancelCb = async () => {\n            //discharge all changes and clear app changes status\n            // changes cleared on reload\n            if (targetPathname === currentPathname) {\n                //on clicking submenu redirect to the targeted tab\n                window.location.replace(\n                    window.location.origin + targetPathname + targetTab\n                );\n            } else {\n                //on clicking companies tab before cancelation\n                window.location.replace(\n                    window.location.origin + targetPathname + '?tab=tasks'\n                );\n            }\n        };\n\n        dialogBox({\n            msg,\n            cancelBtnText,\n            confirmBtnText,\n            confirmCb,\n            cancelCb,\n        });\n    } else {\n        //no chnages\n        if (setUpdates) setUpdates(null);\n    }\n};\n\nexport const saveChangesOnLeave = async (\n    initilState,\n    state,\n    endSession,\n    http //api call\n) => {\n    try {\n        if (JSON.stringify(state) !== JSON.stringify(initilState)) {\n            const config = {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n\n            await axios.post(http, JSON.stringify(state), config);\n        }\n    } catch (err) {\n        if (err.response.data.msg === 'AuthError') {\n            endSession('Your session has expired. Please sign back in.');\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}