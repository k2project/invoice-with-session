{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/form/forms/AddCustomFields.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport FormInput from '../components/FormInput';\nimport FormErrorsDisplay from '../components/FormErrorsDisplay';\nimport { formErrorsStyling } from '../utils/formFuns';\nexport default function AddCustomFields({\n  addCustomToFieldsFormState,\n  maxPosition\n}) {\n  const [formData, setFormData] = useState({\n    customFieldLabel: '',\n    customFieldValue: '',\n    customFieldPosition: null,\n    errors: []\n  });\n\n  const handleAdd = async e => {\n    e.preventDefault();\n    const {\n      customFieldLabel,\n      customFieldValue,\n      customFieldPosition\n    } = formData;\n    const errors = [];\n\n    if (!customFieldLabel.trim()) {\n      const error = {\n        param: 'customFieldLabel',\n        msg: 'Please provide the label for the custom input.'\n      };\n      errors.push(error);\n    }\n\n    if (!customFieldValue.trim()) {\n      const error = {\n        param: 'customFieldValue',\n        msg: 'Please provide the value for the custom input.'\n      };\n      errors.push(error);\n    }\n\n    if (errors.length > 0) {\n      setFormData({ ...formData,\n        errors\n      });\n      return;\n    } //create customised field\n\n\n    const customField = {\n      _id: uuidv4(),\n      label: customFieldLabel,\n      value: customFieldValue,\n      position: customFieldPosition || ++maxPosition,\n      addToInvoice: true,\n      custom: true,\n      inputType: 'text'\n    };\n    await addCustomToFieldsFormState(customField); //reset state\n\n    setFormData({\n      customFieldLabel: '',\n      customFieldValue: '',\n      customFieldPosition: null,\n      errors: []\n    }); //set last option as default\n\n    document.getElementById('customFieldPosition').lastElementChild.setAttribute('selected', true);\n  };\n\n  const getSelectedPosition = () => {\n    const el = document.getElementById('customFieldPosition');\n    setFormData({ ...formData,\n      customFieldPosition: el.options[el.selectedIndex].value\n    });\n  };\n\n  useEffect(() => {\n    document.getElementById('customFieldPosition').lastElementChild.setAttribute('selected', true);\n    formErrorsStyling(formData.errors);\n  }, [formData.errors]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    className: \"add-custom-fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }, \"Add a custom field to the form.\")), /*#__PURE__*/React.createElement(FormInput, {\n    form: {\n      formData,\n      setFormData\n    },\n    name: \"customFieldLabel\",\n    size: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, \"Label / Description*\"), /*#__PURE__*/React.createElement(FormInput, {\n    form: {\n      formData,\n      setFormData\n    },\n    name: \"customFieldValue\",\n    size: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, \"Value*\"), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"customFieldPosition\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, \"Choose a position:\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"customFieldPosition\",\n    onChange: getSelectedPosition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, [...Array(++maxPosition).keys()].map(key => /*#__PURE__*/React.createElement(\"option\", {\n    value: key,\n    key: 'position-of-custom-field-' + key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 25\n    }\n  }, key + 1))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn--grey\",\n    onMouseDown: e => e.preventDefault(),\n    onClick: handleAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, \"Add Item\")), formData.errors.length > 0 && /*#__PURE__*/React.createElement(FormErrorsDisplay, {\n    errors: formData.errors,\n    label: \"Add custom field form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/components/form/forms/AddCustomFields.js"],"names":["React","useState","useEffect","Fragment","v4","uuidv4","FormInput","FormErrorsDisplay","formErrorsStyling","AddCustomFields","addCustomToFieldsFormState","maxPosition","formData","setFormData","customFieldLabel","customFieldValue","customFieldPosition","errors","handleAdd","e","preventDefault","trim","error","param","msg","push","length","customField","_id","label","value","position","addToInvoice","custom","inputType","document","getElementById","lastElementChild","setAttribute","getSelectedPosition","el","options","selectedIndex","Array","keys","map","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AAEA,eAAe,SAASC,eAAT,CAAyB;AACpCC,EAAAA,0BADoC;AAEpCC,EAAAA;AAFoC,CAAzB,EAGZ;AACC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC;AACrCa,IAAAA,gBAAgB,EAAE,EADmB;AAErCC,IAAAA,gBAAgB,EAAE,EAFmB;AAGrCC,IAAAA,mBAAmB,EAAE,IAHgB;AAIrCC,IAAAA,MAAM,EAAE;AAJ6B,GAAD,CAAxC;;AAMA,QAAMC,SAAS,GAAG,MAAOC,CAAP,IAAa;AAC3BA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAM;AACFN,MAAAA,gBADE;AAEFC,MAAAA,gBAFE;AAGFC,MAAAA;AAHE,QAIFJ,QAJJ;AAKA,UAAMK,MAAM,GAAG,EAAf;;AACA,QAAI,CAACH,gBAAgB,CAACO,IAAjB,EAAL,EAA8B;AAC1B,YAAMC,KAAK,GAAG;AACVC,QAAAA,KAAK,EAAE,kBADG;AAEVC,QAAAA,GAAG,EAAE;AAFK,OAAd;AAIAP,MAAAA,MAAM,CAACQ,IAAP,CAAYH,KAAZ;AACH;;AACD,QAAI,CAACP,gBAAgB,CAACM,IAAjB,EAAL,EAA8B;AAC1B,YAAMC,KAAK,GAAG;AACVC,QAAAA,KAAK,EAAE,kBADG;AAEVC,QAAAA,GAAG,EAAE;AAFK,OAAd;AAIAP,MAAAA,MAAM,CAACQ,IAAP,CAAYH,KAAZ;AACH;;AAED,QAAIL,MAAM,CAACS,MAAP,GAAgB,CAApB,EAAuB;AACnBb,MAAAA,WAAW,CAAC,EACR,GAAGD,QADK;AAERK,QAAAA;AAFQ,OAAD,CAAX;AAIA;AACH,KA7B0B,CA+B3B;;;AACA,UAAMU,WAAW,GAAG;AAChBC,MAAAA,GAAG,EAAEvB,MAAM,EADK;AAEhBwB,MAAAA,KAAK,EAAEf,gBAFS;AAGhBgB,MAAAA,KAAK,EAAEf,gBAHS;AAIhBgB,MAAAA,QAAQ,EAAEf,mBAAmB,IAAI,EAAEL,WAJnB;AAKhBqB,MAAAA,YAAY,EAAE,IALE;AAMhBC,MAAAA,MAAM,EAAE,IANQ;AAOhBC,MAAAA,SAAS,EAAE;AAPK,KAApB;AASA,UAAMxB,0BAA0B,CAACiB,WAAD,CAAhC,CAzC2B,CA0C3B;;AACAd,IAAAA,WAAW,CAAC;AACRC,MAAAA,gBAAgB,EAAE,EADV;AAERC,MAAAA,gBAAgB,EAAE,EAFV;AAGRC,MAAAA,mBAAmB,EAAE,IAHb;AAIRC,MAAAA,MAAM,EAAE;AAJA,KAAD,CAAX,CA3C2B,CAiD3B;;AACAkB,IAAAA,QAAQ,CACHC,cADL,CACoB,qBADpB,EAEKC,gBAFL,CAEsBC,YAFtB,CAEmC,UAFnC,EAE+C,IAF/C;AAGH,GArDD;;AAsDA,QAAMC,mBAAmB,GAAG,MAAM;AAC9B,UAAMC,EAAE,GAAGL,QAAQ,CAACC,cAAT,CAAwB,qBAAxB,CAAX;AACAvB,IAAAA,WAAW,CAAC,EACR,GAAGD,QADK;AAERI,MAAAA,mBAAmB,EAAEwB,EAAE,CAACC,OAAH,CAAWD,EAAE,CAACE,aAAd,EAA6BZ;AAF1C,KAAD,CAAX;AAIH,GAND;;AAOA5B,EAAAA,SAAS,CAAC,MAAM;AACZiC,IAAAA,QAAQ,CACHC,cADL,CACoB,qBADpB,EAEKC,gBAFL,CAEsBC,YAFtB,CAEmC,UAFnC,EAE+C,IAF/C;AAGA9B,IAAAA,iBAAiB,CAACI,QAAQ,CAACK,MAAV,CAAjB;AACH,GALQ,EAKN,CAACL,QAAQ,CAACK,MAAV,CALM,CAAT;AAMA,sBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAU,IAAA,SAAS,EAAC,mBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADJ,CADJ,eAII,oBAAC,SAAD;AACI,IAAA,IAAI,EAAE;AAAEL,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KADV;AAEI,IAAA,IAAI,EAAC,kBAFT;AAGI,IAAA,IAAI,EAAC,MAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAJJ,eAWI,oBAAC,SAAD;AACI,IAAA,IAAI,EAAE;AAAED,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KADV;AAEI,IAAA,IAAI,EAAC,kBAFT;AAGI,IAAA,IAAI,EAAC,MAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ,eAmBI;AAAO,IAAA,OAAO,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAnBJ,eAoBI;AAAQ,IAAA,EAAE,EAAC,qBAAX;AAAiC,IAAA,QAAQ,EAAE0B,mBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAAC,GAAGI,KAAK,CAAC,EAAEhC,WAAH,CAAL,CAAqBiC,IAArB,EAAJ,EAAiCC,GAAjC,CAAsCC,GAAD,iBAClC;AACI,IAAA,KAAK,EAAEA,GADX;AAEI,IAAA,GAAG,EAAE,8BAA8BA,GAFvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIKA,GAAG,GAAG,CAJX,CADH,CADL,CApBJ,eA8BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9BJ,eA+BI;AACI,IAAA,SAAS,EAAC,eADd;AAEI,IAAA,WAAW,EAAG3B,CAAD,IAAOA,CAAC,CAACC,cAAF,EAFxB;AAGI,IAAA,OAAO,EAAEF,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA/BJ,CADJ,EAwCKN,QAAQ,CAACK,MAAT,CAAgBS,MAAhB,GAAyB,CAAzB,iBACG,oBAAC,iBAAD;AACI,IAAA,MAAM,EAAEd,QAAQ,CAACK,MADrB;AAEI,IAAA,KAAK,EAAC,uBAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzCR,CADJ;AAiDH","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport FormInput from '../components/FormInput';\nimport FormErrorsDisplay from '../components/FormErrorsDisplay';\nimport { formErrorsStyling } from '../utils/formFuns';\n\nexport default function AddCustomFields({\n    addCustomToFieldsFormState,\n    maxPosition,\n}) {\n    const [formData, setFormData] = useState({\n        customFieldLabel: '',\n        customFieldValue: '',\n        customFieldPosition: null,\n        errors: [],\n    });\n    const handleAdd = async (e) => {\n        e.preventDefault();\n        const {\n            customFieldLabel,\n            customFieldValue,\n            customFieldPosition,\n        } = formData;\n        const errors = [];\n        if (!customFieldLabel.trim()) {\n            const error = {\n                param: 'customFieldLabel',\n                msg: 'Please provide the label for the custom input.',\n            };\n            errors.push(error);\n        }\n        if (!customFieldValue.trim()) {\n            const error = {\n                param: 'customFieldValue',\n                msg: 'Please provide the value for the custom input.',\n            };\n            errors.push(error);\n        }\n\n        if (errors.length > 0) {\n            setFormData({\n                ...formData,\n                errors,\n            });\n            return;\n        }\n\n        //create customised field\n        const customField = {\n            _id: uuidv4(),\n            label: customFieldLabel,\n            value: customFieldValue,\n            position: customFieldPosition || ++maxPosition,\n            addToInvoice: true,\n            custom: true,\n            inputType: 'text',\n        };\n        await addCustomToFieldsFormState(customField);\n        //reset state\n        setFormData({\n            customFieldLabel: '',\n            customFieldValue: '',\n            customFieldPosition: null,\n            errors: [],\n        });\n        //set last option as default\n        document\n            .getElementById('customFieldPosition')\n            .lastElementChild.setAttribute('selected', true);\n    };\n    const getSelectedPosition = () => {\n        const el = document.getElementById('customFieldPosition');\n        setFormData({\n            ...formData,\n            customFieldPosition: el.options[el.selectedIndex].value,\n        });\n    };\n    useEffect(() => {\n        document\n            .getElementById('customFieldPosition')\n            .lastElementChild.setAttribute('selected', true);\n        formErrorsStyling(formData.errors);\n    }, [formData.errors]);\n    return (\n        <Fragment>\n            <fieldset className='add-custom-fields'>\n                <legend>\n                    <b>Add a custom field to the form.</b>\n                </legend>\n                <FormInput\n                    form={{ formData, setFormData }}\n                    name='customFieldLabel'\n                    size='auto'\n                >\n                    Label / Description*\n                </FormInput>\n                <FormInput\n                    form={{ formData, setFormData }}\n                    name='customFieldValue'\n                    size='auto'\n                >\n                    Value*\n                </FormInput>\n\n                <label htmlFor='customFieldPosition'>Choose a position:</label>\n                <select id='customFieldPosition' onChange={getSelectedPosition}>\n                    {[...Array(++maxPosition).keys()].map((key) => (\n                        <option\n                            value={key}\n                            key={'position-of-custom-field-' + key}\n                        >\n                            {key + 1}\n                        </option>\n                    ))}\n                </select>\n                <br />\n                <button\n                    className='btn btn--grey'\n                    onMouseDown={(e) => e.preventDefault()}\n                    onClick={handleAdd}\n                >\n                    Add Item\n                </button>\n            </fieldset>\n            {formData.errors.length > 0 && (\n                <FormErrorsDisplay\n                    errors={formData.errors}\n                    label='Add custom field form'\n                />\n            )}\n        </Fragment>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}