{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  asciiLowercase\n} = require(\"../helpers/strings\");\n\nconst {\n  closest\n} = require(\"../helpers/traversal\");\n\nfunction reflectedAttributeClampedToRange(attrValue, min, max, defaultValue = 0) {\n  if (attrValue === null) {\n    return defaultValue;\n  } // We don't allow hexadecimal numbers here.\n  // eslint-disable-next-line radix\n\n\n  const parsed = parseInt(attrValue, 10);\n\n  if (isNaN(parsed) || parsed < 0) {\n    return defaultValue;\n  }\n\n  if (parsed < min) {\n    return min;\n  }\n\n  if (parsed > max) {\n    return max;\n  }\n\n  return parsed;\n}\n\nclass HTMLTableCellElementImpl extends HTMLElementImpl {\n  get colSpan() {\n    return reflectedAttributeClampedToRange(this.getAttribute(\"colspan\"), 1, 1000, 1);\n  }\n\n  set colSpan(V) {\n    this.setAttribute(\"colspan\", String(V));\n  }\n\n  get rowSpan() {\n    return reflectedAttributeClampedToRange(this.getAttribute(\"rowspan\"), 0, 65534, 1);\n  }\n\n  set rowSpan(V) {\n    this.setAttribute(\"rowspan\", String(V));\n  }\n\n  get cellIndex() {\n    const tr = closest(this, \"tr\");\n\n    if (tr === null) {\n      return -1;\n    }\n\n    return tr.cells.indexOf(this);\n  }\n\n  get scope() {\n    let value = this.getAttribute(\"scope\");\n\n    if (value === null) {\n      return \"\";\n    } // Enumerated attribute is matched ASCII-case-insensitively.\n\n\n    value = asciiLowercase(value);\n\n    if (value === \"row\" || value === \"col\" || value === \"rowgroup\" || value === \"colgroup\") {\n      return value;\n    }\n\n    return \"\";\n  }\n\n  set scope(V) {\n    this.setAttribute(\"scope\", V);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLTableCellElementImpl\n};","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableCellElement-impl.js"],"names":["HTMLElementImpl","require","implementation","asciiLowercase","closest","reflectedAttributeClampedToRange","attrValue","min","max","defaultValue","parsed","parseInt","isNaN","HTMLTableCellElementImpl","colSpan","getAttribute","V","setAttribute","String","rowSpan","cellIndex","tr","cells","indexOf","scope","value","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAAP,CAA8BC,cAAtD;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAqBF,OAAO,CAAC,oBAAD,CAAlC;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAcH,OAAO,CAAC,sBAAD,CAA3B;;AAEA,SAASI,gCAAT,CAA0CC,SAA1C,EAAqDC,GAArD,EAA0DC,GAA1D,EAA+DC,YAAY,GAAG,CAA9E,EAAiF;AAC/E,MAAIH,SAAS,KAAK,IAAlB,EAAwB;AACtB,WAAOG,YAAP;AACD,GAH8E,CAI/E;AACA;;;AACA,QAAMC,MAAM,GAAGC,QAAQ,CAACL,SAAD,EAAY,EAAZ,CAAvB;;AACA,MAAIM,KAAK,CAACF,MAAD,CAAL,IAAiBA,MAAM,GAAG,CAA9B,EAAiC;AAC/B,WAAOD,YAAP;AACD;;AACD,MAAIC,MAAM,GAAGH,GAAb,EAAkB;AAChB,WAAOA,GAAP;AACD;;AACD,MAAIG,MAAM,GAAGF,GAAb,EAAkB;AAChB,WAAOA,GAAP;AACD;;AACD,SAAOE,MAAP;AACD;;AAED,MAAMG,wBAAN,SAAuCb,eAAvC,CAAuD;AACrD,MAAIc,OAAJ,GAAc;AACZ,WAAOT,gCAAgC,CAAC,KAAKU,YAAL,CAAkB,SAAlB,CAAD,EAA+B,CAA/B,EAAkC,IAAlC,EAAwC,CAAxC,CAAvC;AACD;;AAED,MAAID,OAAJ,CAAYE,CAAZ,EAAe;AACb,SAAKC,YAAL,CAAkB,SAAlB,EAA6BC,MAAM,CAACF,CAAD,CAAnC;AACD;;AAED,MAAIG,OAAJ,GAAc;AACZ,WAAOd,gCAAgC,CAAC,KAAKU,YAAL,CAAkB,SAAlB,CAAD,EAA+B,CAA/B,EAAkC,KAAlC,EAAyC,CAAzC,CAAvC;AACD;;AAED,MAAII,OAAJ,CAAYH,CAAZ,EAAe;AACb,SAAKC,YAAL,CAAkB,SAAlB,EAA6BC,MAAM,CAACF,CAAD,CAAnC;AACD;;AAED,MAAII,SAAJ,GAAgB;AACd,UAAMC,EAAE,GAAGjB,OAAO,CAAC,IAAD,EAAO,IAAP,CAAlB;;AACA,QAAIiB,EAAE,KAAK,IAAX,EAAiB;AACf,aAAO,CAAC,CAAR;AACD;;AAED,WAAOA,EAAE,CAACC,KAAH,CAASC,OAAT,CAAiB,IAAjB,CAAP;AACD;;AAED,MAAIC,KAAJ,GAAY;AACV,QAAIC,KAAK,GAAG,KAAKV,YAAL,CAAkB,OAAlB,CAAZ;;AACA,QAAIU,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAO,EAAP;AACD,KAJS,CAMV;;;AACAA,IAAAA,KAAK,GAAGtB,cAAc,CAACsB,KAAD,CAAtB;;AACA,QAAIA,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,KAA7B,IAAsCA,KAAK,KAAK,UAAhD,IAA8DA,KAAK,KAAK,UAA5E,EAAwF;AACtF,aAAOA,KAAP;AACD;;AAED,WAAO,EAAP;AACD;;AAED,MAAID,KAAJ,CAAUR,CAAV,EAAa;AACX,SAAKC,YAAL,CAAkB,OAAlB,EAA2BD,CAA3B;AACD;;AA3CoD;;AA8CvDU,MAAM,CAACC,OAAP,GAAiB;AACfzB,EAAAA,cAAc,EAAEW;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst { asciiLowercase } = require(\"../helpers/strings\");\nconst { closest } = require(\"../helpers/traversal\");\n\nfunction reflectedAttributeClampedToRange(attrValue, min, max, defaultValue = 0) {\n  if (attrValue === null) {\n    return defaultValue;\n  }\n  // We don't allow hexadecimal numbers here.\n  // eslint-disable-next-line radix\n  const parsed = parseInt(attrValue, 10);\n  if (isNaN(parsed) || parsed < 0) {\n    return defaultValue;\n  }\n  if (parsed < min) {\n    return min;\n  }\n  if (parsed > max) {\n    return max;\n  }\n  return parsed;\n}\n\nclass HTMLTableCellElementImpl extends HTMLElementImpl {\n  get colSpan() {\n    return reflectedAttributeClampedToRange(this.getAttribute(\"colspan\"), 1, 1000, 1);\n  }\n\n  set colSpan(V) {\n    this.setAttribute(\"colspan\", String(V));\n  }\n\n  get rowSpan() {\n    return reflectedAttributeClampedToRange(this.getAttribute(\"rowspan\"), 0, 65534, 1);\n  }\n\n  set rowSpan(V) {\n    this.setAttribute(\"rowspan\", String(V));\n  }\n\n  get cellIndex() {\n    const tr = closest(this, \"tr\");\n    if (tr === null) {\n      return -1;\n    }\n\n    return tr.cells.indexOf(this);\n  }\n\n  get scope() {\n    let value = this.getAttribute(\"scope\");\n    if (value === null) {\n      return \"\";\n    }\n\n    // Enumerated attribute is matched ASCII-case-insensitively.\n    value = asciiLowercase(value);\n    if (value === \"row\" || value === \"col\" || value === \"rowgroup\" || value === \"colgroup\") {\n      return value;\n    }\n\n    return \"\";\n  }\n\n  set scope(V) {\n    this.setAttribute(\"scope\", V);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLTableCellElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}