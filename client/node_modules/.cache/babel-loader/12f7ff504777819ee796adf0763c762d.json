{"ast":null,"code":"var _jsxFileName = \"/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoiceSubmit.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { getAllCompanies, updateCompanyArr } from '../../../redux/actions/companies';\nimport { setAlert } from '../../../redux/actions/messages';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport FormInput from '../../../components/form/components/FormInput';\nexport const NewInvoiceSubmit = ({\n  company,\n  invoice,\n  getAllCompanies,\n  updateCompanyArr,\n  handleSubmit,\n  setAlert,\n  history\n}) => {\n  const [update, setUpdate] = useState(false);\n  useEffect(() => {\n    const searchArr = window.location.search.split('&');\n\n    if (searchArr[1]) {\n      //downlaoding an existing invoice\n      //?download=...\n      const search = searchArr[1].slice(0, 8);\n      const invoiceForm = document.getElementById('invoice');\n\n      if (search === 'download' && invoiceForm) {\n        setTimeout(() => {\n          downloadInvoice();\n        }, 0); // no prompt\n        // handleSubmit();\n        //reset company.tasks\n        // const tasks = company.tasks.filter((t) => !t.addToInvoice);\n        // updateCompanyArr('tasks', tasks, company._id);\n        // history.push(\n        //     `/dashboard/companies/${company._id}?tab=invoices`\n        // );\n      }\n\n      if (search === 'updating' && invoiceForm) {\n        setUpdate(true);\n        show_form();\n      }\n    }\n  }, []);\n\n  const downloadInvoice = () => {\n    const invoiceEl = document.getElementById('invoice').innerHTML;\n    const pdf = window.open();\n    pdf.document.write('<html><head>');\n    pdf.document.write(`<link rel=\"stylesheet\" type=\"text/css\" href=\"${window.location.origin}/invoice.css\"/>`);\n    pdf.document.write(` <link\n            href=\"https://fonts.googleapis.com/css?family=Audiowide|Inter:400,600&display=swap\"\n            rel=\"stylesheet\"\n        />`);\n    pdf.document.write('</head><body>');\n    pdf.document.write(invoiceEl);\n    pdf.document.write('</body></link>');\n    pdf.document.close();\n    setTimeout(function () {\n      pdf.print();\n    }, 500);\n  };\n\n  const [saveAs, setSaveAs] = useState(false);\n\n  const show_form = async () => {\n    await setSaveAs(true);\n    const invoiceNumInput = document.querySelector('.form__save-as input');\n    invoiceNumInput.focus();\n    invoiceNumInput.value = invoice.saved_as;\n  };\n\n  const [formData, setFormData] = useState({\n    saveAs: invoice.saved_as,\n    errors: []\n  });\n\n  const saveInvoice = async e => {\n    e.preventDefault(); //save invoice state\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const tasksIncludedInInvoice = company.tasks.filter(t => t.addToInvoice);\n      if (tasksIncludedInInvoice.length === 0) return setAlert('There is no items in the invoice to be saved. Please add a new item.', 'danger', null, false, 10000);\n      invoice.tasks = tasksIncludedInInvoice;\n      const tasks = company.tasks.filter(t => !t.addToInvoice);\n      invoice.saved_as = document.getElementById('saveAs').value;\n      await axios.post(`/api/companies/invoice/${company._id}`, JSON.stringify({\n        invoice,\n        tasks\n      }), config);\n      await getAllCompanies();\n      setSaveAs(false); // stop check for unsaved changes on NewInvocie unmount\n\n      handleSubmit();\n      history.push(`/dashboard/companies/${company._id}?tab=invoices`);\n    } catch (err) {\n      console.log('Invoice saving err:', err);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"invoice-submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, update ? 'Update invoice form.' : 'Invoice form.'), saveAs && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form__save-as\",\n    onSubmit: saveInvoice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    form: {\n      formData,\n      setFormData\n    },\n    name: \"saveAs\",\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 25\n    }\n  }, \"Save as: \")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn--info btn--sibling\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, ' ', \"Save\")), !saveAs && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn--info btn--sibling\",\n    onClick: show_form,\n    id: \"save-as\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, \"Save As\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn--success\",\n    onClick: downloadInvoice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, \"Download*\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, \"*\", ' ', /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }, \"You can either print or save the invoice in pdf format.\", ' ', /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  }), \"We recommend using Chrome browser for the best experience. On clicking this button follow your browsers specification on how to handle the process.\")));\n};\nNewInvoiceSubmit.propTypes = {\n  company: PropTypes.object,\n  invoice: PropTypes.object,\n  getAllCompanies: PropTypes.func,\n  updateCompanyArr: PropTypes.func,\n  setInvoiceInitState: PropTypes.func,\n  setAlert: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  company: state.companies.find(c => c._id === state.session.currentCompany),\n  invoice: state.invoice\n});\n\nconst mapDispatchToProps = {\n  getAllCompanies,\n  updateCompanyArr,\n  setAlert\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(NewInvoiceSubmit));","map":{"version":3,"sources":["/Users/krispol/Desktop/invoice/invoice-with-session/client/src/pages/company/companyInvoice/NewInvoiceSubmit.js"],"names":["React","useState","useEffect","PropTypes","withRouter","axios","connect","getAllCompanies","updateCompanyArr","setAlert","setInvoiceInitState","FormInput","NewInvoiceSubmit","company","invoice","handleSubmit","history","update","setUpdate","searchArr","window","location","search","split","slice","invoiceForm","document","getElementById","setTimeout","downloadInvoice","show_form","invoiceEl","innerHTML","pdf","open","write","origin","close","print","saveAs","setSaveAs","invoiceNumInput","querySelector","focus","value","saved_as","formData","setFormData","errors","saveInvoice","e","preventDefault","config","headers","tasksIncludedInInvoice","tasks","filter","t","addToInvoice","length","post","_id","JSON","stringify","push","err","console","log","propTypes","object","func","mapStateToProps","state","companies","find","c","session","currentCompany","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport {\n    getAllCompanies,\n    updateCompanyArr,\n} from '../../../redux/actions/companies';\nimport { setAlert } from '../../../redux/actions/messages';\nimport { setInvoiceInitState } from '../../../redux/actions/invoice';\nimport FormInput from '../../../components/form/components/FormInput';\n\nexport const NewInvoiceSubmit = ({\n    company,\n    invoice,\n    getAllCompanies,\n    updateCompanyArr,\n    handleSubmit,\n    setAlert,\n    history,\n}) => {\n    const [update, setUpdate] = useState(false);\n    useEffect(() => {\n        const searchArr = window.location.search.split('&');\n        if (searchArr[1]) {\n            //downlaoding an existing invoice\n            //?download=...\n            const search = searchArr[1].slice(0, 8);\n            const invoiceForm = document.getElementById('invoice');\n            if (search === 'download' && invoiceForm) {\n                setTimeout(() => {\n                    downloadInvoice();\n                }, 0);\n                // no prompt\n                // handleSubmit();\n                //reset company.tasks\n                // const tasks = company.tasks.filter((t) => !t.addToInvoice);\n                // updateCompanyArr('tasks', tasks, company._id);\n                // history.push(\n                //     `/dashboard/companies/${company._id}?tab=invoices`\n                // );\n            }\n            if (search === 'updating' && invoiceForm) {\n                setUpdate(true);\n                show_form();\n            }\n        }\n    }, []);\n    const downloadInvoice = () => {\n        const invoiceEl = document.getElementById('invoice').innerHTML;\n        const pdf = window.open();\n        pdf.document.write('<html><head>');\n        pdf.document.write(\n            `<link rel=\"stylesheet\" type=\"text/css\" href=\"${window.location.origin}/invoice.css\"/>`\n        );\n        pdf.document.write(\n            ` <link\n            href=\"https://fonts.googleapis.com/css?family=Audiowide|Inter:400,600&display=swap\"\n            rel=\"stylesheet\"\n        />`\n        );\n        pdf.document.write('</head><body>');\n        pdf.document.write(invoiceEl);\n        pdf.document.write('</body></link>');\n        pdf.document.close();\n        setTimeout(function () {\n            pdf.print();\n        }, 500);\n    };\n    const [saveAs, setSaveAs] = useState(false);\n    const show_form = async () => {\n        await setSaveAs(true);\n        const invoiceNumInput = document.querySelector('.form__save-as input');\n        invoiceNumInput.focus();\n        invoiceNumInput.value = invoice.saved_as;\n    };\n    const [formData, setFormData] = useState({\n        saveAs: invoice.saved_as,\n        errors: [],\n    });\n    const saveInvoice = async (e) => {\n        e.preventDefault();\n        //save invoice state\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            };\n\n            const tasksIncludedInInvoice = company.tasks.filter(\n                (t) => t.addToInvoice\n            );\n            if (tasksIncludedInInvoice.length === 0)\n                return setAlert(\n                    'There is no items in the invoice to be saved. Please add a new item.',\n                    'danger',\n                    null,\n                    false,\n                    10000\n                );\n            invoice.tasks = tasksIncludedInInvoice;\n            const tasks = company.tasks.filter((t) => !t.addToInvoice);\n            invoice.saved_as = document.getElementById('saveAs').value;\n            await axios.post(\n                `/api/companies/invoice/${company._id}`,\n                JSON.stringify({ invoice, tasks }),\n                config\n            );\n            await getAllCompanies();\n            setSaveAs(false);\n            // stop check for unsaved changes on NewInvocie unmount\n            handleSubmit();\n            history.push(`/dashboard/companies/${company._id}?tab=invoices`);\n        } catch (err) {\n            console.log('Invoice saving err:', err);\n        }\n    };\n\n    return (\n        <section className='invoice-submit'>\n            <h3 className='sr-only'>\n                {update ? 'Update invoice form.' : 'Invoice form.'}\n            </h3>\n            {saveAs && (\n                <form className='form__save-as' onSubmit={saveInvoice}>\n                    <FormInput\n                        form={{ formData, setFormData }}\n                        name='saveAs'\n                        size='sm'\n                    >\n                        <b>Save as: </b>\n                    </FormInput>\n                    <button\n                        type='submit'\n                        className='btn btn--info btn--sibling'\n                    >\n                        {' '}\n                        Save\n                    </button>\n                </form>\n            )}\n\n            {!saveAs && (\n                <button\n                    type='button'\n                    className='btn btn--info btn--sibling'\n                    onClick={show_form}\n                    id='save-as'\n                >\n                    Save As\n                </button>\n            )}\n\n            <button\n                type='button'\n                className='btn btn--success'\n                onClick={downloadInvoice}\n            >\n                Download*\n            </button>\n\n            <p>\n                *{' '}\n                <small>\n                    You can either print or save the invoice in pdf format.{' '}\n                    <br />\n                    We recommend using Chrome browser for the best experience.\n                    On clicking this button follow your browsers specification\n                    on how to handle the process.\n                </small>\n            </p>\n        </section>\n    );\n};\n\nNewInvoiceSubmit.propTypes = {\n    company: PropTypes.object,\n    invoice: PropTypes.object,\n    getAllCompanies: PropTypes.func,\n    updateCompanyArr: PropTypes.func,\n    setInvoiceInitState: PropTypes.func,\n    setAlert: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n    company: state.companies.find(\n        (c) => c._id === state.session.currentCompany\n    ),\n    invoice: state.invoice,\n});\n\nconst mapDispatchToProps = {\n    getAllCompanies,\n    updateCompanyArr,\n    setAlert,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(NewInvoiceSubmit));\n"]},"metadata":{},"sourceType":"module"}